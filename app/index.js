!function(){"use strict";function t(t){return void 0===t||null===t}function e(t){return void 0!==t&&null!==t}function n(t){return!0===t}function a(t){return!1===t}function o(t){return"string"==typeof t||"number"==typeof t||"boolean"==typeof t}function i(t){return null!==t&&"object"==typeof t}function s(t){return na.call(t).slice(8,-1)}function r(t){return"[object Object]"===na.call(t)}function l(t){return"[object RegExp]"===na.call(t)}function c(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function u(t){return null==t?"":"object"==typeof t?JSON.stringify(t,null,2):String(t)}function d(t){var e=parseFloat(t);return isNaN(e)?t:e}function p(t,e){for(var n=Object.create(null),a=t.split(","),o=0;o<a.length;o++)n[a[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}function f(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}function v(t,e){return ia.call(t,e)}function h(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}function m(t,e){function n(n){var a=arguments.length;return a?a>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function y(t,e){e=e||0;for(var n=t.length-e,a=new Array(n);n--;)a[n]=t[n+e];return a}function _(t,e){for(var n in e)t[n]=e[n];return t}function g(t){for(var e={},n=0;n<t.length;n++)t[n]&&_(e,t[n]);return e}function b(t,e,n){}function C(t,e){if(t===e)return!0;var n=i(t),a=i(e);if(!n||!a)return!n&&!a&&String(t)===String(e);try{var o=Array.isArray(t),s=Array.isArray(e);if(o&&s)return t.length===e.length&&t.every(function(t,n){return C(t,e[n])});if(o||s)return!1;var r=Object.keys(t),l=Object.keys(e);return r.length===l.length&&r.every(function(n){return C(t[n],e[n])})}catch(t){return!1}}function x(t,e){for(var n=0;n<t.length;n++)if(C(t[n],e))return n;return-1}function k(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}function w(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function A(t,e,n,a){Object.defineProperty(t,e,{value:n,enumerable:!!a,writable:!0,configurable:!0})}function E(t){if(!_a.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}function T(t){return"function"==typeof t&&/native code/.test(t.toString())}function $(t){Wa.target&&za.push(Wa.target),Wa.target=t}function S(){Wa.target=za.pop()}function O(t){return new Ga(void 0,void 0,void 0,String(t))}function P(t,e){var n=new Ga(t.tag,t.data,t.children,t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return n.ns=t.ns,n.isStatic=t.isStatic,n.key=t.key,n.isComment=t.isComment,n.isCloned=!0,e&&t.children&&(n.children=M(t.children)),n}function M(t,e){for(var n=t.length,a=new Array(n),o=0;o<n;o++)a[o]=P(t[o],e);return a}function I(t,e,n){t.__proto__=e}function N(t,e,n){for(var a=0,o=n.length;a<o;a++){var i=n[a];A(t,i,e[i])}}function F(t,e){if(i(t)&&!(t instanceof Ga)){var n;return v(t,"__ob__")&&t.__ob__ instanceof to?n=t.__ob__:Xa.shouldConvert&&!Ia()&&(Array.isArray(t)||r(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new to(t)),e&&n&&n.vmCount++,n}}function L(t,e,n,a,o){var i=new Wa,s=Object.getOwnPropertyDescriptor(t,e);if(!s||!1!==s.configurable){var r=s&&s.get,l=s&&s.set,c=!o&&F(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=r?r.call(t):n;return Wa.target&&(i.depend(),c&&(c.dep.depend(),Array.isArray(e)&&D(e))),e},set:function(e){var s=r?r.call(t):n;e===s||e!==e&&s!==s||(a&&a(),l?l.call(t,e):n=e,c=!o&&F(e),i.notify())}})}}function R(t,e,n){if(Array.isArray(t)&&c(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(v(t,e))return t[e]=n,n;var a=t.__ob__;return t._isVue||a&&a.vmCount?(La("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):a?(L(a.value,e,n),a.dep.notify(),n):(t[e]=n,n)}function j(t,e){if(Array.isArray(t)&&c(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount?La("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):v(t,e)&&(delete t[e],n&&n.dep.notify())}}function D(t){for(var e=void 0,n=0,a=t.length;n<a;n++)(e=t[n])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&D(e)}function B(t,e){if(!e)return t;for(var n,a,o,i=Object.keys(e),s=0;s<i.length;s++)a=t[n=i[s]],o=e[n],v(t,n)?r(a)&&r(o)&&B(a,o):R(t,n,o);return t}function H(t,e,n){return n?t||e?function(){var a="function"==typeof e?e.call(n):e,o="function"==typeof t?t.call(n):t;return a?B(a,o):o}:void 0:e?t?function(){return B("function"==typeof e?e.call(this):e,"function"==typeof t?t.call(this):t)}:e:t}function Y(t,e){return e?t?t.concat(e):Array.isArray(e)?e:[e]:t}function U(t,e,n,a){var o=Object.create(t||null);return e?(q(a,e,n),_(o,e)):o}function V(t){for(var e in t.components){var n=e.toLowerCase();(aa(n)||ma.isReservedTag(n))&&La("Do not use built-in or reserved HTML elements as component id: "+e)}}function W(t,e){var n=t.props;if(n){var a,o,i={};if(Array.isArray(n))for(a=n.length;a--;)"string"==typeof(o=n[a])?i[ra(o)]={type:null}:La("props must be strings when using array syntax.");else if(r(n))for(var l in n)o=n[l],i[ra(l)]=r(o)?o:{type:o};else La('Invalid value for option "props": expected an Array or an Object, but got '+s(n)+".",e);t.props=i}}function z(t,e){var n=t.inject,a=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)a[n[o]]={from:n[o]};else if(r(n))for(var i in n){var l=n[i];a[i]=r(l)?_({from:i},l):{from:l}}else n&&La('Invalid value for option "inject": expected an Array or an Object, but got '+s(n)+".",e)}function G(t){var e=t.directives;if(e)for(var n in e){var a=e[n];"function"==typeof a&&(e[n]={bind:a,update:a})}}function q(t,e,n){r(e)||La('Invalid value for option "'+t+'": expected an Object, but got '+s(e)+".",n)}function K(t,e,n){function a(a){var o=eo[a]||oo;l[a]=o(t[a],e[a],n,a)}V(e),"function"==typeof e&&(e=e.options),W(e,n),z(e,n),G(e);var o=e.extends;if(o&&(t=K(t,o,n)),e.mixins)for(var i=0,s=e.mixins.length;i<s;i++)t=K(t,e.mixins[i],n);var r,l={};for(r in t)a(r);for(r in e)v(t,r)||a(r);return l}function J(t,e,n,a){if("string"==typeof n){var o=t[e];if(v(o,n))return o[n];var i=ra(n);if(v(o,i))return o[i];var s=la(i);if(v(o,s))return o[s];var r=o[n]||o[i]||o[s];return a&&!r&&La("Failed to resolve "+e.slice(0,-1)+": "+n,t),r}}function Z(t,e,n,a){var o=e[t],i=!v(n,t),s=n[t];if(nt(Boolean,o.type)&&(i&&!v(o,"default")?s=!1:nt(String,o.type)||""!==s&&s!==ua(t)||(s=!0)),void 0===s){s=Q(a,o,t);var r=Xa.shouldConvert;Xa.shouldConvert=!0,F(s),Xa.shouldConvert=r}return X(o,t,s,a,i),s}function Q(t,e,n){if(v(e,"default")){var a=e.default;return i(a)&&La('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',t),t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"==typeof a&&"Function"!==et(e.type)?a.call(t):a}}function X(t,e,n,a,o){if(t.required&&o)La('Missing required prop: "'+e+'"',a);else if(null!=n||t.required){var i=t.type,r=!i||!0===i,l=[];if(i){Array.isArray(i)||(i=[i]);for(var c=0;c<i.length&&!r;c++){var u=tt(n,i[c]);l.push(u.expectedType||""),r=u.valid}}if(r){var d=t.validator;d&&(d(n)||La('Invalid prop: custom validator check failed for prop "'+e+'".',a))}else La('Invalid prop: type check failed for prop "'+e+'". Expected '+l.map(la).join(", ")+", got "+s(n)+".",a)}}function tt(t,e){var n,a=et(e);if(io.test(a)){var o=typeof t;(n=o===a.toLowerCase())||"object"!==o||(n=t instanceof e)}else n="Object"===a?r(t):"Array"===a?Array.isArray(t):t instanceof e;return{valid:n,expectedType:a}}function et(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function nt(t,e){if(!Array.isArray(e))return et(e)===et(t);for(var n=0,a=e.length;n<a;n++)if(et(e[n])===et(t))return!0;return!1}function at(t,e,n){if(e)for(var a=e;a=a.$parent;){var o=a.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(a,t,e,n))return}catch(t){ot(t,a,"errorCaptured hook")}}ot(t,e,n)}function ot(t,e,n){if(ma.errorHandler)try{return ma.errorHandler.call(null,t,e,n)}catch(t){it(t,null,"config.errorHandler")}it(t,e,n)}function it(t,e,n){if(La("Error in "+n+': "'+t.toString()+'"',e),!ba||"undefined"==typeof console)throw t;console.error(t)}function st(){ro=!1;var t=so.slice(0);so.length=0;for(var e=0;e<t.length;e++)t[e]()}function rt(t){return t._withTask||(t._withTask=function(){lo=!0;var e=t.apply(null,arguments);return lo=!1,e})}function lt(t,e){var n;if(so.push(function(){if(t)try{t.call(e)}catch(t){at(t,e,"nextTick")}else n&&n(e)}),ro||(ro=!0,lo?ao():no()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){n=t})}function ct(t){function e(){var t=arguments,n=e.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var a=n.slice(),o=0;o<a.length;o++)a[o].apply(null,t)}return e.fns=t,e}function ut(e,n,a,o,i){var s,r,l,c;for(s in e)r=e[s],l=n[s],c=wo(s),t(r)?La('Invalid handler for event "'+c.name+'": got '+String(r),i):t(l)?(t(r.fns)&&(r=e[s]=ct(r)),a(c.name,r,c.once,c.capture,c.passive)):r!==l&&(l.fns=r,e[s]=l);for(s in n)t(e[s])&&o((c=wo(s)).name,n[s],c.capture)}function dt(a,o,i){function s(){i.apply(this,arguments),f(r.fns,s)}var r,l=a[o];t(l)?r=ct([s]):e(l.fns)&&n(l.merged)?(r=l).fns.push(s):r=ct([l,s]),r.merged=!0,a[o]=r}function pt(n,a,o){var i=a.options.props;if(!t(i)){var s={},r=n.attrs,l=n.props;if(e(r)||e(l))for(var c in i){var u=ua(c),d=c.toLowerCase();c!==d&&r&&v(r,d)&&Ra('Prop "'+d+'" is passed to component '+Da(o||a)+', but the declared prop name is "'+c+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+u+'" instead of "'+c+'".'),ft(s,l,c,u,!0)||ft(s,r,c,u,!1)}return s}}function ft(t,n,a,o,i){if(e(n)){if(v(n,a))return t[a]=n[a],i||delete n[a],!0;if(v(n,o))return t[a]=n[o],i||delete n[o],!0}return!1}function vt(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}function ht(t){return o(t)?[O(t)]:Array.isArray(t)?yt(t):void 0}function mt(t){return e(t)&&e(t.text)&&a(t.isComment)}function yt(a,i){var s,r,l,c,u=[];for(s=0;s<a.length;s++)t(r=a[s])||"boolean"==typeof r||(c=u[l=u.length-1],Array.isArray(r)?r.length>0&&(mt((r=yt(r,(i||"")+"_"+s))[0])&&mt(c)&&(u[l]=O(c.text+r[0].text),r.shift()),u.push.apply(u,r)):o(r)?mt(c)?u[l]=O(c.text+r):""!==r&&u.push(O(r)):mt(r)&&mt(c)?u[l]=O(c.text+r.text):(n(a._isVList)&&e(r.tag)&&t(r.key)&&e(i)&&(r.key="__vlist"+i+"_"+s+"__"),u.push(r)));return u}function _t(t,e){return(t.__esModule||Fa&&"Module"===t[Symbol.toStringTag])&&(t=t.default),i(t)?e.extend(t):t}function gt(t,e,n,a,o){var i=Ka();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:a,tag:o},i}function bt(a,o,s){if(n(a.error)&&e(a.errorComp))return a.errorComp;if(e(a.resolved))return a.resolved;if(n(a.loading)&&e(a.loadingComp))return a.loadingComp;if(!e(a.contexts)){var r=a.contexts=[s],l=!0,c=function(){for(var t=0,e=r.length;t<e;t++)r[t].$forceUpdate()},u=k(function(t){a.resolved=_t(t,o),l||c()}),d=k(function(t){La("Failed to resolve async component: "+String(a)+(t?"\nReason: "+t:"")),e(a.errorComp)&&(a.error=!0,c())}),p=a(u,d);return i(p)&&("function"==typeof p.then?t(a.resolved)&&p.then(u,d):e(p.component)&&"function"==typeof p.component.then&&(p.component.then(u,d),e(p.error)&&(a.errorComp=_t(p.error,o)),e(p.loading)&&(a.loadingComp=_t(p.loading,o),0===p.delay?a.loading=!0:setTimeout(function(){t(a.resolved)&&t(a.error)&&(a.loading=!0,c())},p.delay||200)),e(p.timeout)&&setTimeout(function(){t(a.resolved)&&d("timeout ("+p.timeout+"ms)")},p.timeout))),l=!1,a.loading?a.loadingComp:a.resolved}a.contexts.push(s)}function Ct(t){return t.isComment&&t.asyncFactory}function xt(t){if(Array.isArray(t))for(var n=0;n<t.length;n++){var a=t[n];if(e(a)&&(e(a.componentOptions)||Ct(a)))return a}}function kt(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Et(t,e)}function wt(t,e,n){n?ko.$once(t,e):ko.$on(t,e)}function At(t,e){ko.$off(t,e)}function Et(t,e,n){ko=t,ut(e,n||{},wt,At,t)}function Tt(t,e){var n={};if(!t)return n;for(var a=[],o=0,i=t.length;o<i;o++){var s=t[o],r=s.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,s.context!==e&&s.functionalContext!==e||!r||null==r.slot)a.push(s);else{var l=s.data.slot,c=n[l]||(n[l]=[]);"template"===s.tag?c.push.apply(c,s.children):c.push(s)}}return a.every($t)||(n.default=a),n}function $t(t){return t.isComment||" "===t.text}function St(t,e){e=e||{};for(var n=0;n<t.length;n++)Array.isArray(t[n])?St(t[n],e):e[t[n].key]=t[n].fn;return e}function Ot(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}function Pt(t,e,n){t.$el=e,t.$options.render||(t.$options.render=Ka,t.$options.template&&"#"!==t.$options.template.charAt(0)||t.$options.el||e?La("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",t):La("Failed to mount component: template or render function not defined.",t)),Lt(t,"beforeMount");var a;return a=ma.performance&&bo?function(){var e=t._name,a=t._uid,o="vue-perf-start:"+a,i="vue-perf-end:"+a;bo(o);var s=t._render();bo(i),Co("vue "+e+" render",o,i),bo(o),t._update(s,n),bo(i),Co("vue "+e+" patch",o,i)}:function(){t._update(t._render(),n)},t._watcher=new Lo(t,a,b),n=!1,null==t.$vnode&&(t._isMounted=!0,Lt(t,"mounted")),t}function Mt(t,e,n,a,o){Eo=!0;var i=!!(o||t.$options._renderChildren||a.data.scopedSlots||t.$scopedSlots!==ya);if(t.$options._parentVnode=a,t.$vnode=a,t._vnode&&(t._vnode.parent=a),t.$options._renderChildren=o,t.$attrs=a.data&&a.data.attrs||ya,t.$listeners=n||ya,e&&t.$options.props){Xa.shouldConvert=!1;for(var s=t._props,r=t.$options._propKeys||[],l=0;l<r.length;l++){var c=r[l];s[c]=Z(c,t.$options.props,e,t)}Xa.shouldConvert=!0,t.$options.propsData=e}if(n){var u=t.$options._parentListeners;t.$options._parentListeners=n,Et(t,n,u)}i&&(t.$slots=Tt(o,a.context),t.$forceUpdate()),Eo=!1}function It(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function Nt(t,e){if(e){if(t._directInactive=!1,It(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Nt(t.$children[n]);Lt(t,"activated")}}function Ft(t,e){if(!(e&&(t._directInactive=!0,It(t))||t._inactive)){t._inactive=!0;for(var n=0;n<t.$children.length;n++)Ft(t.$children[n]);Lt(t,"deactivated")}}function Lt(t,e){var n=t.$options[e];if(n)for(var a=0,o=n.length;a<o;a++)try{n[a].call(t)}catch(n){at(n,t,e+" hook")}t._hasHookEvent&&t.$emit("hook:"+e)}function Rt(){No=$o.length=So.length=0,Oo={},Po={},Mo=Io=!1}function jt(){Io=!0;var t,e;for($o.sort(function(t,e){return t.id-e.id}),No=0;No<$o.length;No++)if(t=$o[No],e=t.id,Oo[e]=null,t.run(),null!=Oo[e]&&(Po[e]=(Po[e]||0)+1,Po[e]>To)){La("You may have an infinite update loop "+(t.user?'in watcher with expression "'+t.expression+'"':"in a component render function."),t.vm);break}var n=So.slice(),a=$o.slice();Rt(),Ht(n),Dt(a),Na&&ma.devtools&&Na.emit("flush")}function Dt(t){for(var e=t.length;e--;){var n=t[e],a=n.vm;a._watcher===n&&a._isMounted&&Lt(a,"updated")}}function Bt(t){t._inactive=!1,So.push(t)}function Ht(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Nt(t[e],!0)}function Yt(t){var e=t.id;if(null==Oo[e]){if(Oo[e]=!0,Io){for(var n=$o.length-1;n>No&&$o[n].id>t.id;)n--;$o.splice(n+1,0,t)}else $o.push(t);Mo||(Mo=!0,lt(jt))}}function Ut(t){Ro.clear(),Vt(t,Ro)}function Vt(t,e){var n,a,o=Array.isArray(t);if((o||i(t))&&Object.isExtensible(t)){if(t.__ob__){var s=t.__ob__.dep.id;if(e.has(s))return;e.add(s)}if(o)for(n=t.length;n--;)Vt(t[n],e);else for(n=(a=Object.keys(t)).length;n--;)Vt(t[a[n]],e)}}function Wt(t,e,n){jo.get=function(){return this[e][n]},jo.set=function(t){this[e][n]=t},Object.defineProperty(t,n,jo)}function zt(t){t._watchers=[];var e=t.$options;e.props&&Gt(t,e.props),e.methods&&Xt(t,e.methods),e.data?qt(t):F(t._data={},!0),e.computed&&Jt(t,e.computed),e.watch&&e.watch!==$a&&te(t,e.watch)}function Gt(t,e){var n=t.$options.propsData||{},a=t._props={},o=t.$options._propKeys=[],i=!t.$parent;Xa.shouldConvert=i;for(var s in e)!function(i){o.push(i);var s=Z(i,e,n,t),r=ua(i);(oa(r)||ma.isReservedAttr(r))&&La('"'+r+'" is a reserved attribute and cannot be used as component prop.',t),L(a,i,s,function(){t.$parent&&!Eo&&La("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+i+'"',t)}),i in t||Wt(t,"_props",i)}(s);Xa.shouldConvert=!0}function qt(t){var e=t.$options.data;r(e=t._data="function"==typeof e?Kt(e,t):e||{})||(e={},La("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",t));for(var n=Object.keys(e),a=t.$options.props,o=t.$options.methods,i=n.length;i--;){var s=n[i];o&&v(o,s)&&La('Method "'+s+'" has already been defined as a data property.',t),a&&v(a,s)?La('The data property "'+s+'" is already declared as a prop. Use prop default value instead.',t):w(s)||Wt(t,"_data",s)}F(e,!0)}function Kt(t,e){try{return t.call(e,e)}catch(t){return at(t,e,"data()"),{}}}function Jt(t,e){var n=t._computedWatchers=Object.create(null),a=Ia();for(var o in e){var i=e[o],s="function"==typeof i?i:i.get;null==s&&La('Getter is missing for computed property "'+o+'".',t),a||(n[o]=new Lo(t,s||b,b,Do)),o in t?o in t.$data?La('The computed property "'+o+'" is already defined in data.',t):t.$options.props&&o in t.$options.props&&La('The computed property "'+o+'" is already defined as a prop.',t):Zt(t,o,i)}}function Zt(t,e,n){var a=!Ia();"function"==typeof n?(jo.get=a?Qt(e):n,jo.set=b):(jo.get=n.get?a&&!1!==n.cache?Qt(e):n.get:b,jo.set=n.set?n.set:b),jo.set===b&&(jo.set=function(){La('Computed property "'+e+'" was assigned to but it has no setter.',this)}),Object.defineProperty(t,e,jo)}function Qt(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),Wa.target&&e.depend(),e.value}}function Xt(t,e){var n=t.$options.props;for(var a in e)null==e[a]&&La('Method "'+a+'" has an undefined value in the component definition. Did you reference the function correctly?',t),n&&v(n,a)&&La('Method "'+a+'" has already been defined as a prop.',t),a in t&&w(a)&&La('Method "'+a+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),t[a]=null==e[a]?b:m(e[a],t)}function te(t,e){for(var n in e){var a=e[n];if(Array.isArray(a))for(var o=0;o<a.length;o++)ee(t,n,a[o]);else ee(t,n,a)}}function ee(t,e,n,a){return r(n)&&(a=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,a)}function ne(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}function ae(t){var e=oe(t.$options.inject,t);e&&(Xa.shouldConvert=!1,Object.keys(e).forEach(function(n){L(t,n,e[n],function(){La('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',t)})}),Xa.shouldConvert=!0)}function oe(t,e){if(t){for(var n=Object.create(null),a=Fa?Reflect.ownKeys(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}):Object.keys(t),o=0;o<a.length;o++){for(var i=a[o],s=t[i].from,r=e;r;){if(r._provided&&s in r._provided){n[i]=r._provided[s];break}r=r.$parent}if(!r)if("default"in t[i]){var l=t[i].default;n[i]="function"==typeof l?l.call(e):l}else La('Injection "'+i+'" not found',e)}return n}}function ie(t,n){var a,o,s,r,l;if(Array.isArray(t)||"string"==typeof t)for(a=new Array(t.length),o=0,s=t.length;o<s;o++)a[o]=n(t[o],o);else if("number"==typeof t)for(a=new Array(t),o=0;o<t;o++)a[o]=n(o+1,o);else if(i(t))for(r=Object.keys(t),a=new Array(r.length),o=0,s=r.length;o<s;o++)l=r[o],a[o]=n(t[l],l,o);return e(a)&&(a._isVList=!0),a}function se(t,e,n,a){var o=this.$scopedSlots[t];if(o)return n=n||{},a&&(i(a)||La("slot v-bind without argument expects an Object",this),n=_(_({},a),n)),o(n)||e;var s=this.$slots[t];return s&&(s._rendered&&La('Duplicate presence of slot "'+t+'" found in the same render tree - this will likely cause render errors.',this),s._rendered=!0),s||e}function re(t){return J(this.$options,"filters",t,!0)||pa}function le(t,e,n,a){var o=ma.keyCodes[e]||n;return o?Array.isArray(o)?-1===o.indexOf(t):o!==t:a?ua(a)!==e:void 0}function ce(t,e,n,a,o){if(n)if(i(n)){Array.isArray(n)&&(n=g(n));var s,r=function(i){if("class"===i||"style"===i||oa(i))s=t;else{var r=t.attrs&&t.attrs.type;s=a||ma.mustUseProp(e,r,i)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}i in s||(s[i]=n[i],o&&((t.on||(t.on={}))["update:"+i]=function(t){n[i]=t}))};for(var l in n)r(l)}else La("v-bind without argument expects an Object or Array value",this);return t}function ue(t,e){var n=this.$options.staticRenderFns,a=n.cached||(n.cached=[]),o=a[t];return o&&!e?Array.isArray(o)?M(o):P(o):(o=a[t]=n[t].call(this._renderProxy,null,this),pe(o,"__static__"+t,!1),o)}function de(t,e,n){return pe(t,"__once__"+e+(n?"_"+n:""),!0),t}function pe(t,e,n){if(Array.isArray(t))for(var a=0;a<t.length;a++)t[a]&&"string"!=typeof t[a]&&fe(t[a],e+"_"+a,n);else fe(t,e,n)}function fe(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function ve(t,e){if(e)if(r(e)){var n=t.on=t.on?_({},t.on):{};for(var a in e){var o=n[a],i=e[a];n[a]=o?[].concat(o,i):i}}else La("v-on without argument expects an Object value",this);return t}function he(t){t._o=de,t._n=d,t._s=u,t._l=ie,t._t=se,t._q=C,t._i=x,t._m=ue,t._f=re,t._k=le,t._b=ce,t._v=O,t._e=Ka,t._u=St,t._g=ve}function me(t,e,a,o,i){var s=i.options;this.data=t,this.props=e,this.children=a,this.parent=o,this.listeners=t.on||ya,this.injections=oe(s.inject,o),this.slots=function(){return Tt(a,o)};var r=Object.create(o),l=n(s._compiled),c=!l;l&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=t.scopedSlots||ya),s._scopeId?this._c=function(t,e,n,a){var i=we(r,t,e,n,a,c);return i&&(i.functionalScopeId=s._scopeId,i.functionalContext=o),i}:this._c=function(t,e,n,a){return we(r,t,e,n,a,c)}}function ye(t,n,a,o,i){var s=t.options,r={},l=s.props;if(e(l))for(var c in l)r[c]=Z(c,l,n||ya);else e(a.attrs)&&_e(r,a.attrs),e(a.props)&&_e(r,a.props);var u=new me(a,r,i,o,t),d=s.render.call(null,u._c,u);return d instanceof Ga&&(d.functionalContext=o,d.functionalOptions=s,a.slot&&((d.data||(d.data={})).slot=a.slot)),d}function _e(t,e){for(var n in e)t[ra(n)]=e[n]}function ge(a,o,s,r,l){if(!t(a)){var c=s.$options._base;if(i(a)&&(a=c.extend(a)),"function"==typeof a){var u;if(t(a.cid)&&(u=a,void 0===(a=bt(u,c,s))))return gt(u,o,s,r,l);o=o||{},Se(a),e(o.model)&&ke(a.options,o);var d=pt(o,a,l);if(n(a.options.functional))return ye(a,d,o,s,r);var p=o.on;if(o.on=o.nativeOn,n(a.options.abstract)){var f=o.slot;o={},f&&(o.slot=f)}Ce(o);var v=a.options.name||l;return new Ga("vue-component-"+a.cid+(v?"-"+v:""),o,void 0,void 0,void 0,s,{Ctor:a,propsData:d,listeners:p,tag:l,children:r},u)}La("Invalid Component definition: "+String(a),s)}}function be(t,n,a,o){var i=t.componentOptions,s={_isComponent:!0,parent:n,propsData:i.propsData,_componentTag:i.tag,_parentVnode:t,_parentListeners:i.listeners,_renderChildren:i.children,_parentElm:a||null,_refElm:o||null},r=t.data.inlineTemplate;return e(r)&&(s.render=r.render,s.staticRenderFns=r.staticRenderFns),new i.Ctor(s)}function Ce(t){t.hook||(t.hook={});for(var e=0;e<Ho.length;e++){var n=Ho[e],a=t.hook[n],o=Bo[n];t.hook[n]=a?xe(o,a):o}}function xe(t,e){return function(n,a,o,i){t(n,a,o,i),e(n,a,o,i)}}function ke(t,n){var a=t.model&&t.model.prop||"value",o=t.model&&t.model.event||"input";(n.props||(n.props={}))[a]=n.model.value;var i=n.on||(n.on={});e(i[o])?i[o]=[n.model.callback].concat(i[o]):i[o]=n.model.callback}function we(t,e,a,i,s,r){return(Array.isArray(a)||o(a))&&(s=i,i=a,a=void 0),n(r)&&(s=Uo),Ae(t,e,a,i,s)}function Ae(t,n,a,i,s){if(e(a)&&e(a.__ob__))return La("Avoid using observed data object as vnode data: "+JSON.stringify(a)+"\nAlways create fresh vnode data objects in each render!",t),Ka();if(e(a)&&e(a.is)&&(n=a.is),!n)return Ka();e(a)&&e(a.key)&&!o(a.key)&&La("Avoid using non-primitive value as key, use string/number value instead.",t),Array.isArray(i)&&"function"==typeof i[0]&&((a=a||{}).scopedSlots={default:i[0]},i.length=0),s===Uo?i=ht(i):s===Yo&&(i=vt(i));var r,l;if("string"==typeof n){var c;l=t.$vnode&&t.$vnode.ns||ma.getTagNamespace(n),r=ma.isReservedTag(n)?new Ga(ma.parsePlatformTagName(n),a,i,void 0,void 0,t):e(c=J(t.$options,"components",n))?ge(c,a,t,i,n):new Ga(n,a,i,void 0,void 0,t)}else r=ge(n,a,t,i);return e(r)?(l&&Ee(r,l),r):Ka()}function Ee(a,o,i){if(a.ns=o,"foreignObject"===a.tag&&(o=void 0,i=!0),e(a.children))for(var s=0,r=a.children.length;s<r;s++){var l=a.children[s];e(l.tag)&&(t(l.ns)||n(i))&&Ee(l,o,i)}}function Te(t){t._vnode=null;var e=t.$options,n=t.$vnode=e._parentVnode,a=n&&n.context;t.$slots=Tt(e._renderChildren,a),t.$scopedSlots=ya,t._c=function(e,n,a,o){return we(t,e,n,a,o,!1)},t.$createElement=function(e,n,a,o){return we(t,e,n,a,o,!0)};var o=n&&n.data;L(t,"$attrs",o&&o.attrs||ya,function(){!Eo&&La("$attrs is readonly.",t)},!0),L(t,"$listeners",e._parentListeners||ya,function(){!Eo&&La("$listeners is readonly.",t)},!0)}function $e(t,e){var n=t.$options=Object.create(t.constructor.options);n.parent=e.parent,n.propsData=e.propsData,n._parentVnode=e._parentVnode,n._parentListeners=e._parentListeners,n._renderChildren=e._renderChildren,n._componentTag=e._componentTag,n._parentElm=e._parentElm,n._refElm=e._refElm,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}function Se(t){var e=t.options;if(t.super){var n=Se(t.super);if(n!==t.superOptions){t.superOptions=n;var a=Oe(t);a&&_(t.extendOptions,a),(e=t.options=K(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function Oe(t){var e,n=t.options,a=t.extendOptions,o=t.sealedOptions;for(var i in n)n[i]!==o[i]&&(e||(e={}),e[i]=Pe(n[i],a[i],o[i]));return e}function Pe(t,e,n){if(Array.isArray(t)){var a=[];n=Array.isArray(n)?n:[n],e=Array.isArray(e)?e:[e];for(var o=0;o<t.length;o++)(e.indexOf(t[o])>=0||n.indexOf(t[o])<0)&&a.push(t[o]);return a}return t}function Me(t){this instanceof Me||La("Vue is a constructor and should be called with the `new` keyword"),this._init(t)}function Ie(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=y(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}function Ne(t){t.mixin=function(t){return this.options=K(this.options,t),this}}function Fe(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,a=n.cid,o=t._Ctor||(t._Ctor={});if(o[a])return o[a];var i=t.name||n.options.name;/^[a-zA-Z][\w-]*$/.test(i)||La('Invalid component name: "'+i+'". Component names can only contain alphanumeric characters and the hyphen, and must start with a letter.');var s=function(t){this._init(t)};return s.prototype=Object.create(n.prototype),s.prototype.constructor=s,s.cid=e++,s.options=K(n.options,t),s.super=n,s.options.props&&Le(s),s.options.computed&&Re(s),s.extend=n.extend,s.mixin=n.mixin,s.use=n.use,va.forEach(function(t){s[t]=n[t]}),i&&(s.options.components[i]=s),s.superOptions=n.options,s.extendOptions=t,s.sealedOptions=_({},s.options),o[a]=s,s}}function Le(t){var e=t.options.props;for(var n in e)Wt(t.prototype,"_props",n)}function Re(t){var e=t.options.computed;for(var n in e)Zt(t.prototype,n,e[n])}function je(t){va.forEach(function(e){t[e]=function(t,n){return n?("component"===e&&ma.isReservedTag(t)&&La("Do not use built-in or reserved HTML elements as component id: "+t),"component"===e&&r(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}})}function De(t){return t&&(t.Ctor.options.name||t.tag)}function Be(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!l(t)&&t.test(e)}function He(t,e){var n=t.cache,a=t.keys,o=t._vnode;for(var i in n){var s=n[i];if(s){var r=De(s.componentOptions);r&&!e(r)&&Ye(n,i,a,o)}}}function Ye(t,e,n,a){var o=t[e];o&&o!==a&&o.componentInstance.$destroy(),t[e]=null,f(n,e)}function Ue(t){for(var n=t.data,a=t,o=t;e(o.componentInstance);)(o=o.componentInstance._vnode).data&&(n=Ve(o.data,n));for(;e(a=a.parent);)a.data&&(n=Ve(n,a.data));return We(n.staticClass,n.class)}function Ve(t,n){return{staticClass:ze(t.staticClass,n.staticClass),class:e(t.class)?[t.class,n.class]:n.class}}function We(t,n){return e(t)||e(n)?ze(t,Ge(n)):""}function ze(t,e){return t?e?t+" "+e:t:e||""}function Ge(t){return Array.isArray(t)?qe(t):i(t)?Ke(t):"string"==typeof t?t:""}function qe(t){for(var n,a="",o=0,i=t.length;o<i;o++)e(n=Ge(t[o]))&&""!==n&&(a&&(a+=" "),a+=n);return a}function Ke(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}function Je(t){if("string"==typeof t){var e=document.querySelector(t);return e||(La("Cannot find element: "+t),document.createElement("div"))}return t}function Ze(t,e){var n=t.data.ref;if(n){var a=t.context,o=t.componentInstance||t.elm,i=a.$refs;e?Array.isArray(i[n])?f(i[n],o):i[n]===o&&(i[n]=void 0):t.data.refInFor?Array.isArray(i[n])?i[n].indexOf(o)<0&&i[n].push(o):i[n]=[o]:i[n]=o}}function Qe(a,o){return a.key===o.key&&(a.tag===o.tag&&a.isComment===o.isComment&&e(a.data)===e(o.data)&&Xe(a,o)||n(a.isAsyncPlaceholder)&&a.asyncFactory===o.asyncFactory&&t(o.asyncFactory.error))}function Xe(t,n){if("input"!==t.tag)return!0;var a,o=e(a=t.data)&&e(a=a.attrs)&&a.type,i=e(a=n.data)&&e(a=a.attrs)&&a.type;return o===i||li(o)&&li(i)}function tn(t,n,a){var o,i,s={};for(o=n;o<=a;++o)e(i=t[o].key)&&(s[i]=o);return s}function en(t,e){(t.data.directives||e.data.directives)&&nn(t,e)}function nn(t,e){var n,a,o,i=t===di,s=e===di,r=an(t.data.directives,t.context),l=an(e.data.directives,e.context),c=[],u=[];for(n in l)a=r[n],o=l[n],a?(o.oldValue=a.value,sn(o,"update",e,t),o.def&&o.def.componentUpdated&&u.push(o)):(sn(o,"bind",e,t),o.def&&o.def.inserted&&c.push(o));if(c.length){var d=function(){for(var n=0;n<c.length;n++)sn(c[n],"inserted",e,t)};i?dt(e.data.hook||(e.data.hook={}),"insert",d):d()}if(u.length&&dt(e.data.hook||(e.data.hook={}),"postpatch",function(){for(var n=0;n<u.length;n++)sn(u[n],"componentUpdated",e,t)}),!i)for(n in r)l[n]||sn(r[n],"unbind",t,t,s)}function an(t,e){var n=Object.create(null);if(!t)return n;var a,o;for(a=0;a<t.length;a++)(o=t[a]).modifiers||(o.modifiers=vi),n[on(o)]=o,o.def=J(e.$options,"directives",o.name,!0);return n}function on(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function sn(t,e,n,a,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,a,o)}catch(a){at(a,n.context,"directive "+t.name+" "+e+" hook")}}function rn(n,a){var o=a.componentOptions;if(!(e(o)&&!1===o.Ctor.options.inheritAttrs||t(n.data.attrs)&&t(a.data.attrs))){var i,s,r=a.elm,l=n.data.attrs||{},c=a.data.attrs||{};e(c.__ob__)&&(c=a.data.attrs=_({},c));for(i in c)s=c[i],l[i]!==s&&ln(r,i,s);(ka||wa)&&c.value!==l.value&&ln(r,"value",c.value);for(i in l)t(c[i])&&(ti(i)?r.removeAttributeNS(Xo,ei(i)):Zo(i)||r.removeAttribute(i))}}function ln(t,e,n){Qo(e)?ni(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Zo(e)?t.setAttribute(e,ni(n)||"false"===n?"false":"true"):ti(e)?ni(n)?t.removeAttributeNS(Xo,ei(e)):t.setAttributeNS(Xo,e,n):ni(n)?t.removeAttribute(e):t.setAttribute(e,n)}function cn(n,a){var o=a.elm,i=a.data,s=n.data;if(!(t(i.staticClass)&&t(i.class)&&(t(s)||t(s.staticClass)&&t(s.class)))){var r=Ue(a),l=o._transitionClasses;e(l)&&(r=ze(r,Ge(l))),r!==o._prevClass&&(o.setAttribute("class",r),o._prevClass=r)}}function un(t){if(e(t[_i])){var n=xa?"change":"input";t[n]=[].concat(t[_i],t[n]||[]),delete t[_i]}e(t[gi])&&(t.change=[].concat(t[gi],t.change||[]),delete t[gi])}function dn(t,e,n){var a=Go;return function o(){null!==t.apply(null,arguments)&&fn(e,o,n,a)}}function pn(t,e,n,a,o){e=rt(e),n&&(e=dn(e,t,a)),Go.addEventListener(t,e,Sa?{capture:a,passive:o}:a)}function fn(t,e,n,a){(a||Go).removeEventListener(t,e._withTask||e,n)}function vn(e,n){if(!t(e.data.on)||!t(n.data.on)){var a=n.data.on||{},o=e.data.on||{};Go=n.elm,un(a),ut(a,o,pn,fn,n.context)}}function hn(n,a){if(!t(n.data.domProps)||!t(a.data.domProps)){var o,i,s=a.elm,r=n.data.domProps||{},l=a.data.domProps||{};e(l.__ob__)&&(l=a.data.domProps=_({},l));for(o in r)t(l[o])&&(s[o]="");for(o in l){if(i=l[o],"textContent"===o||"innerHTML"===o){if(a.children&&(a.children.length=0),i===r[o])continue;1===s.childNodes.length&&s.removeChild(s.childNodes[0])}if("value"===o){s._value=i;var c=t(i)?"":String(i);mn(s,c)&&(s.value=c)}else s[o]=i}}}function mn(t,e){return!t.composing&&("OPTION"===t.tagName||yn(t,e)||_n(t,e))}function yn(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}function _n(t,n){var a=t.value,o=t._vModifiers;return e(o)&&o.number?d(a)!==d(n):e(o)&&o.trim?a.trim()!==n.trim():a!==n}function gn(t){var e=bn(t.style);return t.staticStyle?_(t.staticStyle,e):e}function bn(t){return Array.isArray(t)?g(t):"string"==typeof t?xi(t):t}function Cn(t,e){var n,a={};if(e)for(var o=t;o.componentInstance;)(o=o.componentInstance._vnode).data&&(n=gn(o.data))&&_(a,n);(n=gn(t.data))&&_(a,n);for(var i=t;i=i.parent;)i.data&&(n=gn(i.data))&&_(a,n);return a}function xn(n,a){var o=a.data,i=n.data;if(!(t(o.staticStyle)&&t(o.style)&&t(i.staticStyle)&&t(i.style))){var s,r,l=a.elm,c=i.staticStyle,u=i.normalizedStyle||i.style||{},d=c||u,p=bn(a.data.style)||{};a.data.normalizedStyle=e(p.__ob__)?_({},p):p;var f=Cn(a,!0);for(r in d)t(f[r])&&Ai(l,r,"");for(r in f)(s=f[r])!==d[r]&&Ai(l,r,null==s?"":s)}}function kn(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function wn(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",a=" "+e+" ";n.indexOf(a)>=0;)n=n.replace(a," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function An(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&_(e,Si(t.name||"v")),_(e,t),e}return"string"==typeof t?Si(t):void 0}}function En(t){Ri(function(){Ri(t)})}function Tn(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),kn(t,e))}function $n(t,e){t._transitionClasses&&f(t._transitionClasses,e),wn(t,e)}function Sn(t,e,n){var a=On(t,e),o=a.type,i=a.timeout,s=a.propCount;if(!o)return n();var r=o===Pi?Ni:Li,l=0,c=function(){t.removeEventListener(r,u),n()},u=function(e){e.target===t&&++l>=s&&c()};setTimeout(function(){l<s&&c()},i+1),t.addEventListener(r,u)}function On(t,e){var n,a=window.getComputedStyle(t),o=a[Ii+"Delay"].split(", "),i=a[Ii+"Duration"].split(", "),s=Pn(o,i),r=a[Fi+"Delay"].split(", "),l=a[Fi+"Duration"].split(", "),c=Pn(r,l),u=0,d=0;return e===Pi?s>0&&(n=Pi,u=s,d=i.length):e===Mi?c>0&&(n=Mi,u=c,d=l.length):d=(n=(u=Math.max(s,c))>0?s>c?Pi:Mi:null)?n===Pi?i.length:l.length:0,{type:n,timeout:u,propCount:d,hasTransform:n===Pi&&ji.test(a[Ii+"Property"])}}function Pn(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return Mn(e)+Mn(t[n])}))}function Mn(t){return 1e3*Number(t.slice(0,-1))}function In(n,a){var o=n.elm;e(o._leaveCb)&&(o._leaveCb.cancelled=!0,o._leaveCb());var s=An(n.data.transition);if(!t(s)&&!e(o._enterCb)&&1===o.nodeType){for(var r=s.css,l=s.type,c=s.enterClass,u=s.enterToClass,p=s.enterActiveClass,f=s.appearClass,v=s.appearToClass,h=s.appearActiveClass,m=s.beforeEnter,y=s.enter,_=s.afterEnter,g=s.enterCancelled,b=s.beforeAppear,C=s.appear,x=s.afterAppear,w=s.appearCancelled,A=s.duration,E=Ao,T=Ao.$vnode;T&&T.parent;)E=(T=T.parent).context;var $=!E._isMounted||!n.isRootInsert;if(!$||C||""===C){var S=$&&f?f:c,O=$&&h?h:p,P=$&&v?v:u,M=$?b||m:m,I=$&&"function"==typeof C?C:y,N=$?x||_:_,F=$?w||g:g,L=d(i(A)?A.enter:A);null!=L&&Fn(L,"enter",n);var R=!1!==r&&!ka,j=Rn(I),D=o._enterCb=k(function(){R&&($n(o,P),$n(o,O)),D.cancelled?(R&&$n(o,S),F&&F(o)):N&&N(o),o._enterCb=null});n.data.show||dt(n.data.hook||(n.data.hook={}),"insert",function(){var t=o.parentNode,e=t&&t._pending&&t._pending[n.key];e&&e.tag===n.tag&&e.elm._leaveCb&&e.elm._leaveCb(),I&&I(o,D)}),M&&M(o),R&&(Tn(o,S),Tn(o,O),En(function(){Tn(o,P),$n(o,S),D.cancelled||j||(Ln(L)?setTimeout(D,L):Sn(o,l,D))})),n.data.show&&(a&&a(),I&&I(o,D)),R||j||D()}}}function Nn(n,a){function o(){w.cancelled||(n.data.show||((s.parentNode._pending||(s.parentNode._pending={}))[n.key]=n),v&&v(s),b&&(Tn(s,u),Tn(s,f),En(function(){Tn(s,p),$n(s,u),w.cancelled||C||(Ln(x)?setTimeout(w,x):Sn(s,c,w))})),h&&h(s,w),b||C||w())}var s=n.elm;e(s._enterCb)&&(s._enterCb.cancelled=!0,s._enterCb());var r=An(n.data.transition);if(t(r))return a();if(!e(s._leaveCb)&&1===s.nodeType){var l=r.css,c=r.type,u=r.leaveClass,p=r.leaveToClass,f=r.leaveActiveClass,v=r.beforeLeave,h=r.leave,m=r.afterLeave,y=r.leaveCancelled,_=r.delayLeave,g=r.duration,b=!1!==l&&!ka,C=Rn(h),x=d(i(g)?g.leave:g);e(x)&&Fn(x,"leave",n);var w=s._leaveCb=k(function(){s.parentNode&&s.parentNode._pending&&(s.parentNode._pending[n.key]=null),b&&($n(s,p),$n(s,f)),w.cancelled?(b&&$n(s,u),y&&y(s)):(a(),m&&m(s)),s._leaveCb=null});_?_(o):o()}}function Fn(t,e,n){"number"!=typeof t?La("<transition> explicit "+e+" duration is not a valid number - got "+JSON.stringify(t)+".",n.context):isNaN(t)&&La("<transition> explicit "+e+" duration is NaN - the duration expression might be incorrect.",n.context)}function Ln(t){return"number"==typeof t&&!isNaN(t)}function Rn(n){if(t(n))return!1;var a=n.fns;return e(a)?Rn(Array.isArray(a)?a[0]:a):(n._length||n.length)>1}function jn(t,e){!0!==e.data.show&&In(e)}function Dn(t,e,n){Bn(t,e,n),(xa||wa)&&setTimeout(function(){Bn(t,e,n)},0)}function Bn(t,e,n){var a=e.value,o=t.multiple;if(!o||Array.isArray(a)){for(var i,s,r=0,l=t.options.length;r<l;r++)if(s=t.options[r],o)i=x(a,Yn(s))>-1,s.selected!==i&&(s.selected=i);else if(C(Yn(s),a))return void(t.selectedIndex!==r&&(t.selectedIndex=r));o||(t.selectedIndex=-1)}else La('<select multiple v-model="'+e.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(a).slice(8,-1),n)}function Hn(t,e){return e.every(function(e){return!C(e,t)})}function Yn(t){return"_value"in t?t._value:t.value}function Un(t){t.target.composing=!0}function Vn(t){t.target.composing&&(t.target.composing=!1,Wn(t.target,"input"))}function Wn(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function zn(t){return!t.componentInstance||t.data&&t.data.transition?t:zn(t.componentInstance._vnode)}function Gn(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?Gn(xt(e.children)):t}function qn(t){var e={},n=t.$options;for(var a in n.propsData)e[a]=t[a];var o=n._parentListeners;for(var i in o)e[ra(i)]=o[i];return e}function Kn(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}function Jn(t){for(;t=t.parent;)if(t.data.transition)return!0}function Zn(t,e){return e.key===t.key&&e.tag===t.tag}function Qn(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function Xn(t){t.data.newPos=t.elm.getBoundingClientRect()}function ta(t){var e=t.data.pos,n=t.data.newPos,a=e.left-n.left,o=e.top-n.top;if(a||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+a+"px,"+o+"px)",i.transitionDuration="0s"}}function ea(t,e){return e={exports:{}},t(e,e.exports),e.exports}var na=Object.prototype.toString,aa=p("slot,component",!0),oa=p("key,ref,slot,slot-scope,is"),ia=Object.prototype.hasOwnProperty,sa=/-(\w)/g,ra=h(function(t){return t.replace(sa,function(t,e){return e?e.toUpperCase():""})}),la=h(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),ca=/\B([A-Z])/g,ua=h(function(t){return t.replace(ca,"-$1").toLowerCase()}),da=function(t,e,n){return!1},pa=function(t){return t},fa="data-server-rendered",va=["component","directive","filter"],ha=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],ma={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:da,isReservedAttr:da,isUnknownElement:da,getTagNamespace:b,parsePlatformTagName:pa,mustUseProp:da,_lifecycleHooks:ha},ya=Object.freeze({}),_a=/[^\w.$]/,ga="__proto__"in{},ba="undefined"!=typeof window,Ca=ba&&window.navigator.userAgent.toLowerCase(),xa=Ca&&/msie|trident/.test(Ca),ka=Ca&&Ca.indexOf("msie 9.0")>0,wa=Ca&&Ca.indexOf("edge/")>0,Aa=Ca&&Ca.indexOf("android")>0,Ea=Ca&&/iphone|ipad|ipod|ios/.test(Ca),Ta=Ca&&/chrome\/\d+/.test(Ca)&&!wa,$a={}.watch,Sa=!1;if(ba)try{var Oa={};Object.defineProperty(Oa,"passive",{get:function(){Sa=!0}}),window.addEventListener("test-passive",null,Oa)}catch(t){}var Pa,Ma,Ia=function(){return void 0===Pa&&(Pa=!ba&&"undefined"!=typeof global&&"server"===global.process.env.VUE_ENV),Pa},Na=ba&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,Fa="undefined"!=typeof Symbol&&T(Symbol)&&"undefined"!=typeof Reflect&&T(Reflect.ownKeys);Ma="undefined"!=typeof Set&&T(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var La=b,Ra=b,ja=b,Da=b,Ba="undefined"!=typeof console,Ha=/(?:^|[-_])(\w)/g,Ya=function(t){return t.replace(Ha,function(t){return t.toUpperCase()}).replace(/[-_]/g,"")};La=function(t,e){var n=e?ja(e):"";ma.warnHandler?ma.warnHandler.call(null,t,e,n):Ba&&!ma.silent&&console.error("[Vue warn]: "+t+n)},Ra=function(t,e){Ba&&!ma.silent&&console.warn("[Vue tip]: "+t+(e?ja(e):""))},Da=function(t,e){if(t.$root===t)return"<Root>";var n="function"==typeof t&&null!=t.cid?t.options:t._isVue?t.$options||t.constructor.options:t||{},a=n.name||n._componentTag,o=n.__file;if(!a&&o){var i=o.match(/([^/\\]+)\.vue$/);a=i&&i[1]}return(a?"<"+Ya(a)+">":"<Anonymous>")+(o&&!1!==e?" at "+o:"")};var Ua=function(t,e){for(var n="";e;)e%2==1&&(n+=t),e>1&&(t+=t),e>>=1;return n};ja=function(t){if(t._isVue&&t.$parent){for(var e=[],n=0;t;){if(e.length>0){var a=e[e.length-1];if(a.constructor===t.constructor){n++,t=t.$parent;continue}n>0&&(e[e.length-1]=[a,n],n=0)}e.push(t),t=t.$parent}return"\n\nfound in\n\n"+e.map(function(t,e){return""+(0===e?"---\x3e ":Ua(" ",5+2*e))+(Array.isArray(t)?Da(t[0])+"... ("+t[1]+" recursive calls)":Da(t))}).join("\n")}return"\n\n(found in "+Da(t)+")"};var Va=0,Wa=function(){this.id=Va++,this.subs=[]};Wa.prototype.addSub=function(t){this.subs.push(t)},Wa.prototype.removeSub=function(t){f(this.subs,t)},Wa.prototype.depend=function(){Wa.target&&Wa.target.addDep(this)},Wa.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},Wa.target=null;var za=[],Ga=function(t,e,n,a,o,i,s,r){this.tag=t,this.data=e,this.children=n,this.text=a,this.elm=o,this.ns=void 0,this.context=i,this.functionalContext=void 0,this.functionalOptions=void 0,this.functionalScopeId=void 0,this.key=e&&e.key,this.componentOptions=s,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=r,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},qa={child:{configurable:!0}};qa.child.get=function(){return this.componentInstance},Object.defineProperties(Ga.prototype,qa);var Ka=function(t){void 0===t&&(t="");var e=new Ga;return e.text=t,e.isComment=!0,e},Ja=Array.prototype,Za=Object.create(Ja);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=Ja[t];A(Za,t,function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];var o,i=e.apply(this,n),s=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&s.observeArray(o),s.dep.notify(),i})});var Qa=Object.getOwnPropertyNames(Za),Xa={shouldConvert:!0},to=function(t){this.value=t,this.dep=new Wa,this.vmCount=0,A(t,"__ob__",this),Array.isArray(t)?((ga?I:N)(t,Za,Qa),this.observeArray(t)):this.walk(t)};to.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)L(t,e[n],t[e[n]])},to.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)F(t[e])};var eo=ma.optionMergeStrategies;eo.el=eo.propsData=function(t,e,n,a){return n||La('option "'+a+'" can only be used during instance creation with the `new` keyword.'),oo(t,e)},eo.data=function(t,e,n){return n?H(t,e,n):e&&"function"!=typeof e?(La('The "data" option should be a function that returns a per-instance value in component definitions.',n),t):H.call(this,t,e)},ha.forEach(function(t){eo[t]=Y}),va.forEach(function(t){eo[t+"s"]=U}),eo.watch=function(t,e,n,a){if(t===$a&&(t=void 0),e===$a&&(e=void 0),!e)return Object.create(t||null);if(q(a,e,n),!t)return e;var o={};_(o,t);for(var i in e){var s=o[i],r=e[i];s&&!Array.isArray(s)&&(s=[s]),o[i]=s?s.concat(r):Array.isArray(r)?r:[r]}return o},eo.props=eo.methods=eo.inject=eo.computed=function(t,e,n,a){if(e&&q(a,e,n),!t)return e;var o=Object.create(null);return _(o,t),e&&_(o,e),o},eo.provide=H;var no,ao,oo=function(t,e){return void 0===e?t:e},io=/^(String|Number|Boolean|Function|Symbol)$/,so=[],ro=!1,lo=!1;if("undefined"!=typeof setImmediate&&T(setImmediate))ao=function(){setImmediate(st)};else if("undefined"==typeof MessageChannel||!T(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())ao=function(){setTimeout(st,0)};else{var co=new MessageChannel,uo=co.port2;co.port1.onmessage=st,ao=function(){uo.postMessage(1)}}if("undefined"!=typeof Promise&&T(Promise)){var po=Promise.resolve();no=function(){po.then(st),Ea&&setTimeout(b)}}else no=ao;var fo,vo=p("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),ho=function(t,e){La('Property or method "'+e+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',t)},mo="undefined"!=typeof Proxy&&Proxy.toString().match(/native code/);if(mo){var yo=p("stop,prevent,self,ctrl,shift,alt,meta,exact");ma.keyCodes=new Proxy(ma.keyCodes,{set:function(t,e,n){return yo(e)?(La("Avoid overwriting built-in modifier in config.keyCodes: ."+e),!1):(t[e]=n,!0)}})}var _o={has:function(t,e){var n=e in t,a=vo(e)||"_"===e.charAt(0);return n||a||ho(t,e),n||!a}},go={get:function(t,e){return"string"!=typeof e||e in t||ho(t,e),t[e]}};fo=function(t){if(mo){var e=t.$options,n=e.render&&e.render._withStripped?go:_o;t._renderProxy=new Proxy(t,n)}else t._renderProxy=t};var bo,Co,xo=ba&&window.performance;xo&&xo.mark&&xo.measure&&xo.clearMarks&&xo.clearMeasures&&(bo=function(t){return xo.mark(t)},Co=function(t,e,n){xo.measure(t,e,n),xo.clearMarks(e),xo.clearMarks(n),xo.clearMeasures(t)});var ko,wo=h(function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),a="!"===(t=n?t.slice(1):t).charAt(0);return t=a?t.slice(1):t,{name:t,once:n,capture:a,passive:e}}),Ao=null,Eo=!1,To=100,$o=[],So=[],Oo={},Po={},Mo=!1,Io=!1,No=0,Fo=0,Lo=function(t,e,n,a){this.vm=t,t._watchers.push(this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Fo,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new Ma,this.newDepIds=new Ma,this.expression=e.toString(),"function"==typeof e?this.getter=e:(this.getter=E(e),this.getter||(this.getter=function(){},La('Failed watching path: "'+e+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',t))),this.value=this.lazy?void 0:this.get()};Lo.prototype.get=function(){$(this);var t,e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;at(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Ut(t),S(),this.cleanupDeps()}return t},Lo.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},Lo.prototype.cleanupDeps=function(){for(var t=this,e=this.deps.length;e--;){var n=t.deps[e];t.newDepIds.has(n.id)||n.removeSub(t)}var a=this.depIds;this.depIds=this.newDepIds,this.newDepIds=a,this.newDepIds.clear(),a=this.deps,this.deps=this.newDeps,this.newDeps=a,this.newDeps.length=0},Lo.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():Yt(this)},Lo.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||i(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){at(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},Lo.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Lo.prototype.depend=function(){for(var t=this,e=this.deps.length;e--;)t.deps[e].depend()},Lo.prototype.teardown=function(){var t=this;if(this.active){this.vm._isBeingDestroyed||f(this.vm._watchers,this);for(var e=this.deps.length;e--;)t.deps[e].removeSub(t);this.active=!1}};var Ro=new Ma,jo={enumerable:!0,configurable:!0,get:b,set:b},Do={lazy:!0};he(me.prototype);var Bo={init:function(t,e,n,a){if(!t.componentInstance||t.componentInstance._isDestroyed)(t.componentInstance=be(t,Ao,n,a)).$mount(e?t.elm:void 0,e);else if(t.data.keepAlive){var o=t;Bo.prepatch(o,o)}},prepatch:function(t,e){var n=e.componentOptions;Mt(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(n._isMounted=!0,Lt(n,"mounted")),t.data.keepAlive&&(e._isMounted?Bt(n):Nt(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?Ft(e,!0):e.$destroy())}},Ho=Object.keys(Bo),Yo=1,Uo=2,Vo=0;!function(t){t.prototype._init=function(t){var e=this;e._uid=Vo++;var n,a;ma.performance&&bo&&(n="vue-perf-start:"+e._uid,a="vue-perf-end:"+e._uid,bo(n)),e._isVue=!0,t&&t._isComponent?$e(e,t):e.$options=K(Se(e.constructor),t||{},e),fo(e),e._self=e,Ot(e),kt(e),Te(e),Lt(e,"beforeCreate"),ae(e),zt(e),ne(e),Lt(e,"created"),ma.performance&&bo&&(e._name=Da(e,!1),bo(a),Co("vue "+e._name+" init",n,a)),e.$options.el&&e.$mount(e.$options.el)}}(Me),function(t){var e={};e.get=function(){return this._data};var n={};n.get=function(){return this._props},e.set=function(t){La("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){La("$props is readonly.",this)},Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=R,t.prototype.$delete=j,t.prototype.$watch=function(t,e,n){var a=this;if(r(e))return ee(a,t,e,n);(n=n||{}).user=!0;var o=new Lo(a,t,e,n);return n.immediate&&e.call(a,o.value),function(){o.teardown()}}}(Me),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var a=this,o=this;if(Array.isArray(t))for(var i=0,s=t.length;i<s;i++)a.$on(t[i],n);else(o._events[t]||(o._events[t]=[])).push(n),e.test(t)&&(o._hasHookEvent=!0);return o},t.prototype.$once=function(t,e){function n(){a.$off(t,n),e.apply(a,arguments)}var a=this;return n.fn=e,a.$on(t,n),a},t.prototype.$off=function(t,e){var n=this,a=this;if(!arguments.length)return a._events=Object.create(null),a;if(Array.isArray(t)){for(var o=0,i=t.length;o<i;o++)n.$off(t[o],e);return a}var s=a._events[t];if(!s)return a;if(1===arguments.length)return a._events[t]=null,a;if(e)for(var r,l=s.length;l--;)if((r=s[l])===e||r.fn===e){s.splice(l,1);break}return a},t.prototype.$emit=function(t){var e=this,n=t.toLowerCase();n!==t&&e._events[n]&&Ra('Event "'+n+'" is emitted in component '+Da(e)+' but the handler is registered for "'+t+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+ua(t)+'" instead of "'+t+'".');var a=e._events[t];if(a){a=a.length>1?y(a):a;for(var o=y(arguments,1),i=0,s=a.length;i<s;i++)try{a[i].apply(e,o)}catch(n){at(n,e,'event handler for "'+t+'"')}}return e}}(Me),function(t){t.prototype._update=function(t,e){var n=this;n._isMounted&&Lt(n,"beforeUpdate");var a=n.$el,o=n._vnode,i=Ao;Ao=n,n._vnode=t,o?n.$el=n.__patch__(o,t):(n.$el=n.__patch__(n.$el,t,e,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),Ao=i,a&&(a.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var t=this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Lt(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||f(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Lt(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(Me),function(t){he(t.prototype),t.prototype.$nextTick=function(t){return lt(t,this)},t.prototype._render=function(){var t=this,e=t.$options,n=e.render,a=e._parentVnode;if(t._isMounted)for(var o in t.$slots){var i=t.$slots[o];i._rendered&&(t.$slots[o]=M(i,!0))}t.$scopedSlots=a&&a.data.scopedSlots||ya,t.$vnode=a;var s;try{s=n.call(t._renderProxy,t.$createElement)}catch(e){if(at(e,t,"render"),t.$options.renderError)try{s=t.$options.renderError.call(t._renderProxy,t.$createElement,e)}catch(e){at(e,t,"renderError"),s=t._vnode}else s=t._vnode}return s instanceof Ga||(Array.isArray(s)&&La("Multiple root nodes returned from render function. Render function should return a single root node.",t),s=Ka()),s.parent=a,s}}(Me);var Wo=[String,RegExp,Array],zo={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Wo,exclude:Wo,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){var t=this;for(var e in t.cache)Ye(t.cache,e,t.keys)},watch:{include:function(t){He(this,function(e){return Be(t,e)})},exclude:function(t){He(this,function(e){return!Be(t,e)})}},render:function(){var t=xt(this.$slots.default),e=t&&t.componentOptions;if(e){var n=De(e);if(n&&(this.include&&!Be(this.include,n)||this.exclude&&Be(this.exclude,n)))return t;var a=this,o=a.cache,i=a.keys,s=null==t.key?e.Ctor.cid+(e.tag?"::"+e.tag:""):t.key;o[s]?(t.componentInstance=o[s].componentInstance,f(i,s),i.push(s)):(o[s]=t,i.push(s),this.max&&i.length>parseInt(this.max)&&Ye(o,i[0],i,this._vnode)),t.data.keepAlive=!0}return t}}};!function(t){var e={};e.get=function(){return ma},e.set=function(){La("Do not replace the Vue.config object, set individual fields instead.")},Object.defineProperty(t,"config",e),t.util={warn:La,extend:_,mergeOptions:K,defineReactive:L},t.set=R,t.delete=j,t.nextTick=lt,t.options=Object.create(null),va.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,_(t.options.components,zo),Ie(t),Ne(t),Fe(t),je(t)}(Me),Object.defineProperty(Me.prototype,"$isServer",{get:Ia}),Object.defineProperty(Me.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Me.version="2.5.2";var Go,qo,Ko=p("style,class"),Jo=p("input,textarea,option,select,progress"),Zo=p("contenteditable,draggable,spellcheck"),Qo=p("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Xo="http://www.w3.org/1999/xlink",ti=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},ei=function(t){return ti(t)?t.slice(6,t.length):""},ni=function(t){return null==t||!1===t},ai={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},oi=p("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),ii=p("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),si=function(t){return oi(t)||ii(t)},ri=Object.create(null),li=p("text,number,password,search,email,tel,url"),ci=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(ai[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setAttribute:function(t,e,n){t.setAttribute(e,n)}}),ui={create:function(t,e){Ze(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Ze(t,!0),Ze(e))},destroy:function(t){Ze(t,!0)}},di=new Ga("",{},[]),pi=["create","activate","update","remove","destroy"],fi={create:en,update:en,destroy:function(t){en(t,di)}},vi=Object.create(null),hi=[ui,fi],mi={create:rn,update:rn},yi={create:cn,update:cn},_i="__r",gi="__c",bi={create:vn,update:vn},Ci={create:hn,update:hn},xi=h(function(t){var e={},n=/;(?![^(]*\))/g,a=/:(.+)/;return t.split(n).forEach(function(t){if(t){var n=t.split(a);n.length>1&&(e[n[0].trim()]=n[1].trim())}}),e}),ki=/^--/,wi=/\s*!important$/,Ai=function(t,e,n){if(ki.test(e))t.style.setProperty(e,n);else if(wi.test(n))t.style.setProperty(e,n.replace(wi,""),"important");else{var a=Ti(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[a]=n[o];else t.style[a]=n}},Ei=["Webkit","Moz","ms"],Ti=h(function(t){if(qo=qo||document.createElement("div").style,"filter"!==(t=ra(t))&&t in qo)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<Ei.length;n++){var a=Ei[n]+e;if(a in qo)return a}}),$i={create:xn,update:xn},Si=h(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),Oi=ba&&!ka,Pi="transition",Mi="animation",Ii="transition",Ni="transitionend",Fi="animation",Li="animationend";Oi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Ii="WebkitTransition",Ni="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Fi="WebkitAnimation",Li="webkitAnimationEnd"));var Ri=ba?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()},ji=/\b(transform|all)(,|$)/,Di=function(a){function i(t){return new Ga(I.tagName(t).toLowerCase(),{},[],void 0,t)}function s(t,e){function n(){0==--n.listeners&&r(t)}return n.listeners=e,n}function r(t){var n=I.parentNode(t);e(n)&&I.removeChild(n,t)}function c(t,a,o,i,s){if(t.isRootInsert=!s,!u(t,a,o,i)){var r=t.data,c=t.children,d=t.tag;e(d)?(r&&r.pre&&N++,N||t.ns||ma.ignoredElements.length&&ma.ignoredElements.some(function(t){return l(t)?t.test(d):t===d})||!ma.isUnknownElement(d)||La("Unknown custom element: <"+d+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',t.context),t.elm=t.ns?I.createElementNS(t.ns,d):I.createElement(d,t),_(t),h(t,c,a),e(r)&&y(t,a),v(o,t.elm,i),r&&r.pre&&N--):n(t.isComment)?(t.elm=I.createComment(t.text),v(o,t.elm,i)):(t.elm=I.createTextNode(t.text),v(o,t.elm,i))}}function u(t,a,o,i){var s=t.data;if(e(s)){var r=e(t.componentInstance)&&s.keepAlive;if(e(s=s.hook)&&e(s=s.init)&&s(t,!1,o,i),e(t.componentInstance))return d(t,a),n(r)&&f(t,a,o,i),!0}}function d(t,n){e(t.data.pendingInsert)&&(n.push.apply(n,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,m(t)?(y(t,n),_(t)):(Ze(t),n.push(t))}function f(t,n,a,o){for(var i,s=t;s.componentInstance;)if(s=s.componentInstance._vnode,e(i=s.data)&&e(i=i.transition)){for(i=0;i<P.activate.length;++i)P.activate[i](di,s);n.push(s);break}v(a,t.elm,o)}function v(t,n,a){e(t)&&(e(a)?a.parentNode===t&&I.insertBefore(t,n,a):I.appendChild(t,n))}function h(t,e,n){if(Array.isArray(e))for(var a=0;a<e.length;++a)c(e[a],n,t.elm,null,!0);else o(t.text)&&I.appendChild(t.elm,I.createTextNode(t.text))}function m(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return e(t.tag)}function y(t,n){for(var a=0;a<P.create.length;++a)P.create[a](di,t);e(S=t.data.hook)&&(e(S.create)&&S.create(di,t),e(S.insert)&&n.push(t))}function _(t){var n;if(e(n=t.functionalScopeId))I.setAttribute(t.elm,n,"");else for(var a=t;a;)e(n=a.context)&&e(n=n.$options._scopeId)&&I.setAttribute(t.elm,n,""),a=a.parent;e(n=Ao)&&n!==t.context&&n!==t.functionalContext&&e(n=n.$options._scopeId)&&I.setAttribute(t.elm,n,"")}function g(t,e,n,a,o,i){for(;a<=o;++a)c(n[a],i,t,e)}function b(t){var n,a,o=t.data;if(e(o))for(e(n=o.hook)&&e(n=n.destroy)&&n(t),n=0;n<P.destroy.length;++n)P.destroy[n](t);if(e(n=t.children))for(a=0;a<t.children.length;++a)b(t.children[a])}function C(t,n,a,o){for(;a<=o;++a){var i=n[a];e(i)&&(e(i.tag)?(x(i),b(i)):r(i.elm))}}function x(t,n){if(e(n)||e(t.data)){var a,o=P.remove.length+1;for(e(n)?n.listeners+=o:n=s(t.elm,o),e(a=t.componentInstance)&&e(a=a._vnode)&&e(a.data)&&x(a,n),a=0;a<P.remove.length;++a)P.remove[a](t,n);e(a=t.data.hook)&&e(a=a.remove)?a(t,n):n()}else r(t.elm)}function k(n,a,o,i,s){for(var r,l,u,d=0,p=0,f=a.length-1,v=a[0],h=a[f],m=o.length-1,y=o[0],_=o[m],b=!s;d<=f&&p<=m;)t(v)?v=a[++d]:t(h)?h=a[--f]:Qe(v,y)?(A(v,y,i),v=a[++d],y=o[++p]):Qe(h,_)?(A(h,_,i),h=a[--f],_=o[--m]):Qe(v,_)?(A(v,_,i),b&&I.insertBefore(n,v.elm,I.nextSibling(h.elm)),v=a[++d],_=o[--m]):Qe(h,y)?(A(h,y,i),b&&I.insertBefore(n,h.elm,v.elm),h=a[--f],y=o[++p]):(t(r)&&(r=tn(a,d,f)),t(l=e(y.key)?r[y.key]:w(y,a,d,f))?c(y,i,n,v.elm):((u=a[l])||La("It seems there are duplicate keys that is causing an update error. Make sure each v-for item has a unique key."),Qe(u,y)?(A(u,y,i),a[l]=void 0,b&&I.insertBefore(n,u.elm,v.elm)):c(y,i,n,v.elm)),y=o[++p]);d>f?g(n,t(o[m+1])?null:o[m+1].elm,o,p,m,i):p>m&&C(n,a,d,f)}function w(t,n,a,o){for(var i=a;i<o;i++){var s=n[i];if(e(s)&&Qe(t,s))return i}}function A(a,o,i,s){if(a!==o){var r=o.elm=a.elm;if(n(a.isAsyncPlaceholder))e(o.asyncFactory.resolved)?T(a.elm,o,i):o.isAsyncPlaceholder=!0;else if(n(o.isStatic)&&n(a.isStatic)&&o.key===a.key&&(n(o.isCloned)||n(o.isOnce)))o.componentInstance=a.componentInstance;else{var l,c=o.data;e(c)&&e(l=c.hook)&&e(l=l.prepatch)&&l(a,o);var u=a.children,d=o.children;if(e(c)&&m(o)){for(l=0;l<P.update.length;++l)P.update[l](a,o);e(l=c.hook)&&e(l=l.update)&&l(a,o)}t(o.text)?e(u)&&e(d)?u!==d&&k(r,u,d,i,s):e(d)?(e(a.text)&&I.setTextContent(r,""),g(r,null,d,0,d.length-1,i)):e(u)?C(r,u,0,u.length-1):e(a.text)&&I.setTextContent(r,""):a.text!==o.text&&I.setTextContent(r,o.text),e(c)&&e(l=c.hook)&&e(l=l.postpatch)&&l(a,o)}}}function E(t,a,o){if(n(o)&&e(t.parent))t.parent.data.pendingInsert=a;else for(var i=0;i<a.length;++i)a[i].data.hook.insert(a[i])}function T(t,a,o){if(n(a.isComment)&&e(a.asyncFactory))return a.elm=t,a.isAsyncPlaceholder=!0,!0;if(!$(t,a))return!1;a.elm=t;var i=a.tag,s=a.data,r=a.children;if(e(s)&&(e(S=s.hook)&&e(S=S.init)&&S(a,!0),e(S=a.componentInstance)))return d(a,o),!0;if(e(i)){if(e(r))if(t.hasChildNodes())if(e(S=s)&&e(S=S.domProps)&&e(S=S.innerHTML)){if(S!==t.innerHTML)return"undefined"==typeof console||F||(F=!0,console.warn("Parent: ",t),console.warn("server innerHTML: ",S),console.warn("client innerHTML: ",t.innerHTML)),!1}else{for(var l=!0,c=t.firstChild,u=0;u<r.length;u++){if(!c||!T(c,r[u],o)){l=!1;break}c=c.nextSibling}if(!l||c)return"undefined"==typeof console||F||(F=!0,console.warn("Parent: ",t),console.warn("Mismatching childNodes vs. VNodes: ",t.childNodes,r)),!1}else h(a,r,o);if(e(s))for(var p in s)if(!L(p)){y(a,o);break}}else t.data!==a.text&&(t.data=a.text);return!0}function $(t,n){return e(n.tag)?0===n.tag.indexOf("vue-component")||n.tag.toLowerCase()===(t.tagName&&t.tagName.toLowerCase()):t.nodeType===(n.isComment?8:3)}var S,O,P={},M=a.modules,I=a.nodeOps;for(S=0;S<pi.length;++S)for(P[pi[S]]=[],O=0;O<M.length;++O)e(M[O][pi[S]])&&P[pi[S]].push(M[O][pi[S]]);var N=0,F=!1,L=p("attrs,style,class,staticClass,staticStyle,key");return function(a,o,s,r,l,u){if(!t(o)){var d=!1,p=[];if(t(a))d=!0,c(o,p,l,u);else{var f=e(a.nodeType);if(!f&&Qe(a,o))A(a,o,p,r);else{if(f){if(1===a.nodeType&&a.hasAttribute(fa)&&(a.removeAttribute(fa),s=!0),n(s)){if(T(a,o,p))return E(o,p,!0),a;La("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}a=i(a)}var v=a.elm,h=I.parentNode(v);if(c(o,p,v._leaveCb?null:h,I.nextSibling(v)),e(o.parent))for(var y=o.parent,_=m(o);y;){for(var g=0;g<P.destroy.length;++g)P.destroy[g](y);if(y.elm=o.elm,_){for(var x=0;x<P.create.length;++x)P.create[x](di,y);var k=y.data.hook.insert;if(k.merged)for(var w=1;w<k.fns.length;w++)k.fns[w]()}else Ze(y);y=y.parent}e(h)?C(h,[a],0,0):e(a.tag)&&b(a)}}return E(o,p,d),o.elm}e(a)&&b(a)}}({nodeOps:ci,modules:[mi,yi,bi,Ci,$i,ba?{create:jn,activate:jn,remove:function(t,e){!0!==t.data.show?Nn(t,e):e()}}:{}].concat(hi)});ka&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&Wn(t,"input")});var Bi={model:{inserted:function(t,e,n){"select"===n.tag?(Dn(t,e,n.context),t._vOptions=[].map.call(t.options,Yn)):("textarea"===n.tag||li(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("change",Vn),Aa||(t.addEventListener("compositionstart",Un),t.addEventListener("compositionend",Vn)),ka&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Dn(t,e,n.context);var a=t._vOptions,o=t._vOptions=[].map.call(t.options,Yn);o.some(function(t,e){return!C(t,a[e])})&&(t.multiple?e.value.some(function(t){return Hn(t,o)}):e.value!==e.oldValue&&Hn(e.value,o))&&Wn(t,"change")}}},show:{bind:function(t,e,n){var a=e.value,o=(n=zn(n)).data&&n.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;a&&o?(n.data.show=!0,In(n,function(){t.style.display=i})):t.style.display=a?i:"none"},update:function(t,e,n){var a=e.value;a!==e.oldValue&&((n=zn(n)).data&&n.data.transition?(n.data.show=!0,a?In(n,function(){t.style.display=t.__vOriginalDisplay}):Nn(n,function(){t.style.display="none"})):t.style.display=a?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,a,o){o||(t.style.display=t.__vOriginalDisplay)}}},Hi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]},Yi={name:"transition",props:Hi,abstract:!0,render:function(t){var e=this,n=this.$options._renderChildren;if(n&&(n=n.filter(function(t){return t.tag||Ct(t)})).length){n.length>1&&La("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var a=this.mode;a&&"in-out"!==a&&"out-in"!==a&&La("invalid <transition> mode: "+a,this.$parent);var i=n[0];if(Jn(this.$vnode))return i;var s=Gn(i);if(!s)return i;if(this._leaving)return Kn(t,i);var r="__transition-"+this._uid+"-";s.key=null==s.key?s.isComment?r+"comment":r+s.tag:o(s.key)?0===String(s.key).indexOf(r)?s.key:r+s.key:s.key;var l=(s.data||(s.data={})).transition=qn(this),c=this._vnode,u=Gn(c);if(s.data.directives&&s.data.directives.some(function(t){return"show"===t.name})&&(s.data.show=!0),u&&u.data&&!Zn(s,u)&&!Ct(u)){var d=u.data.transition=_({},l);if("out-in"===a)return this._leaving=!0,dt(d,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),Kn(t,i);if("in-out"===a){if(Ct(s))return c;var p,f=function(){p()};dt(l,"afterEnter",f),dt(l,"enterCancelled",f),dt(d,"delayLeave",function(t){p=t})}}return i}}},Ui=_({tag:String,moveClass:String},Hi);delete Ui.mode;var Vi={Transition:Yi,TransitionGroup:{props:Ui,render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),a=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],s=qn(this),r=0;r<o.length;r++){var l=o[r];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))i.push(l),n[l.key]=l,(l.data||(l.data={})).transition=s;else{var c=l.componentOptions,u=c?c.Ctor.options.name||c.tag||"":l.tag;La("<transition-group> children must be keyed: <"+u+">")}}if(a){for(var d=[],p=[],f=0;f<a.length;f++){var v=a[f];v.data.transition=s,v.data.pos=v.elm.getBoundingClientRect(),n[v.key]?d.push(v):p.push(v)}this.kept=t(e,null,d),this.removed=p}return t(e,null,i)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(Qn),t.forEach(Xn),t.forEach(ta),this._reflow=document.body.offsetHeight,t.forEach(function(t){if(t.data.moved){var n=t.elm,a=n.style;Tn(n,e),a.transform=a.WebkitTransform=a.transitionDuration="",n.addEventListener(Ni,n._moveCb=function t(a){a&&!/transform$/.test(a.propertyName)||(n.removeEventListener(Ni,t),n._moveCb=null,$n(n,e))})}}))},methods:{hasMove:function(t,e){if(!Oi)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){wn(n,t)}),kn(n,e),n.style.display="none",this.$el.appendChild(n);var a=On(n);return this.$el.removeChild(n),this._hasMove=a.hasTransform}}}};Me.config.mustUseProp=function(t,e,n){return"value"===n&&Jo(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Me.config.isReservedTag=si,Me.config.isReservedAttr=Ko,Me.config.getTagNamespace=function(t){return ii(t)?"svg":"math"===t?"math":void 0},Me.config.isUnknownElement=function(t){if(!ba)return!0;if(si(t))return!1;if(t=t.toLowerCase(),null!=ri[t])return ri[t];var e=document.createElement(t);return t.indexOf("-")>-1?ri[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:ri[t]=/HTMLUnknownElement/.test(e.toString())},_(Me.options.directives,Bi),_(Me.options.components,Vi),Me.prototype.__patch__=ba?Di:b,Me.prototype.$mount=function(t,e){return t=t&&ba?Je(t):void 0,Pt(this,t,e)},Me.nextTick(function(){ma.devtools&&(Na?Na.emit("init",Me):Ta&&console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==ma.productionTip&&ba&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0);var Wi={stats:{INT:"Intelligence",REF:"Reflexes",TECH:"Technical Ability",COOL:"Cool",ATTR:"Attractiveness",LUCK:"Luck",MA:"Movement Allowance",BODY:"Body Type",EMP:"Empathy"},skills:[{name:"Personal Grooming",stat:"ATTR",choose:!1},{name:"Wardrobe & Style",stat:"ATTR",choose:!1},{name:"Other ATTR skill",stat:"ATTR",choose:!0},{name:"Endurance",stat:"BODY",choose:!1},{name:"Strength Feat",stat:"BODY",choose:!1},{name:"Swimming",stat:"BODY",choose:!1},{name:"Other BODY skill",stat:"BODY",choose:!0},{name:"Interrogation",stat:"COOL",choose:!1},{name:"Intimidate",stat:"COOL",choose:!1},{name:"Oratory",stat:"COOL",choose:!1},{name:"Resist Torture/Drugs",stat:"COOL",choose:!1},{name:"Streetwise",stat:"COOL",choose:!1},{name:"Other COOL skill",stat:"COOL",choose:!0},{name:"Human Perception",stat:"EMP",choose:!1},{name:"Interview",stat:"EMP",choose:!1},{name:"Leadership",stat:"EMP",choose:!1},{name:"Seduction",stat:"EMP",choose:!1},{name:"Social",stat:"EMP",choose:!1},{name:"Persuasion",stat:"EMP",choose:!1},{name:"Perform",stat:"EMP",choose:!1},{name:"Other EMP skill",stat:"EMP",choose:!0},{name:"Accounting",stat:"INT",choose:!1},{name:"Anthropology",stat:"INT",choose:!1},{name:"Awareness/Notice",stat:"INT",choose:!1},{name:"Biology",stat:"INT",choose:!1},{name:"Botany",stat:"INT",choose:!1},{name:"Chemistry",stat:"INT",choose:!1},{name:"Composition",stat:"INT",choose:!1},{name:"Diagnose Illness",stat:"INT",choose:!1},{name:"Education",stat:"INT",choose:!1},{name:"Expert",stat:"INT",choose:!1},{name:"Gamble",stat:"INT",choose:!1},{name:"Geology",stat:"INT",choose:!1},{name:"Hide/Evade",stat:"INT",choose:!1},{name:"History",stat:"INT",choose:!1},{name:"Know Language",stat:"INT",choose:!0},{name:"Library Search",stat:"INT",choose:!1},{name:"Mathematics",stat:"INT",choose:!1},{name:"Physics",stat:"INT",choose:!1},{name:"Programming",stat:"INT",choose:!1},{name:"Shadow/Track",stat:"INT",choose:!1},{name:"Stock Market",stat:"INT",choose:!1},{name:"System Knowledge",stat:"INT",choose:!1},{name:"Teaching",stat:"INT",choose:!1},{name:"Wilderness Survival",stat:"INT",choose:!1},{name:"Zoology",stat:"INT",choose:!1},{name:"Other INT skill",stat:"INT",choose:!0},{name:"Archery",stat:"REF",choose:!1},{name:"Athletics",stat:"REF",choose:!1},{name:"Brawling",stat:"REF",choose:!1},{name:"Dance",stat:"REF",choose:!1},{name:"Dodge & Escape",stat:"REF",choose:!1},{name:"Driving",stat:"REF",choose:!1},{name:"Fencing",stat:"REF",choose:!1},{name:"Handgun",stat:"REF",choose:!1},{name:"Heavy Weapons",stat:"REF",choose:!1},{name:"Martial Art",stat:"REF",choose:!0},{name:"Melee",stat:"REF",choose:!1},{name:"Motorcycle",stat:"REF",choose:!1},{name:"Operate Heavy Machinery",stat:"REF",choose:!1},{name:"Pilot (Gyro)",stat:"REF",choose:!1},{name:"Pilot (Fixed Wing)",stat:"REF",choose:!1},{name:"Pilot (Dirigible)",stat:"REF",choose:!1},{name:"Pilot (Vect. Trust)",stat:"REF",choose:!1},{name:"Rifle",stat:"REF",choose:!1},{name:"Stealth",stat:"REF",choose:!1},{name:"Submachinegun",stat:"REF",choose:!1},{name:"Other REF skill",stat:"REF",choose:!0},{name:"Aero Tech",stat:"TECH",choose:!1},{name:"AV Tech",stat:"TECH",choose:!1},{name:"Basic Tech",stat:"TECH",choose:!1},{name:"Cryotank Operation",stat:"TECH",choose:!1},{name:"Cyberdeck Deign",stat:"TECH",choose:!1},{name:"CyberTech",stat:"TECH",choose:!1},{name:"Demolitions",stat:"TECH",choose:!1},{name:"Disguise",stat:"TECH",choose:!1},{name:"Electronics",stat:"TECH",choose:!1},{name:"Electronic Security",stat:"TECH",choose:!1},{name:"First Aid",stat:"TECH",choose:!1},{name:"Forgery",stat:"TECH",choose:!1},{name:"Gyro Tech",stat:"TECH",choose:!1},{name:"Paint or Draw",stat:"TECH",choose:!1},{name:"Photo & Film",stat:"TECH",choose:!1},{name:"Pharmaceuticals",stat:"TECH",choose:!1},{name:"Pick Lock",stat:"TECH",choose:!1},{name:"Pick Pocket",stat:"TECH",choose:!1},{name:"Play Instrument",stat:"TECH",choose:!1},{name:"Weaponsmith",stat:"TECH",choose:!1},{name:"Other TECH skill",stat:"TECH",choose:!0}],roles:[{name:"Cop",ability:"Authority",skills:[23,54,13,48,29,49,57,7,11]},{name:"Rocker",ability:"Charismatic Leadership",skills:[23,19,1,27,49,86,11,18,16]},{name:"Solo",ability:"Combat Sense",skills:[23,54,49,56,57,87,64,48,66,65]},{name:"Media",ability:"Credibility",skills:[23,27,29,18,13,17,11,82,14]},{name:"Nomad",ability:"Family",skills:[23,3,57,64,52,70,44,49,48]},{name:"Netrunner",ability:"Interface",skills:[23,70,29,42,73,72,27,77,39]},{name:"Techie",ability:"Jury Rig",skills:[23,70,73,43,29,76,80,68,87,77]},{name:"Medtechie",ability:"Medical Tech",skills:[23,70,28,29,71,36,83,45,13]},{name:"Corp",ability:"Resources",skills:[23,13,29,36,17,18,41,1,0]},{name:"Fixer",ability:"Streetdeal",skills:[23,79,54,49,57,84,85,8,18]}],style:{clothes:["Biker leathers","Blue jeans","Corporate Suits","Jumpsuits","Miniskirts","High Fashion","Cammos","Normal clothes","Nude","Bag Lady chic"],hair:["Mohawk","Long & Ratty","Short & Spiked","Wild & all over","Bald","Striped","Tinted","Neat, short","Short, culry","Long, straight"],affectations:["Tatoos","Mirrorshades","Ritual Scars","Spiked gloves","Nose Rings","Earrings","Long fingernails","Spike heeled boots","Weird Contact Lenses","Fingerless gloves"]},origin:[{name:"Anglo-American",languages:["English"]},{name:"African",languages:["Bantu","Fante","Kongo","Ashanti","Zulu","Swahili"]},{name:"Japanese/Korean",languages:["Japanese","Korean"]},{name:"Central European/Soviet",languages:["Bulgarian","Russian","Polish","Ukrainian","Slovak"]},{name:"Pacific Islander",languages:["Micronesian","Tagalog","Polynesian","Malayan","Sudanese","Indonesian","Hawaiian"]},{name:"Chinese/Southeast Asian",languages:["Burmese","Cantonese","Mandarin","Thai","Tibetan","Vietnamese"]},{name:"Black American",languages:["English","Blackfolk"]},{name:"Hispanic American",languages:["Spanish","English"]},{name:"Central/South American",languages:["Spanish","Portuguese"]},{name:"European",languages:["French","German","English","Spanish","Italian","Greek","Danish","Norwegian","Swedish","Finnish"]}],family:{rank:["Corporate Executive","Corporate Manager","Corporate Technician","Nomad Pack","Pirate Fleet","Gang Family","Crime Lord","Combat Zone Poor","Urban homeless","Arcology family"],parents:["Both parents are living","Your parent(s) died in warfare","Your parent(s) died in an accident","Your parent(s) were murdered","Your parent(s) have amnesia and don't remember you","You never knew your parent(s)","Your parent(s) are in hiding to protect you","You were left with relatives for safekeeping","You grew up on the Street and never had parents","Your parent(s) gave you up for adoption","Your parent(s) sold you for money"],status:["Family status is OK","Family lost everything through betrayal","Family lost everything through bad management","Family exiled/driven from their original home/nation/corporation","Family is imprisoned and you alone escaped","Family vanished. You are only remaining member","Family was murdered/killed and you were only survivor","Family is involved in longterm conspiracy, organization or association","Your family was scattered to the winds due to misfortune","Your family is cursed with a hereditary feud","You are the inheritor of a family debt; you must honor this debt"],childhood:["Spent on the Street with no adult supervision","Spent in a safe Corporate Suburbia","In a Nomad Pack moving from town to town","In a decaying, once upscale neighborhood","In a defended Corporate Zone in the central City","In the heart of the Combat Zone","In a small village or town far from the City","In a large arcology city","In a aquatic Pirate Pack","On a Corporate controlled Farm or Research Facility"]},motivation:{personality:["Shy and secretive","Rebellious, antisocial, violent","Arrogant, proud and aloof","Moody, rash and headstrong","Picky fussy and nervous","Stable and serious","Silly and fluffheaded","Sneaky and deceptive","Intellectual and detached","Friendly and outgoing"],person:["A parent","Brother or sister","Lover","Friend","Yourself","A pet","Teacher or mentor","Public figure","A personal hero","No one"],value:["Money","Honor","Your word","Honesty","Knowledge","Vengeance","Love","Power","Having a good time","Friendship"],people:["Neutral","Neutral","I like almost everyone","I hate almost everyone","People are tools. Use them for your own goals and discard them","Every person is a valuable individual","People are obstacles to be destroyed if they cross me","People are untrustworthy. Don't depend on anyone","Wipe'em all out and give the place to the cockroaches","People are wonderful"],posession:["A weapon","A tool","A piece of clothing","A photograph","A book or diary","A recording","A musical instrument","A piece of jewelry","A toy","A letter"]},rollTree:{sibling:[{rolls:[1,2,3,4,5],text:"Older",next:"siblingMF"},{rolls:[6,7,8,9],text:"Younger",next:"siblingMF"},{rolls:[10],text:"Twin",next:"siblingMF"}],siblingMF:[{rolls:[2,4,6,8,10],text:"brother",next:"siblingFeeling"},{rolls:[1,3,5,7,9],text:"sister",next:"siblingFeeling"}],siblingFeeling:[{rolls:[1,2],text:"who dislikes you"},{rolls:[3,4],text:"who likes you"},{rolls:[5,6],text:"who is neutral towards you"},{rolls:[7,8],text:"who hero worships you"},{rolls:[9,10],text:"who hates you"}],lifePath:[{rolls:[1,2,3],text:"Big problems/wins",next:"big"},{rolls:[4,5,6],text:"Friends & Enemies",next:"contacts"},{rolls:[7,8],text:"Romantic involvement",next:"romance"},{rolls:[9,10],text:"Nothing important"}],big:[{rolls:[1,2,3,4,5],text:"Disaster strikes!",next:"disaster"},{rolls:[6,7,8,9,10],text:"You get lucky!",next:"luck"}],disaster:[{rolls:[1],text:"Financial Loss or Debt",next:"loss"},{rolls:[2],text:"Imprisonment",next:"months"},{rolls:[3],text:"Illness or addiction: Lost 1 pt of REF permanently as a result.",next:"disasterAbout"},{rolls:[4],text:"Betrayal",next:"betrayal"},{rolls:[5],text:"Accident",next:"accident"},{rolls:[6],text:"Lover, friend ot relative killed",next:"killed"},{rolls:[7],text:"False Accusation",next:"accusation"},{rolls:[8],text:"Hunted by the Law",next:"huntedByTheLaw"},{rolls:[9],text:"Hunted by a Corporation",next:"huntedByCorporation"},{rolls:[10],text:"Mental or physical incapacitation",next:"incapacitation"}],loss:[{rolls:[1],text:"100 Eb",next:"disasterAbout"},{rolls:[2],text:"200 Eb",next:"disasterAbout"},{rolls:[3],text:"300 Eb",next:"disasterAbout"},{rolls:[4],text:"400 Eb",next:"disasterAbout"},{rolls:[5],text:"500 Eb",next:"disasterAbout"},{rolls:[6],text:"600 Eb",next:"disasterAbout"},{rolls:[7],text:"700 Eb",next:"disasterAbout"},{rolls:[8],text:"800 Eb",next:"disasterAbout"},{rolls:[9],text:"900 Eb",next:"disasterAbout"},{rolls:[10],text:"1000 Eb",next:"disasterAbout"}],months:[{rolls:[1],text:"1 month",next:"disasterAbout"},{rolls:[2],text:"2 months",next:"disasterAbout"},{rolls:[3],text:"3 months",next:"disasterAbout"},{rolls:[4],text:"4 months",next:"disasterAbout"},{rolls:[5],text:"5 months",next:"disasterAbout"},{rolls:[6],text:"6 months",next:"disasterAbout"},{rolls:[7],text:"7 months",next:"disasterAbout"},{rolls:[8],text:"8 months",next:"disasterAbout"},{rolls:[9],text:"9 months",next:"disasterAbout"},{rolls:[10],text:"10 months",next:"disasterAbout"}],betrayal:[{rolls:[1,2,3],text:"Blackmailed",next:"disasterAbout"},{rolls:[4,5,6,7],text:"A secret was exposed",next:"disasterAbout"},{rolls:[8,9,10],text:"Betrayed",next:"disasterAbout"}],accident:[{rolls:[1,2,3,4],text:"Disfigured, -5 ATTR",next:"disasterAbout"},{rolls:[5,6],text:"Hospitalized",next:"months"},{rolls:[7,8],text:"Lost memories",next:"months"},{rolls:[9,10],text:"Nightmares (8 out of 10 nights) of the accident",next:"disasterAbout"}],killed:[{rolls:[1,2,3,4,5],text:"They died accidentally",next:"disasterAbout"},{rolls:[6,7,8],text:"They were murdered by unknown parties",next:"disasterAbout"},{rolls:[9,10],text:"They were murdered and you know who did it. You just need the proof",next:"disasterAbout"}],accusation:[{rolls:[1,2,3],text:"Theft",next:"disasterAbout"},{rolls:[4,5],text:"Cowardice",next:"disasterAbout"},{rolls:[6,7,8],text:"Murder",next:"disasterAbout"},{rolls:[9],text:"Rape",next:"disasterAbout"},{rolls:[10],text:"Betrayal",next:"disasterAbout"}],huntedByTheLaw:[{rolls:[1,2,3],text:"A couple local cops",next:"disasterAbout"},{rolls:[4,5,6],text:"The entire local force",next:"disasterAbout"},{rolls:[7,8],text:"State police or Militia",next:"disasterAbout"},{rolls:[9,10],text:"FBI or equivalent",next:"disasterAbout"}],huntedByCorporation:[{rolls:[1,2,3],text:"Small local firm",next:"disasterAbout"},{rolls:[4,5,6],text:"Statewide corp",next:"disasterAbout"},{rolls:[7,8],text:"National corp",next:"disasterAbout"},{rolls:[9,10],text:"Multinational corp",next:"disasterAbout"}],incapacitation:[{rolls:[1,2,3],text:"Nervous disorder. -1 REF",next:"disasterAbout"},{rolls:[4,5,6,7],text:"Mental problem -1 CL",next:"disasterAbout"},{rolls:[8,9,10],text:"Psychosis -1 CL, -1 REF",next:"disasterAbout"}],disasterAbout:[{rolls:[1,2],text:"Clear your name"},{rolls:[3,4],text:"Live it down and try to forget it"},{rolls:[5,6],text:"Hunt down those responsible and moke them pay!"},{rolls:[7,8],text:"Get what's rightfully yours"},{rolls:[9,10],text:"Save, if possible, anyone else involved in the situation"}],luck:[{rolls:[1],text:"Powerful Connection in City Government",next:"govtConnection"},{rolls:[2],text:"Financial Windfall",next:"money"},{rolls:[3],text:"Big score or deal",next:"money"},{rolls:[4],text:"Find a Sensei (teacher). Begin at +2 or add +1 to a Martial Arts Skill of your choice."},{rolls:[5],text:"Find a Teacher: Add +1 to any INT based skill, or begin a new INT based skill at +2."},{rolls:[6],text:"Powerful Corporate Exec owes you one favor."},{rolls:[7],text:"Local Nomad Pack befriends you. Equivalent to a Family +2"},{rolls:[8],text:"Make a Friend on the Police Force. Inside information at a level of +2 Streetwise on any police related matters"},{rolls:[9],text:"Local Boostergang likes you. You can call upon them for 1 favor a month, equivalent to a Family Special Ability of +2"},{rolls:[10],text:"Find a Combat Teacher. Add +1 to any weapon skill with the exception of Martial Arts or Brawling, or begin a new combat skill at +2."}],govtConnection:[{rolls:[1,2,3,4],text:"Police Dept."},{rolls:[5,6,7],text:"District Attorney's Office"},{rolls:[8,9,10],text:"Mayor's Office"}],money:[{rolls:[1],text:"100 Eb"},{rolls:[2],text:"200 Eb"},{rolls:[3],text:"300 Eb"},{rolls:[4],text:"400 Eb"},{rolls:[5],text:"500 Eb"},{rolls:[6],text:"600 Eb"},{rolls:[7],text:"700 Eb"},{rolls:[8],text:"800 Eb"},{rolls:[9],text:"900 Eb"},{rolls:[10],text:"1000 Eb"}],contacts:[{rolls:[1,2,3,4,5],text:"Friend",next:"friend"},{rolls:[6,7,8,9,10],text:"Enemy",next:"enemy"}],friend:[{rolls:[1],text:"Like a big brother/sister to you"},{rolls:[2],text:"Like a kid sister/brother to you"},{rolls:[3],text:"A teacher or mentor"},{rolls:[4],text:"A partner or co-worker"},{rolls:[5],text:"An old lover (choose which one)"},{rolls:[6],text:"An old enemy (choose which one)"},{rolls:[7],text:"Like a foster parent to you"},{rolls:[8],text:"A relative"},{rolls:[9],text:"Reconnect with an old childhood friend"},{rolls:[10],text:"Met through a common interest"}],enemy:[{rolls:[1],text:"Ex friend",next:"cause"},{rolls:[2],text:"Ex lover",next:"cause"},{rolls:[3],text:"Relative",next:"cause"},{rolls:[4],text:"Childhood enemy",next:"cause"},{rolls:[5],text:"Person working for you",next:"cause"},{rolls:[6],text:"Person you work for",next:"cause"},{rolls:[7],text:"Partner or co-worker",next:"cause"},{rolls:[8],text:"Booster gang member",next:"cause"},{rolls:[9],text:"Corporate Exec",next:"cause"},{rolls:[10],text:"Government Official ",next:"cause"}],cause:[{rolls:[1],text:"Caused the other to lose face or status",next:"fracked"},{rolls:[2],text:"Caused the loss of a lover, friend or relative",next:"fracked"},{rolls:[3],text:"Caused a major humiliation",next:"fracked"},{rolls:[4],text:"Accused the other of cowardice or some other personal flaw",next:"fracked"},{rolls:[5],text:"Caused a physical disability",next:"disability",nextDie:6},{rolls:[6],text:"Deserted or betrayed the other",next:"fracked"},{rolls:[7],text:"Turned down other's offer of job or romantic involvement",next:"fracked"},{rolls:[8],text:"You just didn't like each other",next:"fracked"},{rolls:[9],text:"Was a romantic rival",next:"fracked"},{rolls:[10],text:"Foiled a plan of the other's",next:"fracked"}],disability:[{rolls:[1,2],text:"Lose eye",next:"fracked"},{rolls:[3,4],text:"Lose arm",next:"fracked"},{rolls:[5,6],text:"Badly scarred",next:"fracked"}],fracked:[{rolls:[1,2,3,4],text:"They hate you",next:"enemyAbout"},{rolls:[5,6,7],text:"You hate them",next:"enemyAbout"},{rolls:[8,9,10],text:"The feeling's mutual",next:"enemyAbout"}],enemyAbout:[{rolls:[1,2],text:"Go into a murderous killing rage and rip his face off!",next:"againstYou"},{rolls:[3,4],text:"Avoid the scum",next:"againstYou"},{rolls:[5,6],text:"Backstab him indirectly",next:"againstYou"},{rolls:[7,8],text:"Ignore the scum",next:"againstYou"},{rolls:[9,10],text:"Rip into him verbally",next:"againstYou"}],againstYou:[{rolls:[1,2,3],text:"Just himself"},{rolls:[4,5],text:"Himself and a few friends"},{rolls:[6,7],text:"An entire Gang"},{rolls:[8],text:"A small Corporation"},{rolls:[9],text:"A large Corporation"},{rolls:[10],text:"An entire Government Agency"}],romance:[{rolls:[1,2,3,4],text:"Happy love affair"},{rolls:[5],text:"Tragic love affair",next:"tragicRomance"},{rolls:[6,7],text:"Love affair with problems",next:"problematicRomance"},{rolls:[8,9,10],text:"Fast Affairs and Hot Dates"}],tragicRomance:[{rolls:[1],text:"Lover died in accident",next:"mutualFeelings"},{rolls:[2],text:"Lover mysteriously vanished",next:"mutualFeelings"},{rolls:[3],text:"It didn't work out",next:"mutualFeelings"},{rolls:[4],text:"A personal goal or vendetta came between you",next:"mutualFeelings"},{rolls:[5],text:"Lover kidnapped",next:"mutualFeelings"},{rolls:[6],text:"Lover went insane",next:"mutualFeelings"},{rolls:[7],text:"Lover committed suicide",next:"mutualFeelings"},{rolls:[8],text:"Lover killed in a fight",next:"mutualFeelings"},{rolls:[9],text:"Rival cut you out of the action",next:"mutualFeelings"},{rolls:[10],text:"Lover imprisoned or exiled",next:"mutualFeelings"}],mutualFeelings:[{rolls:[1],text:"They still love you"},{rolls:[2],text:"You still love them"},{rolls:[3],text:"You still love each other"},{rolls:[4],text:"You hate them"},{rolls:[5],text:"They hate you"},{rolls:[6],text:"You hate each other"},{rolls:[7],text:"You're friends"},{rolls:[8],text:"No feeling's either way; it's over"},{rolls:[9],text:"You like them, they hate you"},{rolls:[10],text:"They like you, you hate them"}],problematicRomance:[{rolls:[1],text:"Your lover's friends/family hate you"},{rolls:[2],text:"Your lover's friends/family would use any means to get rid of you"},{rolls:[3],text:"Your friends/family hate your lover"},{rolls:[4],text:"One of you has a romantic rival"},{rolls:[5],text:"You are separated in some way"},{rolls:[6],text:"You fight constantly"},{rolls:[7],text:"You're professional rivals"},{rolls:[8],text:"One of you is insanely jealous"},{rolls:[9],text:'One of you is "messing around"'},{rolls:[10],text:"You have conflicting backgrounds and families"}]}},zi={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"field is-horizontal has-addons"},[n("p",{staticClass:"control"},[n("button",{staticClass:"button is-static",style:t.labelStyle,attrs:{type:"button"}},[t._v(" "+t._s(t.label)+" ")])]),t._v(" "),n("p",{staticClass:"control"},[t.readOnly?t._e():n("button",{staticClass:"button is-primary",staticStyle:{width:"40px"},attrs:{type:"button",disabled:t.value<=t.min},on:{click:t.decrement}},[n("i",{staticClass:"fa fa-minus",attrs:{"aria-hidden":"true"}})])]),t._v(" "),n("p",{staticClass:"control"},[n("button",{staticClass:"button is-static",style:t.valueStyle,attrs:{type:"button"}},[t._v(" "+t._s(t.value)+" ")])]),t._v(" "),n("p",{staticClass:"control"},[t.readOnly?t._e():n("button",{staticClass:"button is-primary",staticStyle:{width:"40px"},attrs:{type:"button",disabled:t.value>=t.max},on:{click:t.increment}},[n("i",{staticClass:"fa fa-plus",attrs:{"aria-hidden":"true"}})])])])},staticRenderFns:[],props:{label:{type:String,required:!0},labelWidth:{type:Number,default:120},value:{type:Number,default:0},min:{type:Number,default:0},max:{type:Number,default:10},step:{type:Number,default:1},readOnly:{type:Boolean,default:!1}},data:function(){return{labelStyle:{width:this.labelWidth+"px"},valueStyle:{width:this.readOnly?"120px":"40px"}}},methods:{increment:function(){this.$emit("input",Math.min(this.value+this.step,this.max))},decrement:function(){this.$emit("input",Math.max(this.value-this.step,this.min))}}},Gi="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},qi=ea(function(t){var e=function(){function t(t,e){if(!o[t]){o[t]={};for(var n=0;n<t.length;n++)o[t][t.charAt(n)]=n}return o[t][e]}var e=String.fromCharCode,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",o={},i={compressToBase64:function(t){if(null==t)return"";var e=i._compress(t,6,function(t){return n.charAt(t)});switch(e.length%4){default:case 0:return e;case 1:return e+"===";case 2:return e+"==";case 3:return e+"="}},decompressFromBase64:function(e){return null==e?"":""==e?null:i._decompress(e.length,32,function(a){return t(n,e.charAt(a))})},compressToUTF16:function(t){return null==t?"":i._compress(t,15,function(t){return e(t+32)})+" "},decompressFromUTF16:function(t){return null==t?"":""==t?null:i._decompress(t.length,16384,function(e){return t.charCodeAt(e)-32})},compressToUint8Array:function(t){for(var e=i.compress(t),n=new Uint8Array(2*e.length),a=0,o=e.length;a<o;a++){var s=e.charCodeAt(a);n[2*a]=s>>>8,n[2*a+1]=s%256}return n},decompressFromUint8Array:function(t){if(null===t||void 0===t)return i.decompress(t);for(var n=new Array(t.length/2),a=0,o=n.length;a<o;a++)n[a]=256*t[2*a]+t[2*a+1];var s=[];return n.forEach(function(t){s.push(e(t))}),i.decompress(s.join(""))},compressToEncodedURIComponent:function(t){return null==t?"":i._compress(t,6,function(t){return a.charAt(t)})},decompressFromEncodedURIComponent:function(e){return null==e?"":""==e?null:(e=e.replace(/ /g,"+"),i._decompress(e.length,32,function(n){return t(a,e.charAt(n))}))},compress:function(t){return i._compress(t,16,function(t){return e(t)})},_compress:function(t,e,n){if(null==t)return"";var a,o,i,s={},r={},l="",c="",u="",d=2,p=3,f=2,v=[],h=0,m=0;for(i=0;i<t.length;i+=1)if(l=t.charAt(i),Object.prototype.hasOwnProperty.call(s,l)||(s[l]=p++,r[l]=!0),c=u+l,Object.prototype.hasOwnProperty.call(s,c))u=c;else{if(Object.prototype.hasOwnProperty.call(r,u)){if(u.charCodeAt(0)<256){for(a=0;a<f;a++)h<<=1,m==e-1?(m=0,v.push(n(h)),h=0):m++;for(o=u.charCodeAt(0),a=0;a<8;a++)h=h<<1|1&o,m==e-1?(m=0,v.push(n(h)),h=0):m++,o>>=1}else{for(o=1,a=0;a<f;a++)h=h<<1|o,m==e-1?(m=0,v.push(n(h)),h=0):m++,o=0;for(o=u.charCodeAt(0),a=0;a<16;a++)h=h<<1|1&o,m==e-1?(m=0,v.push(n(h)),h=0):m++,o>>=1}0==--d&&(d=Math.pow(2,f),f++),delete r[u]}else for(o=s[u],a=0;a<f;a++)h=h<<1|1&o,m==e-1?(m=0,v.push(n(h)),h=0):m++,o>>=1;0==--d&&(d=Math.pow(2,f),f++),s[c]=p++,u=String(l)}if(""!==u){if(Object.prototype.hasOwnProperty.call(r,u)){if(u.charCodeAt(0)<256){for(a=0;a<f;a++)h<<=1,m==e-1?(m=0,v.push(n(h)),h=0):m++;for(o=u.charCodeAt(0),a=0;a<8;a++)h=h<<1|1&o,m==e-1?(m=0,v.push(n(h)),h=0):m++,o>>=1}else{for(o=1,a=0;a<f;a++)h=h<<1|o,m==e-1?(m=0,v.push(n(h)),h=0):m++,o=0;for(o=u.charCodeAt(0),a=0;a<16;a++)h=h<<1|1&o,m==e-1?(m=0,v.push(n(h)),h=0):m++,o>>=1}0==--d&&(d=Math.pow(2,f),f++),delete r[u]}else for(o=s[u],a=0;a<f;a++)h=h<<1|1&o,m==e-1?(m=0,v.push(n(h)),h=0):m++,o>>=1;0==--d&&(d=Math.pow(2,f),f++)}for(o=2,a=0;a<f;a++)h=h<<1|1&o,m==e-1?(m=0,v.push(n(h)),h=0):m++,o>>=1;for(;;){if(h<<=1,m==e-1){v.push(n(h));break}m++}return v.join("")},decompress:function(t){return null==t?"":""==t?null:i._decompress(t.length,32768,function(e){return t.charCodeAt(e)})},_decompress:function(t,n,a){var o,i,s,r,l,c,u,d=[],p=4,f=4,v=3,h="",m=[],y={val:a(0),position:n,index:1};for(o=0;o<3;o+=1)d[o]=o;for(s=0,l=Math.pow(2,2),c=1;c!=l;)r=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=a(y.index++)),s|=(r>0?1:0)*c,c<<=1;switch(s){case 0:for(s=0,l=Math.pow(2,8),c=1;c!=l;)r=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=a(y.index++)),s|=(r>0?1:0)*c,c<<=1;u=e(s);break;case 1:for(s=0,l=Math.pow(2,16),c=1;c!=l;)r=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=a(y.index++)),s|=(r>0?1:0)*c,c<<=1;u=e(s);break;case 2:return""}for(d[3]=u,i=u,m.push(u);;){if(y.index>t)return"";for(s=0,l=Math.pow(2,v),c=1;c!=l;)r=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=a(y.index++)),s|=(r>0?1:0)*c,c<<=1;switch(u=s){case 0:for(s=0,l=Math.pow(2,8),c=1;c!=l;)r=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=a(y.index++)),s|=(r>0?1:0)*c,c<<=1;d[f++]=e(s),u=f-1,p--;break;case 1:for(s=0,l=Math.pow(2,16),c=1;c!=l;)r=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=a(y.index++)),s|=(r>0?1:0)*c,c<<=1;d[f++]=e(s),u=f-1,p--;break;case 2:return m.join("")}if(0==p&&(p=Math.pow(2,v),v++),d[u])h=d[u];else{if(u!==f)return null;h=i+i.charAt(0)}m.push(h),d[f++]=i+h.charAt(0),i=h,0==--p&&(p=Math.pow(2,v),v++)}}};return i}();null!=t&&(t.exports=e)}),Ki=ea(function(t){var e=e||function(t){if(!(void 0===t||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var e=function(){return t.URL||t.webkitURL||t},n=t.document.createElementNS("http://www.w3.org/1999/xhtml","a"),a="download"in n,o=function(t){var e=new MouseEvent("click");t.dispatchEvent(e)},i=/constructor/i.test(t.HTMLElement)||t.safari,s=/CriOS\/[\d]+/.test(navigator.userAgent),r=function(e){(t.setImmediate||t.setTimeout)(function(){throw e},0)},l=function(t){setTimeout(function(){"string"==typeof t?e().revokeObjectURL(t):t.remove()},4e4)},c=function(t,e,n){for(var a=(e=[].concat(e)).length;a--;){var o=t["on"+e[a]];if("function"==typeof o)try{o.call(t,n||t)}catch(t){r(t)}}},u=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t},d=function(r,d,p){p||(r=u(r));var f,v=this,h="application/octet-stream"===r.type,m=function(){c(v,"writestart progress write writeend".split(" "))};if(v.readyState=v.INIT,a)return f=e().createObjectURL(r),void setTimeout(function(){n.href=f,n.download=d,o(n),m(),l(f),v.readyState=v.DONE});!function(){if((s||h&&i)&&t.FileReader){var n=new FileReader;return n.onloadend=function(){var e=s?n.result:n.result.replace(/^data:[^;]*;/,"data:attachment/file;");t.open(e,"_blank")||(t.location.href=e),e=void 0,v.readyState=v.DONE,m()},n.readAsDataURL(r),void(v.readyState=v.INIT)}f||(f=e().createObjectURL(r)),h?t.location.href=f:t.open(f,"_blank")||(t.location.href=f),v.readyState=v.DONE,m(),l(f)}()},p=d.prototype;return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,n){return e=e||t.name||"download",n||(t=u(t)),navigator.msSaveOrOpenBlob(t,e)}:(p.abort=function(){},p.readyState=p.INIT=0,p.WRITING=1,p.DONE=2,p.error=p.onwritestart=p.onprogress=p.onwrite=p.onabort=p.onerror=p.onwriteend=null,function(t,e,n){return new d(t,e||t.name||"download",n)})}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||Gi.content);t.exports&&(t.exports.saveAs=e)}).saveAs,Ji={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"app"}},[n("section",{staticClass:"section"},[n("div",{staticClass:"container"},[n("div",{staticClass:"box"},[n("nav",{staticClass:"pagination"},[n("a",{staticClass:"pagination-previous",attrs:{disabled:0===t.page},on:{click:function(e){t.page=Math.max(0,t.page-1)}}},[n("i",{staticClass:"fa fa-chevron-left",attrs:{"aria-hidden":"true"}})]),t._v(" "),n("a",{staticClass:"pagination-next",attrs:{disabled:t.page===t.pages.length-1},on:{click:function(e){t.page=Math.min(t.pages.length-1,t.page+1)}}},[n("i",{staticClass:"fa fa-chevron-right",attrs:{"aria-hidden":"true"}})]),t._v(" "),n("ul",{staticClass:"pagination-list"},[n("li",[n("div",{staticClass:"file"},[n("label",{staticClass:"file-label"},[n("input",{staticClass:"file-input",attrs:{type:"file",name:"import"},on:{change:t.importCharacter}}),t._v(" "),n("span",{staticClass:"pagination-link"},[t._v(" Import ")])])])]),t._v(" "),t._l(t.pages,function(e,a){return n("li",[n("a",{staticClass:"pagination-link",class:{"is-current":t.page===a},on:{click:function(e){t.page=a}}},[t._v(" "+t._s(e)+" ")])])}),t._v(" "),n("li",[n("a",{staticClass:"pagination-link",on:{click:function(e){t.exportCharacter()}}},[t._v(" Export ")])])],2)]),t._v(" "),n("hr"),t._v(" "),0===t.page?n("div",[n("h4",{staticClass:"title is-4"},[t._v(" Character points ")]),t._v(" "),n("div",{staticClass:"field is-grouped"},[n("p",{staticClass:"control"},[n("spinner",{attrs:{label:"Character points","label-width":200,min:10,max:90,step:5},model:{value:t.char.characterPoints,callback:function(e){t.$set(t.char,"characterPoints",e)},expression:"char.characterPoints"}})],1),t._v(" "),n("p",{staticClass:"control"},[n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("cp")}}},[t._v(" Roll ")])])]),t._v(" "),n("hr"),t._v(" "),n("h4",{staticClass:"title is-4"},[t._v(" Statistics ")]),t._v(" "),n("div",{staticClass:"columns is-multiline"},[t._l(t.options.stats,function(e,a){return n("div",{key:a,staticClass:"column is-narrow"},[n("spinner",{attrs:{label:a,"label-width":200,min:1,max:Math.min(10,t.char.stats[a]+t.cpLeft),step:1},model:{value:t.char.stats[a],callback:function(e){t.$set(t.char.stats,a,e)},expression:"char.stats[i]"}})],1)}),t._v(" "),n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:"Run","read-only":"","label-width":200,value:t.run}})],1),t._v(" "),n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:"Leap","read-only":"","label-width":200,value:t.leap}})],1),t._v(" "),n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:"Lift","read-only":"","label-width":200,value:t.lift}})],1),t._v(" "),n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:"Save","read-only":"","label-width":200,value:t.char.stats.BODY}})],1),t._v(" "),n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:"BTM","read-only":"","label-width":200,value:t.btm}})],1)],2),t._v(" "),n("div",[n("strong",[t._v(t._s(t.cpLeft)+" ")]),t._v(" points remaining ")])]):t._e(),t._v(" "),1===t.page?n("div",[n("h4",{staticClass:"title is-4"},[t._v(" Role ")]),t._v(" "),n("div",{staticClass:"field has-addons"},t._l(t.options.roles,function(e,a){return n("p",{key:a,staticClass:"control"},[n("button",{staticClass:"button",class:{"is-primary":t.char.role===a},on:{click:function(e){t.setRole(a)}}},[t._v(" "+t._s(e.name)+" ")])])})),t._v(" "),n("hr"),t._v(" "),void 0!==t.char.role?n("div",[n("h4",{staticClass:"title is-4"},[t._v(" Career skills ")]),t._v(" "),n("div",{staticClass:"columns is-multiline"},[n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:t.options.roles[t.char.role].ability,"label-width":200,min:1,max:Math.min(10,t.char.ability+t.careerSkillPointsLeft)},model:{value:t.char.ability,callback:function(e){t.$set(t.char,"ability",e)},expression:"char.ability"}})],1),t._v(" "),t._l(t.char.careerSkills,function(e,a){return n("div",{key:e.id,staticClass:"column is-narrow"},[n("spinner",{attrs:{label:t.options.skills[e.id].name,"label-width":200,max:Math.min(10,t.char.careerSkills[a].v+t.careerSkillPointsLeft)},model:{value:t.char.careerSkills[a].v,callback:function(e){t.$set(t.char.careerSkills[a],"v",e)},expression:"char.careerSkills[i].v"}})],1)})],2),t._v(" "),n("div",[n("strong",[t._v(t._s(t.careerSkillPointsLeft)+" ")]),t._v(" points remaining ")]),t._v(" "),n("hr"),t._v(" "),n("h4",{staticClass:"title is-4"},[t._v(" Pickup skills ")]),t._v(" "),n("div",{staticClass:"field is-horizontal"},[n("div",{staticClass:"field-body"},[n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{staticStyle:{width:"317px"},on:{change:t.addPickupSkill}},[n("option",{attrs:{disabled:"disabled",selected:"selected",value:"-1"}},[t._v(" Pick a new skill ")]),t._v(" "),t._l(t.pickupSkillsAvailable,function(e){return n("option",{domProps:{value:e.id}},[t._v(" ["+t._s(e.stat)+"] "+t._s(e.name)+" ")])})],2)])])])]),t._v(" "),n("div",{staticClass:"columns is-multiline"},t._l(t.char.pickupSkills,function(e,a){return n("div",{key:e.id,staticClass:"column is-narrow"},[n("spinner",{attrs:{label:t.options.skills[e.id].name,"label-width":200,max:Math.min(10,t.char.pickupSkills[a].v+t.pickupSkillPointsLeft)},model:{value:t.char.pickupSkills[a].v,callback:function(e){t.$set(t.char.pickupSkills[a],"v",e)},expression:"char.pickupSkills[i].v"}})],1)})),t._v(" "),n("div",{staticClass:"field is-horizontal"},[n("div",{staticClass:"field-body"},[n("div",{staticClass:"field"},[n("div",{staticClass:"control"},[n("button",{staticClass:"button",attrs:{type:"button"},on:{click:t.removeZeroPickupSkills}},[t._v(" Remove 0 Skills ")])])])])]),t._v(" "),n("div",[n("strong",[t._v(" "+t._s(t.pickupSkillPointsLeft)+"  ")]),t._v(" points remaining ")])]):t._e()]):t._e(),t._v(" "),2===t.page?n("div",[n("div",{staticClass:"columns"},[n("div",{staticClass:"column is-7"},[n("button",{staticClass:"button is-pulled-right",attrs:{type:"button"},on:{click:function(e){t.roll("style")}}},[t._v(" Roll all ")]),t._v(" "),n("h4",{staticClass:"title is-4"},[t._v(" Style ")]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Clothes ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.style.clothes,expression:"char.style.clothes"}],attrs:{id:"style.clothes"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.style,"clothes",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.style.clothes,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("style.clothes")}}},[t._v(" Roll ")])])]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Hair ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.style.hair,expression:"char.style.hair"}],attrs:{id:"style.hair"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.style,"hair",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.style.hair,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("style.hair")}}},[t._v(" Roll ")])])]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Affectations ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.style.affectations,expression:"char.style.affectations"}],attrs:{id:"style.affectations"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.style,"affectations",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.style.affectations,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("style.affectations")}}},[t._v(" Roll ")])])])]),t._v(" "),n("div",{staticClass:"column is-5"},[n("h4",{staticClass:"title is-4"},[t._v(" Origins ")]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Origin ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.origin,expression:"char.origin"}],attrs:{id:"origin"},on:{change:[function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char,"origin",e.target.multiple?n:n[0])},t.originChanged]}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.origin,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e.name)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("origin")}}},[t._v(" Roll ")])])]),t._v(" "),t.char.origin>=0?n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Language ")]),t._v(" "),n("div",{staticClass:"field is-grouped"},[n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.language,expression:"char.language"}],attrs:{id:"language"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char,"language",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.origin[t.char.origin].languages,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)])])])]):t._e()])])]):t._e(),t._v(" "),3===t.page?n("div",[n("div",{staticClass:"columns"},[n("div",{staticClass:"column is-7"},[n("button",{staticClass:"button is-pulled-right",attrs:{type:"button"},on:{click:function(e){t.roll("family")}}},[t._v(" Roll all ")]),t._v(" "),n("h4",{staticClass:"title is-4"},[t._v(" Family ")]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Family Rank ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.family.rank,expression:"char.family.rank"}],attrs:{id:"family.rank"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.family,"rank",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.family.rank,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("family.rank")}}},[t._v(" Roll ")])])]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Parents ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.family.parents,expression:"char.family.parents"}],attrs:{id:"family.parents"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.family,"parents",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.family.parents,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("family.parents")}}},[t._v(" Roll ")])])]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Family Status ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.family.status,expression:"char.family.status"}],attrs:{id:"family.status"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.family,"status",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.family.status,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("family.status")}}},[t._v(" Roll ")])])]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Childhood ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.family.childhood,expression:"char.family.childhood"}],attrs:{id:"family.childhood"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.family,"childhood",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.family.childhood,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("family.childhood")}}},[t._v(" Roll ")])])])]),t._v(" "),n("div",{staticClass:"column is-5"},[n("button",{staticClass:"button is-pulled-right",attrs:{type:"button"},on:{click:function(e){t.roll("siblings")}}},[t._v(" Roll all ")]),t._v(" "),n("h4",{staticClass:"title is-4"},[t._v(" Siblings ")]),t._v(" "),0===t.char.siblings.length?n("div",[t._v("You are the only child")]):t._e(),t._v(" "),t.char.siblings.length>0?n("div",{staticClass:"content"},[n("ul",t._l(t.char.siblings,function(e){return n("li",[t._v(" "+t._s(t.decodeRollTree("sibling",e," "))+" ")])}))]):t._e()])])]):t._e(),t._v(" "),4===t.page?n("div",[n("div",{staticClass:"columns"},[n("div",{staticClass:"column is-7"},[n("button",{staticClass:"button is-pulled-right",attrs:{type:"button"},on:{click:function(e){t.roll("motivation")}}},[t._v(" Roll all ")]),t._v(" "),n("h4",{staticClass:"title is-4"},[t._v(" Motivation ")]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Personality ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.motivation.personality,expression:"char.motivation.personality"}],attrs:{id:"motivation.personality"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.motivation,"personality",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.motivation.personality,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("motivation.personality")}}},[t._v(" Roll ")])])]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Person you value most ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.motivation.person,expression:"char.motivation.person"}],attrs:{id:"motivation.person"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.motivation,"person",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.motivation.person,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("motivation.person")}}},[t._v(" Roll ")])])]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" What do you value most ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.motivation.value,expression:"char.motivation.value"}],attrs:{id:"motivation.value"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.motivation,"value",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.motivation.value,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("motivation.value")}}},[t._v(" Roll ")])])]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" How do you feel about most people? ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.motivation.people,expression:"char.motivation.people"}],attrs:{id:"motivation.people"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.motivation,"people",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.motivation.people,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("motivation.people")}}},[t._v(" Roll ")])])]),t._v(" "),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v(" Your most valued posession ")]),t._v(" "),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.motivation.posession,expression:"char.motivation.posession"}],attrs:{id:"motivation.posession"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.$set(t.char.motivation,"posession",e.target.multiple?n:n[0])}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v(" Choose ")]),t._v(" "),t._l(t.options.motivation.posession,function(e,a){return n("option",{domProps:{value:a}},[t._v(" "+t._s(e)+" ")])})],2)]),t._v(" "),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("motivation.posession")}}},[t._v(" Roll ")])])])])])]):t._e(),t._v(" "),5===t.page?n("div",[n("div",{staticClass:"columns"},[n("div",{staticClass:"column is-12"},[n("h4",{staticClass:"title is-4"},[t._v(" Age ")]),t._v(" "),n("div",{staticClass:"field is-grouped"},[n("p",{staticClass:"control"},[n("spinner",{attrs:{id:"age",label:"Age","label-width":200,min:16,max:50},model:{value:t.char.lifepath.age,callback:function(e){t.$set(t.char.lifepath,"age",e)},expression:"char.lifepath.age"}})],1),t._v(" "),n("p",{staticClass:"control"},[n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("age")}}},[t._v(" Roll ")])])]),t._v(" "),n("hr"),t._v(" "),n("button",{staticClass:"button is-pulled-right",attrs:{type:"button"},on:{click:function(e){t.roll("lifepath")}}},[t._v(" Roll ")]),t._v(" "),n("h4",{staticClass:"title is-4"},[t._v(" Lifepath ")]),t._v(" "),0===t.char.lifepath.events.length?n("div",[t._v(" No events to show ")]):t._e(),t._v(" "),t.char.lifepath.events.length>0?n("div",{staticClass:"content"},[n("dl",t._l(t.char.lifepath.events,function(e,a){return n("dt",[n("strong",[t._v(" "+t._s(a+16)+": ")]),t._v(" "+t._s(t.decodeRollTree("lifePath",e," - "))+" ")])}))]):t._e()])])]):t._e(),t._v(" "),6===t.page?n("div",[n("div",{staticClass:"columns"},[n("div",{staticClass:"column is-12"},[n("div",{attrs:{id:"charSheet"}},[n("div",{staticClass:"columns"},[n("div",{staticClass:"column is-half"},[n("div",{staticClass:"columns is-gapless is-multiline"},[t._m(0),t._v(" "),n("div",{staticClass:"column is-10 entryField"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.char.handle,expression:"char.handle"}],domProps:{value:t.char.handle},on:{input:function(e){e.target.composing||t.$set(t.char,"handle",e.target.value)}}})]),t._v(" "),t._m(1),t._v(" "),n("div",{staticClass:"column is-11 plainText"},[t.char.role?n("span",{staticClass:"bold"},[t._v(t._s(this.options.roles[t.char.role].name))]):t._e()]),t._v(" "),t._m(2),t._v(" "),n("div",{staticClass:"column is-1 entryField centered"},[n("span",[t._v(t._s(t.char.characterPoints))])]),t._v(" "),n("div",{staticClass:"column is-1"}),t._v(" "),t._m(3),t._v(" "),n("div",{staticClass:"column is-1 entryField centered"},[n("span",[t._v(t._s(t.char.lifepath.age))])]),t._v(" "),n("div",{staticClass:"column is-5"}),t._v(" "),t._m(4),t._v(" "),n("div",{staticClass:"column is-10"}),t._v(" "),t._l(t.char.stats,function(e,a,o){return[n("div",{staticClass:"column is-1 bold"},[t._v(t._s(a))]),t._v(" "),n("div",{staticClass:"column is-2"},[t._v("[ "+t._s(e)+" ]")])]}),t._v(" "),n("div",{staticClass:"column is-1 bold"},[t._v("Run")]),t._v(" "),n("div",{staticClass:"column is-2"},[t._v("[ "+t._s(t.run)+" ]")]),t._v(" "),n("div",{staticClass:"column is-1 bold"},[t._v("Leap")]),t._v(" "),n("div",{staticClass:"column is-2"},[t._v("[ "+t._s(t.leap)+" ]")]),t._v(" "),n("div",{staticClass:"column is-1 bold"},[t._v("Lift")]),t._v(" "),n("div",{staticClass:"column is-2"},[t._v("[ "+t._s(t.lift)+" ]")]),t._v(" "),n("div",{staticClass:"column is-12"},[t._v(" ")]),t._v(" "),t._m(5),t._v(" "),n("div",{staticClass:"column is-1"}),t._v(" "),t._m(6),t._v(" "),n("div",{staticClass:"column is-7"}),t._v(" "),n("div",{staticClass:"column is-2 entryField centered"},[n("span",{staticClass:"bold"},[t._v(t._s(t.char.stats.BODY))])]),t._v(" "),n("div",{staticClass:"column is-1"}),t._v(" "),n("div",{staticClass:"column is-2 entryField centered"},[n("span",{staticClass:"bold"},[t._v(t._s(t.btm))])]),t._v(" "),n("div",{staticClass:"column is-7"}),t._v(" "),n("div",{staticClass:"column is-12"},[t._v(" ")])],2)]),t._v(" "),n("div",{staticClass:"column is-half"},[n("div",{staticClass:"columns is-gapless is-multiline"},[n("div",{staticClass:"column is-4 blackBack"}),t._v(" "),t._m(7),t._v(" "),n("div",{staticClass:"column is-4 blackBack"}),t._v(" "),n("div",{staticClass:"column is-5"},[n("div",{staticClass:"columns is-gapless is-multiline"},[t._m(8),t._v(" "),n("div",{staticClass:"column is-8"}),t._v(" "),t.char.role?n("div",{staticClass:"column is-12"},[n("b",[t._v(t._s(t.options.roles[t.char.role].ability)+":")]),t._v(" "+t._s(t.char.ability))]):t._e(),t._v(" "),t._l(t.char.careerSkills,function(e,a){return[0!=e.v?n("div",{staticClass:"column is-12"},[n("b",[t._v(t._s(t.options.skills[e.id].name)+":")]),t._v(" "+t._s(e.v))]):t._e()]}),t._v(" "),t._l(t.char.pickupSkills,function(e,a){return[0!=e.v?n("div",{staticClass:"column is-12"},[n("b",[t._v(t._s(t.options.skills[e.id].name)+":")]),t._v(" "+t._s(e.v))]):t._e()]})],2)]),t._v(" "),n("div",{staticClass:"column is-7"},[n("div",{staticClass:"columns is-gapless is-multiline"},[t._m(9),t._v(" "),n("div",{staticClass:"column is-8"}),t._v(" "),t._m(10),t._v(" "),n("div",{staticClass:"column is-6 plainText"},[n("span",[t._v(t._s(t.options.motivation.personality[t.char.motivation.personality]))])]),t._v(" "),t._m(11),t._v(" "),n("div",{staticClass:"column is-6 plainText"},[n("span",[t._v(t._s(t.options.motivation.person[t.char.motivation.person]))])]),t._v(" "),t._m(12),t._v(" "),n("div",{staticClass:"column is-6 plainText"},[n("span",[t._v(t._s(t.options.motivation.value[t.char.motivation.value]))])]),t._v(" "),t._m(13),t._v(" "),n("div",{staticClass:"column is-6 plainText"},[n("span",[t._v(t._s(t.options.motivation.people[t.char.motivation.people]))])]),t._v(" "),t._m(14),t._v(" "),n("div",{staticClass:"column is-6 plainText"},[n("span",[t._v(t._s(t.options.motivation.posession[t.char.motivation.posession]))])])])])])])]),t._v(" "),n("div",{staticClass:"columns"},[n("div",{staticClass:"column is-third"},[n("div",{staticClass:"columns is-gapless is-multiline"},[t._m(15),t._v(" "),n("div",{staticClass:"column is-8"}),t._v(" "),t._m(16),t._v(" "),n("div",{staticClass:"column is-8 plainText"},[n("span",[t._v(t._s(t.options.style.clothes[t.char.style.clothes]))])]),t._v(" "),t._m(17),t._v(" "),n("div",{staticClass:"column is-8 plainText"},[n("span",[t._v(t._s(t.options.style.hair[t.char.style.hair]))])]),t._v(" "),t._m(18),t._v(" "),n("div",{staticClass:"column is-8 plainText"},[n("span",[t._v(t._s(t.options.style.affectations[t.char.style.affectations]))])]),t._v(" "),t._m(19),t._v(" "),n("div",{staticClass:"column is-8 plainText"},[-1!=t.char.origin?n("span",[t._v(t._s(t.options.origin[t.char.origin].name))]):t._e()]),t._v(" "),t._m(20),t._v(" "),n("div",{staticClass:"column is-8 plainText"},[-1!=t.char.origin?n("span",[t._v(t._s(t.options.origin[t.char.origin].languages[t.char.language]))]):t._e()])])]),t._v(" "),n("div",{staticClass:"column is-third"},[n("div",{staticClass:"columns is-gapless is-multiline"},[t._m(21),t._v(" "),n("div",{staticClass:"column is-8"}),t._v(" "),t._m(22),t._v(" "),n("div",{staticClass:"column is-8 plainText"},[n("span",[t._v(t._s(t.options.family.rank[t.char.family.rank]))])]),t._v(" "),t._m(23),t._v(" "),n("div",{staticClass:"column is-8 plainText"},[n("span",[t._v(t._s(t.options.family.parents[t.char.family.parents]))])]),t._v(" "),t._m(24),t._v(" "),n("div",{staticClass:"column is-8 plainText"},[n("span",[t._v(t._s(t.options.family.status[t.char.family.status]))])]),t._v(" "),t._m(25),t._v(" "),n("div",{staticClass:"column is-8 plainText"},[n("span",[t._v(t._s(t.options.family.childhood[t.char.family.childhood]))])])])]),t._v(" "),n("div",{staticClass:"column is-third"},[n("div",{staticClass:"columns is-gapless is-multiline"},[t._m(26),t._v(" "),n("div",{staticClass:"column is-1"}),t._v(" "),t._m(27),t._v(" "),n("div",{staticClass:"column is-2 entryField centered"},[n("span",[t._v(t._s(t.siblingGenderCount(0)))])]),t._v(" "),n("div",{staticClass:"column is-1"}),t._v(" "),t._m(28),t._v(" "),n("div",{staticClass:"column is-2 entryField centered"},[n("span",[t._v(t._s(t.siblingGenderCount(1)))])]),t._v(" "),n("div",{staticClass:"column is-2"}),t._v(" "),0===t.char.siblings.length?n("div",{staticClass:"column is-12"},[t._v("You are the only child")]):t._e(),t._v(" "),t.char.siblings.length>0?n("div",{staticClass:"content column is-12"},[n("ul",t._l(t.char.siblings,function(e){return n("li",[t._v(" "+t._s(t.decodeRollTree("sibling",e," "))+" ")])}))]):t._e()])])]),t._v(" "),n("div",{staticClass:"columns is-gapless is-multiline"},[t._m(29),t._v(" "),n("div",{staticClass:"column is-10"}),t._v(" "),t.char.lifepath.events.length>0?n("div",{staticClass:"column is-12 content"},[n("dl",t._l(t.char.lifepath.events,function(e,a){return n("dt",[n("strong",[t._v(" "+t._s(a+16)+": ")]),t._v(" "+t._s(t.decodeRollTree("lifePath",e," - "))+" ")])}))]):t._e()]),t._v(" "),n("div",{staticClass:"columns is-gapless is-multiline"},[t._m(30),t._v(" "),n("div",{staticClass:"column is-11"}),t._v(" "),n("div",{staticClass:"column is-12"},[n("textarea",{directives:[{name:"model",rawName:"v-model",value:t.char.story,expression:"char.story"}],staticClass:"entryField",domProps:{value:t.char.story},on:{input:function(e){e.target.composing||t.$set(t.char,"story",e.target.value)}}})])])])])])]):t._e()])])])])},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-2 blackBox"},[n("span",[t._v("Handle")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-1 blackBox"},[n("span",[t._v("Role")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-3 blackBox"},[n("span",[t._v("Character points")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-1 blackBox"},[n("span",[t._v("Age")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-2 blackBox"},[n("span",[t._v("Stats")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-2 blackBox centered"},[n("span",[t._v("Save")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-2 blackBox centered"},[n("span",[t._v("BTM")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 centered blackBack"},[n("img",{attrs:{src:"CyberPunk.gif"}})])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 blackBox"},[n("span",[t._v("Skills")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 blackBox"},[n("span",[t._v("Motivation")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-6 bold"},[n("span",[t._v("Personality")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-6 bold"},[n("span",[t._v("Person you value most")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-6 bold"},[n("span",[t._v("What do you value most?")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-6 bold"},[n("span",[t._v("How do you feel about most people?")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-6 bold"},[n("span",[t._v("Your most valued posession")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-3 blackBox"},[n("span",[t._v("Style")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 bold"},[n("span",[t._v("Clothes")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 bold"},[n("span",[t._v("Hair")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 bold"},[n("span",[t._v("Affections")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 bold"},[n("span",[t._v("Ethnicity")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 bold"},[n("span",[t._v("Language")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-3 blackBox"},[n("span",[t._v("Family")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 bold"},[n("span",[t._v("Family Rank")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 bold"},[n("span",[t._v("Parents")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 bold"},[n("span",[t._v("Family status ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-4 bold"},[n("span",[t._v("Childhood Rank")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-3 blackBox"},[n("span",[t._v("Siblings")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-1 bold"},[n("span",[n("i",{staticClass:"fa fa-mars",attrs:{"aria-hidden":"true"}})])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-1 bold"},[n("span",[n("i",{staticClass:"fa fa-venus",attrs:{"aria-hidden":"true"}})])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-2 blackBox"},[n("span",[t._v("Life events")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"column is-1 blackBox"},[n("span",[t._v("Story")])])}],name:"app",components:{spinner:zi},data:function(){return{options:Wi,pages:["Stats","Role and Skills","Style","Family","Motivation","Lifepath","Character sheet"],page:6,char:{handle:"",story:"",role:void 0,characterPoints:60,stats:{INT:4,REF:4,TECH:4,COOL:4,ATTR:4,LUCK:4,MA:4,BODY:4,EMP:4},ability:1,careerSkills:[],pickupSkills:[],style:{clothes:-1,hair:-1,affectations:-1},origin:-1,language:-1,family:{rank:-1,parents:-1,status:-1,childhood:-1},siblings:[],motivation:{personality:-1,person:-1,value:-1,people:-1,posession:-1},lifepath:{age:21,events:[]}}}},computed:{cpSpent:function(){return this.char.stats.INT+this.char.stats.REF+this.char.stats.TECH+this.char.stats.COOL+this.char.stats.ATTR+this.char.stats.LUCK+this.char.stats.MA+this.char.stats.BODY+this.char.stats.EMP},cpLeft:function(){return this.char.characterPoints-this.cpSpent},run:function(){return 3*this.char.stats.MA},leap:function(){return this.run/4},lift:function(){return 40*this.char.stats.BODY},btm:function(){var t=this.char.stats.BODY;return t<=2?0:t<=4?-1:t<=7?-2:t<=9?-3:-4},careerSkillPointsLeft:function(){return 40-this.char.ability-this.char.careerSkills.reduce(function(t,e){return t+e.v},0)},pickupSkillPointsLeft:function(){return this.char.stats.INT+this.char.stats.REF-this.char.pickupSkills.reduce(function(t,e){return t+e.v},0)},pickupSkillsAvailable:function(){return this.options.skills.map(function(t,e){return{id:e,stat:t.stat,name:t.name}},this).filter(function(t,e){return!(this.char.careerSkills.some(function(e){return e.id===t.id},this)||this.char.pickupSkills.some(function(e){return e.id===t.id},this))},this)}},watch:{cpLeft:function(){for(;this.cpLeft<0;)this.char.stats.INT=Math.max(this.char.stats.INT-1,1),this.char.stats.REF=Math.max(this.char.stats.REF-1,1),this.char.stats.TECH=Math.max(this.char.stats.TECH-1,1),this.char.stats.COOL=Math.max(this.char.stats.COOL-1,1),this.char.stats.ATTR=Math.max(this.char.stats.ATTR-1,1),this.char.stats.LUCK=Math.max(this.char.stats.LUCK-1,1),this.char.stats.MA=Math.max(this.char.stats.MA-1,1),this.char.stats.BODY=Math.max(this.char.stats.BODY-1,1),this.char.stats.EMP=Math.max(this.char.stats.EMP-1,1)},pickupSkillPointsLeft:function(){for(;this.pickupSkillPointsLeft<0;)this.char.pickupSkills.forEach(function(t){t.v=Math.max(t.v-1,0)})}},methods:{setRole:function(t){t!==this.char.role&&(console.log("resetting the skills"),this.char.ability=1,this.char.careerSkills=[],this.char.pickupSkills=[],this.options.roles[t].skills.forEach(function(t){this.char.careerSkills.push({id:t,v:0})},this),this.char.role=t)},d:function(t){return Math.floor(Math.random()*t+1)},roll:function(t){switch(t){case"cp":n=0;for(e=0;e<9;e++)n+=this.d(10);this.char.characterPoints=n;break;case"style":n=this.d(10)-1;this.char.style.clothes=n,n=this.d(10)-1,this.char.style.hair=n,n=this.d(10)-1,this.char.style.affectations=n;break;case"style.clothes":n=this.d(10)-1;this.char.style.clothes=n;break;case"style.hair":n=this.d(10)-1;this.char.style.hair=n;break;case"style.affectations":n=this.d(10)-1;this.char.style.affectations=n;break;case"origin":n=this.d(10)-1;this.char.origin=n,this.char.language=-1;break;case"family":n=this.d(10)-1;this.char.family.rank=n,n=this.d(10)-1,this.char.family.parents=n,n=this.d(10)-1,this.char.family.status=n,n=this.d(10)-1,this.char.family.childhood=n;break;case"family.rank":n=this.d(10)-1;this.char.family.rank=n;break;case"family.parents":n=this.d(10)-1;this.char.family.parents=n;break;case"family.status":n=this.d(10)-1;this.char.family.status=n;break;case"family.childhood":n=this.d(10)-1;this.char.family.childhood=n;break;case"siblings":if(this.char.siblings=[],(n=this.d(10))<8)for(var e=0;e<n;e++)this.char.siblings.push(this.traverseRollTree("sibling"));break;case"motivation":n=this.d(10)-1;this.char.motivation.personality=n,n=this.d(10)-1,this.char.motivation.person=n,n=this.d(10)-1,this.char.motivation.value=n,n=this.d(10)-1,this.char.motivation.people=n,n=this.d(10)-1,this.char.motivation.posession=n;break;case"motivation.personality":n=this.d(10)-1;this.char.motivation.personality=n;break;case"motivation.person":n=this.d(10)-1;this.char.motivation.person=n;break;case"motivation.value":n=this.d(10)-1;this.char.motivation.value=n;break;case"motivation.people":n=this.d(10)-1;this.char.motivation.people=n;break;case"motivation.posession":n=this.d(10)-1;this.char.motivation.posession=n;break;case"age":var n=this.d(6)+this.d(6)+16;this.char.lifepath.age=n;break;case"lifepath":this.char.lifepath.events=[];for(var a=16;a<=this.char.lifepath.age;a++){var o=this.traverseRollTree("lifePath");this.char.lifepath.events.push(o)}}},traverseRollTree(t,e=10){const n=this.options.rollTree;for(var a=[],o=t,i=e;o;){var s=this.d(i),r=n[o].findIndex(function(t){return t.rolls.includes(s)});a.push(r);var l=n[o][r];o=l.next,i=l.nextDie||10}return a},decodeRollTree(t,e,n){const a=this.options.rollTree;var o=t;return e.reduce(function(t,e){var i=a[o][e];return o=i.next,t+=i.text+n},"").slice(0,-n.length)},addPickupSkill:function(t){var e=Number(t.target.value);this.char.pickupSkills.push({id:e,v:0}),t.target.value=-1},removeZeroPickupSkills:function(){this.char.pickupSkills=this.char.pickupSkills.filter(function(t){return t.v>0},this)},originChanged:function(){this.char.language=-1},importCharacter(t){var e=t.target.files[0];console.log(e);var n=new FileReader;self=this,n.addEventListener("loadend",function(){var t=n.result,e=qi.decompressFromUTF16(t);if(console.log(e),null!==e){var a=JSON.parse(e);self.$set(self,"char",a)}else alert("file cannot be decoded")}),n.readAsText(e)},exportCharacter(){var t=JSON.stringify(this.char);console.log(t);var e=qi.compressToUTF16(t);console.log(e);var n=new Blob([e],{type:"text/plain;charset=utf-16"}),a=prompt("File name:","character.txt");null!==a&&Ki(n,a)},siblingGenderCount:function(t){return this.char.siblings.length>0?this.char.siblings.reduce(function(e,n){return e+(n[1]==t?1:0)},0):0}}};new Me({el:"#app",render:function(t){return t(Ji)}})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
