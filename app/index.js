!function(){"use strict";function t(t){return void 0===t||null===t}function e(t){return void 0!==t&&null!==t}function n(t){return!0===t}function o(t){return!1===t}function r(t){return"string"==typeof t||"number"==typeof t||"boolean"==typeof t}function a(t){return null!==t&&"object"==typeof t}function i(t){return"[object Object]"===Gn.call(t)}function s(t){return"[object RegExp]"===Gn.call(t)}function l(t){var e=parseFloat(t);return e>=0&&Math.floor(e)===e&&isFinite(t)}function c(t){return null==t?"":"object"==typeof t?JSON.stringify(t,null,2):String(t)}function u(t){var e=parseFloat(t);return isNaN(e)?t:e}function d(t,e){for(var n=Object.create(null),o=t.split(","),r=0;r<o.length;r++)n[o[r]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}function p(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}function f(t,e){return Zn.call(t,e)}function h(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}function v(t,e){function n(n){var o=arguments.length;return o?o>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function m(t,e){e=e||0;for(var n=t.length-e,o=new Array(n);n--;)o[n]=t[n+e];return o}function y(t,e){for(var n in e)t[n]=e[n];return t}function g(t){for(var e={},n=0;n<t.length;n++)t[n]&&y(e,t[n]);return e}function b(t,e,n){}function _(t,e){if(t===e)return!0;var n=a(t),o=a(e);if(!n||!o)return!n&&!o&&String(t)===String(e);try{var r=Array.isArray(t),i=Array.isArray(e);if(r&&i)return t.length===e.length&&t.every(function(t,n){return _(t,e[n])});if(r||i)return!1;var s=Object.keys(t),l=Object.keys(e);return s.length===l.length&&s.every(function(n){return _(t[n],e[n])})}catch(t){return!1}}function x(t,e){for(var n=0;n<t.length;n++)if(_(t[n],e))return n;return-1}function C(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}function k(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function w(t,e,n,o){Object.defineProperty(t,e,{value:n,enumerable:!!o,writable:!0,configurable:!0})}function A(t){if(!uo.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}function T(t,e,n){if(lo.errorHandler)lo.errorHandler.call(null,t,e,n);else{if(po("Error in "+n+': "'+t.toString()+'"',e),!xo||"undefined"==typeof console)throw t;console.error(t)}}function O(t){return"function"==typeof t&&/native code/.test(t.toString())}function S(t){Do.target&&Bo.push(Do.target),Do.target=t}function E(){Do.target=Bo.pop()}function $(t,e,n){t.__proto__=e}function P(t,e,n){for(var o=0,r=n.length;o<r;o++){var a=n[o];w(t,a,e[a])}}function M(t,e){if(a(t)){var n;return f(t,"__ob__")&&t.__ob__ instanceof Wo?n=t.__ob__:Vo.shouldConvert&&!Io()&&(Array.isArray(t)||i(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new Wo(t)),e&&n&&n.vmCount++,n}}function N(t,e,n,o,r){var a=new Do,i=Object.getOwnPropertyDescriptor(t,e);if(!i||!1!==i.configurable){var s=i&&i.get,l=i&&i.set,c=!r&&M(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return Do.target&&(a.depend(),c&&(c.dep.depend(),Array.isArray(e)&&F(e))),e},set:function(e){var i=s?s.call(t):n;e===i||e!==e&&i!==i||(o&&o(),l?l.call(t,e):n=e,c=!r&&M(e),a.notify())}})}}function I(t,e,n){if(Array.isArray(t)&&l(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(f(t,e))return t[e]=n,n;var o=t.__ob__;return t._isVue||o&&o.vmCount?(po("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):o?(N(o.value,e,n),o.dep.notify(),n):(t[e]=n,n)}function L(t,e){if(Array.isArray(t)&&l(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount?po("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):f(t,e)&&(delete t[e],n&&n.dep.notify())}}function F(t){for(var e=void 0,n=0,o=t.length;n<o;n++)(e=t[n])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&F(e)}function R(t,e){if(!e)return t;for(var n,o,r,a=Object.keys(e),s=0;s<a.length;s++)o=t[n=a[s]],r=e[n],f(t,n)?i(o)&&i(r)&&R(o,r):I(t,n,r);return t}function j(t,e,n){return n?t||e?function(){var o="function"==typeof e?e.call(n):e,r="function"==typeof t?t.call(n):t;return o?R(o,r):r}:void 0:e?t?function(){return R("function"==typeof e?e.call(this):e,"function"==typeof t?t.call(this):t)}:e:t}function D(t,e){return e?t?t.concat(e):Array.isArray(e)?e:[e]:t}function B(t,e){var n=Object.create(t||null);return e?y(n,e):n}function H(t){for(var e in t.components){var n=e.toLowerCase();(Kn(n)||lo.isReservedTag(n))&&po("Do not use built-in or reserved HTML elements as component id: "+e)}}function Y(t){var e=t.props;if(e){var n,o,r={};if(Array.isArray(e))for(n=e.length;n--;)"string"==typeof(o=e[n])?r[Xn(o)]={type:null}:po("props must be strings when using array syntax.");else if(i(e))for(var a in e)o=e[a],r[Xn(a)]=i(o)?o:{type:o};t.props=r}}function U(t){var e=t.inject;if(Array.isArray(e))for(var n=t.inject={},o=0;o<e.length;o++)n[e[o]]=e[o]}function V(t){var e=t.directives;if(e)for(var n in e){var o=e[n];"function"==typeof o&&(e[n]={bind:o,update:o})}}function W(t,e,n){function o(o){var r=zo[o]||Go;l[o]=r(t[o],e[o],n,o)}H(e),"function"==typeof e&&(e=e.options),Y(e),U(e),V(e);var r=e.extends;if(r&&(t=W(t,r,n)),e.mixins)for(var a=0,i=e.mixins.length;a<i;a++)t=W(t,e.mixins[a],n);var s,l={};for(s in t)o(s);for(s in e)f(t,s)||o(s);return l}function z(t,e,n,o){if("string"==typeof n){var r=t[e];if(f(r,n))return r[n];var a=Xn(n);if(f(r,a))return r[a];var i=to(a);if(f(r,i))return r[i];var s=r[n]||r[a]||r[i];return o&&!s&&po("Failed to resolve "+e.slice(0,-1)+": "+n,t),s}}function q(t,e,n,o){var r=e[t],a=!f(n,t),i=n[t];if(Q(Boolean,r.type)&&(a&&!f(r,"default")?i=!1:Q(String,r.type)||""!==i&&i!==no(t)||(i=!0)),void 0===i){i=G(o,r,t);var s=Vo.shouldConvert;Vo.shouldConvert=!0,M(i),Vo.shouldConvert=s}return K(r,t,i,o,a),i}function G(t,e,n){if(f(e,"default")){var o=e.default;return a(o)&&po('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',t),t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"==typeof o&&"Function"!==Z(e.type)?o.call(t):o}}function K(t,e,n,o,r){if(t.required&&r)po('Missing required prop: "'+e+'"',o);else if(null!=n||t.required){var a=t.type,i=!a||!0===a,s=[];if(a){Array.isArray(a)||(a=[a]);for(var l=0;l<a.length&&!i;l++){var c=J(n,a[l]);s.push(c.expectedType||""),i=c.valid}}if(i){var u=t.validator;u&&(u(n)||po('Invalid prop: custom validator check failed for prop "'+e+'".',o))}else po('Invalid prop: type check failed for prop "'+e+'". Expected '+s.map(to).join(", ")+", got "+Object.prototype.toString.call(n).slice(8,-1)+".",o)}}function J(t,e){var n,o=Z(e);if(Ko.test(o)){var r=typeof t;(n=r===o.toLowerCase())||"object"!==r||(n=t instanceof e)}else n="Object"===o?i(t):"Array"===o?Array.isArray(t):t instanceof e;return{valid:n,expectedType:o}}function Z(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Q(t,e){if(!Array.isArray(e))return Z(e)===Z(t);for(var n=0,o=e.length;n<o;n++)if(Z(e[n])===Z(t))return!0;return!1}function X(t){return new ar(void 0,void 0,void 0,String(t))}function tt(t,e){var n=new ar(t.tag,t.data,t.children,t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return n.ns=t.ns,n.isStatic=t.isStatic,n.key=t.key,n.isComment=t.isComment,n.isCloned=!0,e&&t.children&&(n.children=et(t.children)),n}function et(t,e){for(var n=t.length,o=new Array(n),r=0;r<n;r++)o[r]=tt(t[r],e);return o}function nt(t){function e(){var t=arguments,n=e.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var o=n.slice(),r=0;r<o.length;r++)o[r].apply(null,t)}return e.fns=t,e}function ot(t,e){return t.plain?-1:e.plain?1:0}function rt(e,n,o,r,a){var i,s,l,c,u=[],d=!1;for(i in e)s=e[i],l=n[i],(c=cr(i)).plain||(d=!0),t(s)?po('Invalid handler for event "'+c.name+'": got '+String(s),a):t(l)?(t(s.fns)&&(s=e[i]=nt(s)),c.handler=s,u.push(c)):s!==l&&(l.fns=s,e[i]=l);if(u.length){d&&u.sort(ot);for(var p=0;p<u.length;p++){var f=u[p];o(f.name,f.handler,f.once,f.capture,f.passive)}}for(i in n)t(e[i])&&r((c=cr(i)).name,n[i],c.capture)}function at(o,r,a){function i(){a.apply(this,arguments),p(s.fns,i)}var s,l=o[r];t(l)?s=nt([i]):e(l.fns)&&n(l.merged)?(s=l).fns.push(i):s=nt([l,i]),s.merged=!0,o[r]=s}function it(n,o,r){var a=o.options.props;if(!t(a)){var i={},s=n.attrs,l=n.props;if(e(s)||e(l))for(var c in a){var u=no(c),d=c.toLowerCase();c!==d&&s&&f(s,d)&&fo('Prop "'+d+'" is passed to component '+ho(r||o)+', but the declared prop name is "'+c+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+u+'" instead of "'+c+'".'),st(i,l,c,u,!0)||st(i,s,c,u,!1)}return i}}function st(t,n,o,r,a){if(e(n)){if(f(n,o))return t[o]=n[o],a||delete n[o],!0;if(f(n,r))return t[o]=n[r],a||delete n[r],!0}return!1}function lt(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}function ct(t){return r(t)?[X(t)]:Array.isArray(t)?dt(t):void 0}function ut(t){return e(t)&&e(t.text)&&o(t.isComment)}function dt(o,a){var i,s,l,c=[];for(i=0;i<o.length;i++)t(s=o[i])||"boolean"==typeof s||(l=c[c.length-1],Array.isArray(s)?c.push.apply(c,dt(s,(a||"")+"_"+i)):r(s)?ut(l)?l.text+=String(s):""!==s&&c.push(X(s)):ut(s)&&ut(l)?c[c.length-1]=X(l.text+s.text):(n(o._isVList)&&e(s.tag)&&t(s.key)&&e(a)&&(s.key="__vlist"+a+"_"+i+"__"),c.push(s)));return c}function pt(t,e){return t.__esModule&&t.default&&(t=t.default),a(t)?e.extend(t):t}function ft(t,e,n,o,r){var a=lr();return a.asyncFactory=t,a.asyncMeta={data:e,context:n,children:o,tag:r},a}function ht(o,r,i){if(n(o.error)&&e(o.errorComp))return o.errorComp;if(e(o.resolved))return o.resolved;if(n(o.loading)&&e(o.loadingComp))return o.loadingComp;if(!e(o.contexts)){var s=o.contexts=[i],l=!0,c=function(){for(var t=0,e=s.length;t<e;t++)s[t].$forceUpdate()},u=C(function(t){o.resolved=pt(t,r),l||c()}),d=C(function(t){po("Failed to resolve async component: "+String(o)+(t?"\nReason: "+t:"")),e(o.errorComp)&&(o.error=!0,c())}),p=o(u,d);return a(p)&&("function"==typeof p.then?t(o.resolved)&&p.then(u,d):e(p.component)&&"function"==typeof p.component.then&&(p.component.then(u,d),e(p.error)&&(o.errorComp=pt(p.error,r)),e(p.loading)&&(o.loadingComp=pt(p.loading,r),0===p.delay?o.loading=!0:setTimeout(function(){t(o.resolved)&&t(o.error)&&(o.loading=!0,c())},p.delay||200)),e(p.timeout)&&setTimeout(function(){t(o.resolved)&&d("timeout ("+p.timeout+"ms)")},p.timeout))),l=!1,o.loading?o.loadingComp:o.resolved}o.contexts.push(i)}function vt(t){return t.isComment&&t.asyncFactory}function mt(t){if(Array.isArray(t))for(var n=0;n<t.length;n++){var o=t[n];if(e(o)&&(e(o.componentOptions)||vt(o)))return o}}function yt(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&_t(t,e)}function gt(t,e,n){n?sr.$once(t,e):sr.$on(t,e)}function bt(t,e){sr.$off(t,e)}function _t(t,e,n){sr=t,rt(e,n||{},gt,bt,t)}function xt(t,e){var n={};if(!t)return n;for(var o=[],r=0,a=t.length;r<a;r++){var i=t[r],s=i.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,i.context!==e&&i.functionalContext!==e||!s||null==s.slot)o.push(i);else{var l=i.data.slot,c=n[l]||(n[l]=[]);"template"===i.tag?c.push.apply(c,i.children):c.push(i)}}return o.every(Ct)||(n.default=o),n}function Ct(t){return t.isComment||" "===t.text}function kt(t,e){e=e||{};for(var n=0;n<t.length;n++)Array.isArray(t[n])?kt(t[n],e):e[t[n].key]=t[n].fn;return e}function wt(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}function At(t,e,n){t.$el=e,t.$options.render||(t.$options.render=lr,t.$options.template&&"#"!==t.$options.template.charAt(0)||t.$options.el||e?po("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",t):po("Failed to mount component: template or render function not defined.",t)),$t(t,"beforeMount");var o;return o=lo.performance&&nr?function(){var e=t._name,o=t._uid,r="vue-perf-start:"+o,a="vue-perf-end:"+o;nr(r);var i=t._render();nr(a),or(e+" render",r,a),nr(r),t._update(i,n),nr(a),or(e+" patch",r,a)}:function(){t._update(t._render(),n)},t._watcher=new xr(t,o,b),n=!1,null==t.$vnode&&(t._isMounted=!0,$t(t,"mounted")),t}function Tt(t,e,n,o,r){dr=!0;var a=!!(r||t.$options._renderChildren||o.data.scopedSlots||t.$scopedSlots!==co);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=r,t.$attrs=o.data&&o.data.attrs||co,t.$listeners=n||co,e&&t.$options.props){Vo.shouldConvert=!1;for(var i=t._props,s=t.$options._propKeys||[],l=0;l<s.length;l++){var c=s[l];i[c]=q(c,t.$options.props,e,t)}Vo.shouldConvert=!0,t.$options.propsData=e}if(n){var u=t.$options._parentListeners;t.$options._parentListeners=n,_t(t,n,u)}a&&(t.$slots=xt(r,o.context),t.$forceUpdate()),dr=!1}function Ot(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function St(t,e){if(e){if(t._directInactive=!1,Ot(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)St(t.$children[n]);$t(t,"activated")}}function Et(t,e){if(!(e&&(t._directInactive=!0,Ot(t))||t._inactive)){t._inactive=!0;for(var n=0;n<t.$children.length;n++)Et(t.$children[n]);$t(t,"deactivated")}}function $t(t,e){var n=t.$options[e];if(n)for(var o=0,r=n.length;o<r;o++)try{n[o].call(t)}catch(n){T(n,t,e+" hook")}t._hasHookEvent&&t.$emit("hook:"+e)}function Pt(){br=fr.length=hr.length=0,vr={},mr={},yr=gr=!1}function Mt(){gr=!0;var t,e;for(fr.sort(function(t,e){return t.id-e.id}),br=0;br<fr.length;br++)if(t=fr[br],e=t.id,vr[e]=null,t.run(),null!=vr[e]&&(mr[e]=(mr[e]||0)+1,mr[e]>pr)){po("You may have an infinite update loop "+(t.user?'in watcher with expression "'+t.expression+'"':"in a component render function."),t.vm);break}var n=hr.slice(),o=fr.slice();Pt(),Lt(n),Nt(o),Lo&&lo.devtools&&Lo.emit("flush")}function Nt(t){for(var e=t.length;e--;){var n=t[e],o=n.vm;o._watcher===n&&o._isMounted&&$t(o,"updated")}}function It(t){t._inactive=!1,hr.push(t)}function Lt(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,St(t[e],!0)}function Ft(t){var e=t.id;if(null==vr[e]){if(vr[e]=!0,gr){for(var n=fr.length-1;n>br&&fr[n].id>t.id;)n--;fr.splice(n+1,0,t)}else fr.push(t);yr||(yr=!0,Ro(Mt))}}function Rt(t){Cr.clear(),jt(t,Cr)}function jt(t,e){var n,o,r=Array.isArray(t);if((r||a(t))&&Object.isExtensible(t)){if(t.__ob__){var i=t.__ob__.dep.id;if(e.has(i))return;e.add(i)}if(r)for(n=t.length;n--;)jt(t[n],e);else for(n=(o=Object.keys(t)).length;n--;)jt(t[o[n]],e)}}function Dt(t,e,n){kr.get=function(){return this[e][n]},kr.set=function(t){this[e][n]=t},Object.defineProperty(t,n,kr)}function Bt(t){t._watchers=[];var e=t.$options;e.props&&Yt(t,e.props),e.methods&&Gt(t,e.methods),e.data?Ut(t):M(t._data={},!0),e.computed&&Wt(t,e.computed),e.watch&&e.watch!==Eo&&Kt(t,e.watch)}function Ht(t,e){i(t.$options[e])||po('component option "'+e+'" should be an object.',t)}function Yt(t,e){var n=t.$options.propsData||{},o=t._props={},r=t.$options._propKeys=[],a=!t.$parent;Vo.shouldConvert=a;for(var i in e)!function(a){r.push(a);var i=q(a,e,n,t);(Jn(a)||lo.isReservedAttr(a))&&po('"'+a+'" is a reserved attribute and cannot be used as component prop.',t),N(o,a,i,function(){t.$parent&&!dr&&po("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',t)}),a in t||Dt(t,"_props",a)}(i);Vo.shouldConvert=!0}function Ut(t){var e=t.$options.data;i(e=t._data="function"==typeof e?Vt(e,t):e||{})||(e={},po("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",t));for(var n=Object.keys(e),o=t.$options.props,r=t.$options.methods,a=n.length;a--;){var s=n[a];r&&f(r,s)&&po('Method "'+s+'" has already been defined as a data property.',t),o&&f(o,s)?po('The data property "'+s+'" is already declared as a prop. Use prop default value instead.',t):k(s)||Dt(t,"_data",s)}M(e,!0)}function Vt(t,e){try{return t.call(e)}catch(t){return T(t,e,"data()"),{}}}function Wt(t,e){Ht(t,"computed");var n=t._computedWatchers=Object.create(null),o=Io();for(var r in e){var a=e[r],i="function"==typeof a?a:a.get;null==i&&po('Getter is missing for computed property "'+r+'".',t),o||(n[r]=new xr(t,i||b,b,wr)),r in t?r in t.$data?po('The computed property "'+r+'" is already defined in data.',t):t.$options.props&&r in t.$options.props&&po('The computed property "'+r+'" is already defined as a prop.',t):zt(t,r,a)}}function zt(t,e,n){var o=!Io();"function"==typeof n?(kr.get=o?qt(e):n,kr.set=b):(kr.get=n.get?o&&!1!==n.cache?qt(e):n.get:b,kr.set=n.set?n.set:b),kr.set===b&&(kr.set=function(){po('Computed property "'+e+'" was assigned to but it has no setter.',this)}),Object.defineProperty(t,e,kr)}function qt(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),Do.target&&e.depend(),e.value}}function Gt(t,e){Ht(t,"methods");var n=t.$options.props;for(var o in e)null==e[o]&&po('Method "'+o+'" has an undefined value in the component definition. Did you reference the function correctly?',t),n&&f(n,o)&&po('Method "'+o+'" has already been defined as a prop.',t),o in t&&k(o)&&po('Method "'+o+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),t[o]=null==e[o]?b:v(e[o],t)}function Kt(t,e){Ht(t,"watch");for(var n in e){var o=e[n];if(Array.isArray(o))for(var r=0;r<o.length;r++)Jt(t,n,o[r]);else Jt(t,n,o)}}function Jt(t,e,n,o){return i(n)&&(o=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,o)}function Zt(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}function Qt(t){var e=Xt(t.$options.inject,t);e&&(Vo.shouldConvert=!1,Object.keys(e).forEach(function(n){N(t,n,e[n],function(){po('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',t)})}),Vo.shouldConvert=!0)}function Xt(t,e){if(t){for(var n=Object.create(null),o=Fo?Reflect.ownKeys(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}):Object.keys(t),r=0;r<o.length;r++){for(var a=o[r],i=t[a],s=e;s;){if(s._provided&&i in s._provided){n[a]=s._provided[i];break}s=s.$parent}s||po('Injection "'+a+'" not found',e)}return n}}function te(t,n,o,r,a){var i={},s=t.options.props;if(e(s))for(var l in s)i[l]=q(l,s,n||co);else e(o.attrs)&&ee(i,o.attrs),e(o.props)&&ee(i,o.props);var c=Object.create(r),u=t.options.render.call(null,function(t,e,n,o){return se(c,t,e,n,o,!0)},{data:o,props:i,children:a,parent:r,listeners:o.on||co,injections:Xt(t.options.inject,r),slots:function(){return xt(a,r)}});return u instanceof ar&&(u.functionalContext=r,u.functionalOptions=t.options,o.slot&&((u.data||(u.data={})).slot=o.slot)),u}function ee(t,e){for(var n in e)t[Xn(n)]=e[n]}function ne(o,r,i,s,l){if(!t(o)){var c=i.$options._base;if(a(o)&&(o=c.extend(o)),"function"==typeof o){var u;if(t(o.cid)&&(u=o,void 0===(o=ht(u,c,i))))return ft(u,r,i,s,l);r=r||{},Ce(o),e(r.model)&&ie(o.options,r);var d=it(r,o,l);if(n(o.options.functional))return te(o,d,r,i,s);var p=r.on;if(r.on=r.nativeOn,n(o.options.abstract)){var f=r.slot;r={},f&&(r.slot=f)}re(r);var h=o.options.name||l;return new ar("vue-component-"+o.cid+(h?"-"+h:""),r,void 0,void 0,void 0,i,{Ctor:o,propsData:d,listeners:p,tag:l,children:s},u)}po("Invalid Component definition: "+String(o),i)}}function oe(t,n,o,r){var a=t.componentOptions,i={_isComponent:!0,parent:n,propsData:a.propsData,_componentTag:a.tag,_parentVnode:t,_parentListeners:a.listeners,_renderChildren:a.children,_parentElm:o||null,_refElm:r||null},s=t.data.inlineTemplate;return e(s)&&(i.render=s.render,i.staticRenderFns=s.staticRenderFns),new a.Ctor(i)}function re(t){t.hook||(t.hook={});for(var e=0;e<Tr.length;e++){var n=Tr[e],o=t.hook[n],r=Ar[n];t.hook[n]=o?ae(r,o):r}}function ae(t,e){return function(n,o,r,a){t(n,o,r,a),e(n,o,r,a)}}function ie(t,n){var o=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(n.props||(n.props={}))[o]=n.model.value;var a=n.on||(n.on={});e(a[r])?a[r]=[n.model.callback].concat(a[r]):a[r]=n.model.callback}function se(t,e,o,a,i,s){return(Array.isArray(o)||r(o))&&(i=a,a=o,o=void 0),n(s)&&(i=Sr),le(t,e,o,a,i)}function le(t,n,o,a,i){if(e(o)&&e(o.__ob__))return po("Avoid using observed data object as vnode data: "+JSON.stringify(o)+"\nAlways create fresh vnode data objects in each render!",t),lr();if(e(o)&&e(o.is)&&(n=o.is),!n)return lr();e(o)&&e(o.key)&&!r(o.key)&&po("Avoid using non-primitive value as key, use string/number value instead.",t),Array.isArray(a)&&"function"==typeof a[0]&&((o=o||{}).scopedSlots={default:a[0]},a.length=0),i===Sr?a=ct(a):i===Or&&(a=lt(a));var s,l;if("string"==typeof n){var c;l=t.$vnode&&t.$vnode.ns||lo.getTagNamespace(n),s=lo.isReservedTag(n)?new ar(lo.parsePlatformTagName(n),o,a,void 0,void 0,t):e(c=z(t.$options,"components",n))?ne(c,o,t,a,n):new ar(n,o,a,void 0,void 0,t)}else s=ne(n,o,t,a);return e(s)?(l&&ce(s,l),s):lr()}function ce(n,o){if(n.ns=o,"foreignObject"!==n.tag&&e(n.children))for(var r=0,a=n.children.length;r<a;r++){var i=n.children[r];e(i.tag)&&t(i.ns)&&ce(i,o)}}function ue(t,n){var o,r,i,s,l;if(Array.isArray(t)||"string"==typeof t)for(o=new Array(t.length),r=0,i=t.length;r<i;r++)o[r]=n(t[r],r);else if("number"==typeof t)for(o=new Array(t),r=0;r<t;r++)o[r]=n(r+1,r);else if(a(t))for(s=Object.keys(t),o=new Array(s.length),r=0,i=s.length;r<i;r++)l=s[r],o[r]=n(t[l],l,r);return e(o)&&(o._isVList=!0),o}function de(t,e,n,o){var r=this.$scopedSlots[t];if(r)return n=n||{},o&&(n=y(y({},o),n)),r(n)||e;var a=this.$slots[t];return a&&(a._rendered&&po('Duplicate presence of slot "'+t+'" found in the same render tree - this will likely cause render errors.',this),a._rendered=!0),a||e}function pe(t){return z(this.$options,"filters",t,!0)||ro}function fe(t,e,n){var o=lo.keyCodes[e]||n;return Array.isArray(o)?-1===o.indexOf(t):o!==t}function he(t,e,n,o,r){if(n)if(a(n)){Array.isArray(n)&&(n=g(n));var i,s=function(a){if("class"===a||"style"===a||Jn(a))i=t;else{var s=t.attrs&&t.attrs.type;i=o||lo.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}a in i||(i[a]=n[a],r&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var l in n)s(l)}else po("v-bind without argument expects an Object or Array value",this);return t}function ve(t,e){var n=this._staticTrees[t];return n&&!e?Array.isArray(n)?et(n):tt(n):(n=this._staticTrees[t]=this.$options.staticRenderFns[t].call(this._renderProxy),ye(n,"__static__"+t,!1),n)}function me(t,e,n){return ye(t,"__once__"+e+(n?"_"+n:""),!0),t}function ye(t,e,n){if(Array.isArray(t))for(var o=0;o<t.length;o++)t[o]&&"string"!=typeof t[o]&&ge(t[o],e+"_"+o,n);else ge(t,e,n)}function ge(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function be(t,e){if(e)if(i(e)){var n=t.on=t.on?y({},t.on):{};for(var o in e){var r=n[o],a=e[o];n[o]=r?[].concat(a,r):a}}else po("v-on without argument expects an Object value",this);return t}function _e(t){t._vnode=null,t._staticTrees=null;var e=t.$vnode=t.$options._parentVnode,n=e&&e.context;t.$slots=xt(t.$options._renderChildren,n),t.$scopedSlots=co,t._c=function(e,n,o,r){return se(t,e,n,o,r,!1)},t.$createElement=function(e,n,o,r){return se(t,e,n,o,r,!0)};var o=e&&e.data;N(t,"$attrs",o&&o.attrs||co,function(){!dr&&po("$attrs is readonly.",t)},!0),N(t,"$listeners",t.$options._parentListeners||co,function(){!dr&&po("$listeners is readonly.",t)},!0)}function xe(t,e){var n=t.$options=Object.create(t.constructor.options);n.parent=e.parent,n.propsData=e.propsData,n._parentVnode=e._parentVnode,n._parentListeners=e._parentListeners,n._renderChildren=e._renderChildren,n._componentTag=e._componentTag,n._parentElm=e._parentElm,n._refElm=e._refElm,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}function Ce(t){var e=t.options;if(t.super){var n=Ce(t.super);if(n!==t.superOptions){t.superOptions=n;var o=ke(t);o&&y(t.extendOptions,o),(e=t.options=W(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function ke(t){var e,n=t.options,o=t.extendOptions,r=t.sealedOptions;for(var a in n)n[a]!==r[a]&&(e||(e={}),e[a]=we(n[a],o[a],r[a]));return e}function we(t,e,n){if(Array.isArray(t)){var o=[];n=Array.isArray(n)?n:[n],e=Array.isArray(e)?e:[e];for(var r=0;r<t.length;r++)(e.indexOf(t[r])>=0||n.indexOf(t[r])<0)&&o.push(t[r]);return o}return t}function Ae(t){this instanceof Ae||po("Vue is a constructor and should be called with the `new` keyword"),this._init(t)}function Te(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=m(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}function Oe(t){t.mixin=function(t){return this.options=W(this.options,t),this}}function Se(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,o=n.cid,r=t._Ctor||(t._Ctor={});if(r[o])return r[o];var a=t.name||n.options.name;/^[a-zA-Z][\w-]*$/.test(a)||po('Invalid component name: "'+a+'". Component names can only contain alphanumeric characters and the hyphen, and must start with a letter.');var i=function(t){this._init(t)};return i.prototype=Object.create(n.prototype),i.prototype.constructor=i,i.cid=e++,i.options=W(n.options,t),i.super=n,i.options.props&&Ee(i),i.options.computed&&$e(i),i.extend=n.extend,i.mixin=n.mixin,i.use=n.use,io.forEach(function(t){i[t]=n[t]}),a&&(i.options.components[a]=i),i.superOptions=n.options,i.extendOptions=t,i.sealedOptions=y({},i.options),r[o]=i,i}}function Ee(t){var e=t.options.props;for(var n in e)Dt(t.prototype,"_props",n)}function $e(t){var e=t.options.computed;for(var n in e)zt(t.prototype,n,e[n])}function Pe(t){io.forEach(function(e){t[e]=function(t,n){return n?("component"===e&&lo.isReservedTag(t)&&po("Do not use built-in or reserved HTML elements as component id: "+t),"component"===e&&i(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}})}function Me(t){return t&&(t.Ctor.options.name||t.tag)}function Ne(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!s(t)&&t.test(e)}function Ie(t,e,n){for(var o in t){var r=t[o];if(r){var a=Me(r.componentOptions);a&&!n(a)&&(r!==e&&Le(r),t[o]=null)}}}function Le(t){t&&t.componentInstance.$destroy()}function Fe(t){for(var n=t.data,o=t,r=t;e(r.componentInstance);)(r=r.componentInstance._vnode).data&&(n=Re(r.data,n));for(;e(o=o.parent);)o.data&&(n=Re(n,o.data));return je(n.staticClass,n.class)}function Re(t,n){return{staticClass:De(t.staticClass,n.staticClass),class:e(t.class)?[t.class,n.class]:n.class}}function je(t,n){return e(t)||e(n)?De(t,Be(n)):""}function De(t,e){return t?e?t+" "+e:t:e||""}function Be(t){return Array.isArray(t)?He(t):a(t)?Ye(t):"string"==typeof t?t:""}function He(t){for(var n,o="",r=0,a=t.length;r<a;r++)e(n=Be(t[r]))&&""!==n&&(o&&(o+=" "),o+=n);return o}function Ye(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}function Ue(t){if("string"==typeof t){var e=document.querySelector(t);return e||(po("Cannot find element: "+t),document.createElement("div"))}return t}function Ve(t,e){var n=t.data.ref;if(n){var o=t.context,r=t.componentInstance||t.elm,a=o.$refs;e?Array.isArray(a[n])?p(a[n],r):a[n]===r&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(r)<0&&a[n].push(r):a[n]=[r]:a[n]=r}}function We(o,r){return o.key===r.key&&(o.tag===r.tag&&o.isComment===r.isComment&&e(o.data)===e(r.data)&&ze(o,r)||n(o.isAsyncPlaceholder)&&o.asyncFactory===r.asyncFactory&&t(r.asyncFactory.error))}function ze(t,n){if("input"!==t.tag)return!0;var o,r=e(o=t.data)&&e(o=o.attrs)&&o.type,a=e(o=n.data)&&e(o=o.attrs)&&o.type;return r===a||qr(r)&&qr(a)}function qe(t,n,o){var r,a,i={};for(r=n;r<=o;++r)e(a=t[r].key)&&(i[a]=r);return i}function Ge(t,e){(t.data.directives||e.data.directives)&&Ke(t,e)}function Ke(t,e){var n,o,r,a=t===Jr,i=e===Jr,s=Je(t.data.directives,t.context),l=Je(e.data.directives,e.context),c=[],u=[];for(n in l)o=s[n],r=l[n],o?(r.oldValue=o.value,Qe(r,"update",e,t),r.def&&r.def.componentUpdated&&u.push(r)):(Qe(r,"bind",e,t),r.def&&r.def.inserted&&c.push(r));if(c.length){var d=function(){for(var n=0;n<c.length;n++)Qe(c[n],"inserted",e,t)};a?at(e.data.hook||(e.data.hook={}),"insert",d):d()}if(u.length&&at(e.data.hook||(e.data.hook={}),"postpatch",function(){for(var n=0;n<u.length;n++)Qe(u[n],"componentUpdated",e,t)}),!a)for(n in s)l[n]||Qe(s[n],"unbind",t,t,i)}function Je(t,e){var n=Object.create(null);if(!t)return n;var o,r;for(o=0;o<t.length;o++)(r=t[o]).modifiers||(r.modifiers=Xr),n[Ze(r)]=r,r.def=z(e.$options,"directives",r.name,!0);return n}function Ze(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Qe(t,e,n,o,r){var a=t.def&&t.def[e];if(a)try{a(n.elm,t,n,o,r)}catch(o){T(o,n.context,"directive "+t.name+" "+e+" hook")}}function Xe(n,o){var r=o.componentOptions;if(!(e(r)&&!1===r.Ctor.options.inheritAttrs||t(n.data.attrs)&&t(o.data.attrs))){var a,i,s=o.elm,l=n.data.attrs||{},c=o.data.attrs||{};e(c.__ob__)&&(c=o.data.attrs=y({},c));for(a in c)i=c[a],l[a]!==i&&tn(s,a,i);wo&&c.value!==l.value&&tn(s,"value",c.value);for(a in l)t(c[a])&&(Dr(a)?s.removeAttributeNS(jr,Br(a)):Fr(a)||s.removeAttribute(a))}}function tn(t,e,n){Rr(e)?Hr(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Fr(e)?t.setAttribute(e,Hr(n)||"false"===n?"false":"true"):Dr(e)?Hr(n)?t.removeAttributeNS(jr,Br(e)):t.setAttributeNS(jr,e,n):Hr(n)?t.removeAttribute(e):t.setAttribute(e,n)}function en(n,o){var r=o.elm,a=o.data,i=n.data;if(!(t(a.staticClass)&&t(a.class)&&(t(i)||t(i.staticClass)&&t(i.class)))){var s=Fe(o),l=r._transitionClasses;e(l)&&(s=De(s,Be(l))),s!==r._prevClass&&(r.setAttribute("class",s),r._prevClass=s)}}function nn(t){var n;e(t[oa])&&(t[n=ko?"change":"input"]=[].concat(t[oa],t[n]||[]),delete t[oa]),e(t[ra])&&(t[n=So?"click":"change"]=[].concat(t[ra],t[n]||[]),delete t[ra])}function on(t,e,n,o,r){if(n){var a=e,i=Mr;e=function(n){null!==(1===arguments.length?a(n):a.apply(null,arguments))&&rn(t,e,o,i)}}Mr.addEventListener(t,e,$o?{capture:o,passive:r}:o)}function rn(t,e,n,o){(o||Mr).removeEventListener(t,e,n)}function an(e,n){if(!t(e.data.on)||!t(n.data.on)){var o=n.data.on||{},r=e.data.on||{};Mr=n.elm,nn(o),rt(o,r,on,rn,n.context)}}function sn(n,o){if(!t(n.data.domProps)||!t(o.data.domProps)){var r,a,i=o.elm,s=n.data.domProps||{},l=o.data.domProps||{};e(l.__ob__)&&(l=o.data.domProps=y({},l));for(r in s)t(l[r])&&(i[r]="");for(r in l)if(a=l[r],"textContent"!==r&&"innerHTML"!==r||(o.children&&(o.children.length=0),a!==s[r]))if("value"===r){i._value=a;var c=t(a)?"":String(a);ln(i,o,c)&&(i.value=c)}else i[r]=a}}function ln(t,e,n){return!t.composing&&("option"===e.tag||cn(t,n)||un(t,n))}function cn(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}function un(t,n){var o=t.value,r=t._vModifiers;return e(r)&&r.number?u(o)!==u(n):e(r)&&r.trim?o.trim()!==n.trim():o!==n}function dn(t){var e=pn(t.style);return t.staticStyle?y(t.staticStyle,e):e}function pn(t){return Array.isArray(t)?g(t):"string"==typeof t?sa(t):t}function fn(t,e){var n,o={};if(e)for(var r=t;r.componentInstance;)(r=r.componentInstance._vnode).data&&(n=dn(r.data))&&y(o,n);(n=dn(t.data))&&y(o,n);for(var a=t;a=a.parent;)a.data&&(n=dn(a.data))&&y(o,n);return o}function hn(n,o){var r=o.data,a=n.data;if(!(t(r.staticStyle)&&t(r.style)&&t(a.staticStyle)&&t(a.style))){var i,s,l=o.elm,c=a.staticStyle,u=a.normalizedStyle||a.style||{},d=c||u,p=pn(o.data.style)||{};o.data.normalizedStyle=e(p.__ob__)?y({},p):p;var f=fn(o,!0);for(s in d)t(f[s])&&ua(l,s,"");for(s in f)(i=f[s])!==d[s]&&ua(l,s,null==i?"":i)}}function vn(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function mn(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",o=" "+e+" ";n.indexOf(o)>=0;)n=n.replace(o," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function yn(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&y(e,ha(t.name||"v")),y(e,t),e}return"string"==typeof t?ha(t):void 0}}function gn(t){Ca(function(){Ca(t)})}function bn(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),vn(t,e))}function _n(t,e){t._transitionClasses&&p(t._transitionClasses,e),mn(t,e)}function xn(t,e,n){var o=Cn(t,e),r=o.type,a=o.timeout,i=o.propCount;if(!r)return n();var s=r===ma?ba:xa,l=0,c=function(){t.removeEventListener(s,u),n()},u=function(e){e.target===t&&++l>=i&&c()};setTimeout(function(){l<i&&c()},a+1),t.addEventListener(s,u)}function Cn(t,e){var n,o=window.getComputedStyle(t),r=o[ga+"Delay"].split(", "),a=o[ga+"Duration"].split(", "),i=kn(r,a),s=o[_a+"Delay"].split(", "),l=o[_a+"Duration"].split(", "),c=kn(s,l),u=0,d=0;return e===ma?i>0&&(n=ma,u=i,d=a.length):e===ya?c>0&&(n=ya,u=c,d=l.length):d=(n=(u=Math.max(i,c))>0?i>c?ma:ya:null)?n===ma?a.length:l.length:0,{type:n,timeout:u,propCount:d,hasTransform:n===ma&&ka.test(o[ga+"Property"])}}function kn(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return wn(e)+wn(t[n])}))}function wn(t){return 1e3*Number(t.slice(0,-1))}function An(n,o){var r=n.elm;e(r._leaveCb)&&(r._leaveCb.cancelled=!0,r._leaveCb());var i=yn(n.data.transition);if(!t(i)&&!e(r._enterCb)&&1===r.nodeType){for(var s=i.css,l=i.type,c=i.enterClass,d=i.enterToClass,p=i.enterActiveClass,f=i.appearClass,h=i.appearToClass,v=i.appearActiveClass,m=i.beforeEnter,y=i.enter,g=i.afterEnter,b=i.enterCancelled,_=i.beforeAppear,x=i.appear,k=i.afterAppear,w=i.appearCancelled,A=i.duration,T=ur,O=ur.$vnode;O&&O.parent;)T=(O=O.parent).context;var S=!T._isMounted||!n.isRootInsert;if(!S||x||""===x){var E=S&&f?f:c,$=S&&v?v:p,P=S&&h?h:d,M=S?_||m:m,N=S&&"function"==typeof x?x:y,I=S?k||g:g,L=S?w||b:b,F=u(a(A)?A.enter:A);null!=F&&On(F,"enter",n);var R=!1!==s&&!wo,j=En(N),D=r._enterCb=C(function(){R&&(_n(r,P),_n(r,$)),D.cancelled?(R&&_n(r,E),L&&L(r)):I&&I(r),r._enterCb=null});n.data.show||at(n.data.hook||(n.data.hook={}),"insert",function(){var t=r.parentNode,e=t&&t._pending&&t._pending[n.key];e&&e.tag===n.tag&&e.elm._leaveCb&&e.elm._leaveCb(),N&&N(r,D)}),M&&M(r),R&&(bn(r,E),bn(r,$),gn(function(){bn(r,P),_n(r,E),D.cancelled||j||(Sn(F)?setTimeout(D,F):xn(r,l,D))})),n.data.show&&(o&&o(),N&&N(r,D)),R||j||D()}}}function Tn(n,o){function r(){w.cancelled||(n.data.show||((i.parentNode._pending||(i.parentNode._pending={}))[n.key]=n),h&&h(i),_&&(bn(i,d),bn(i,f),gn(function(){bn(i,p),_n(i,d),w.cancelled||x||(Sn(k)?setTimeout(w,k):xn(i,c,w))})),v&&v(i,w),_||x||w())}var i=n.elm;e(i._enterCb)&&(i._enterCb.cancelled=!0,i._enterCb());var s=yn(n.data.transition);if(t(s))return o();if(!e(i._leaveCb)&&1===i.nodeType){var l=s.css,c=s.type,d=s.leaveClass,p=s.leaveToClass,f=s.leaveActiveClass,h=s.beforeLeave,v=s.leave,m=s.afterLeave,y=s.leaveCancelled,g=s.delayLeave,b=s.duration,_=!1!==l&&!wo,x=En(v),k=u(a(b)?b.leave:b);e(k)&&On(k,"leave",n);var w=i._leaveCb=C(function(){i.parentNode&&i.parentNode._pending&&(i.parentNode._pending[n.key]=null),_&&(_n(i,p),_n(i,f)),w.cancelled?(_&&_n(i,d),y&&y(i)):(o(),m&&m(i)),i._leaveCb=null});g?g(r):r()}}function On(t,e,n){"number"!=typeof t?po("<transition> explicit "+e+" duration is not a valid number - got "+JSON.stringify(t)+".",n.context):isNaN(t)&&po("<transition> explicit "+e+" duration is NaN - the duration expression might be incorrect.",n.context)}function Sn(t){return"number"==typeof t&&!isNaN(t)}function En(n){if(t(n))return!1;var o=n.fns;return e(o)?En(Array.isArray(o)?o[0]:o):(n._length||n.length)>1}function $n(t,e){!0!==e.data.show&&An(e)}function Pn(t,e,n){Mn(t,e,n),(ko||Ao)&&setTimeout(function(){Mn(t,e,n)},0)}function Mn(t,e,n){var o=e.value,r=t.multiple;if(!r||Array.isArray(o)){for(var a,i,s=0,l=t.options.length;s<l;s++)if(i=t.options[s],r)a=x(o,In(i))>-1,i.selected!==a&&(i.selected=a);else if(_(In(i),o))return void(t.selectedIndex!==s&&(t.selectedIndex=s));r||(t.selectedIndex=-1)}else po('<select multiple v-model="'+e.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(o).slice(8,-1),n)}function Nn(t,e){return e.every(function(e){return!_(e,t)})}function In(t){return"_value"in t?t._value:t.value}function Ln(t){t.target.composing=!0}function Fn(t){t.target.composing&&(t.target.composing=!1,Rn(t.target,"input"))}function Rn(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function jn(t){return!t.componentInstance||t.data&&t.data.transition?t:jn(t.componentInstance._vnode)}function Dn(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?Dn(mt(e.children)):t}function Bn(t){var e={},n=t.$options;for(var o in n.propsData)e[o]=t[o];var r=n._parentListeners;for(var a in r)e[Xn(a)]=r[a];return e}function Hn(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}function Yn(t){for(;t=t.parent;)if(t.data.transition)return!0}function Un(t,e){return e.key===t.key&&e.tag===t.tag}function Vn(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function Wn(t){t.data.newPos=t.elm.getBoundingClientRect()}function zn(t){var e=t.data.pos,n=t.data.newPos,o=e.left-n.left,r=e.top-n.top;if(o||r){t.data.moved=!0;var a=t.elm.style;a.transform=a.WebkitTransform="translate("+o+"px,"+r+"px)",a.transitionDuration="0s"}}function qn(t,e){return e={exports:{}},t(e,e.exports),e.exports}var Gn=Object.prototype.toString,Kn=d("slot,component",!0),Jn=d("key,ref,slot,is"),Zn=Object.prototype.hasOwnProperty,Qn=/-(\w)/g,Xn=h(function(t){return t.replace(Qn,function(t,e){return e?e.toUpperCase():""})}),to=h(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),eo=/\B([A-Z])/g,no=h(function(t){return t.replace(eo,"-$1").toLowerCase()}),oo=function(t,e,n){return!1},ro=function(t){return t},ao="data-server-rendered",io=["component","directive","filter"],so=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated"],lo={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:oo,isReservedAttr:oo,isUnknownElement:oo,getTagNamespace:b,parsePlatformTagName:ro,mustUseProp:oo,_lifecycleHooks:so},co=Object.freeze({}),uo=/[^\w.$]/,po=b,fo=b,ho=null,vo="undefined"!=typeof console,mo=/(?:^|[-_])(\w)/g,yo=function(t){return t.replace(mo,function(t){return t.toUpperCase()}).replace(/[-_]/g,"")};po=function(t,e){var n=e?bo(e):"";lo.warnHandler?lo.warnHandler.call(null,t,e,n):vo&&!lo.silent&&console.error("[Vue warn]: "+t+n)},fo=function(t,e){vo&&!lo.silent&&console.warn("[Vue tip]: "+t+(e?bo(e):""))},ho=function(t,e){if(t.$root===t)return"<Root>";var n="string"==typeof t?t:"function"==typeof t&&t.options?t.options.name:t._isVue?t.$options.name||t.$options._componentTag:t.name,o=t._isVue&&t.$options.__file;if(!n&&o){var r=o.match(/([^/\\]+)\.vue$/);n=r&&r[1]}return(n?"<"+yo(n)+">":"<Anonymous>")+(o&&!1!==e?" at "+o:"")};var go=function(t,e){for(var n="";e;)e%2==1&&(n+=t),e>1&&(t+=t),e>>=1;return n},bo=function(t){if(t._isVue&&t.$parent){for(var e=[],n=0;t;){if(e.length>0){var o=e[e.length-1];if(o.constructor===t.constructor){n++,t=t.$parent;continue}n>0&&(e[e.length-1]=[o,n],n=0)}e.push(t),t=t.$parent}return"\n\nfound in\n\n"+e.map(function(t,e){return""+(0===e?"---\x3e ":go(" ",5+2*e))+(Array.isArray(t)?ho(t[0])+"... ("+t[1]+" recursive calls)":ho(t))}).join("\n")}return"\n\n(found in "+ho(t)+")"},_o="__proto__"in{},xo="undefined"!=typeof window,Co=xo&&window.navigator.userAgent.toLowerCase(),ko=Co&&/msie|trident/.test(Co),wo=Co&&Co.indexOf("msie 9.0")>0,Ao=Co&&Co.indexOf("edge/")>0,To=Co&&Co.indexOf("android")>0,Oo=Co&&/iphone|ipad|ipod|ios/.test(Co),So=Co&&/chrome\/\d+/.test(Co)&&!Ao,Eo={}.watch,$o=!1;if(xo)try{var Po={};Object.defineProperty(Po,"passive",{get:function(){$o=!0}}),window.addEventListener("test-passive",null,Po)}catch(t){}var Mo,No,Io=function(){return void 0===Mo&&(Mo=!xo&&"undefined"!=typeof global&&"server"===global.process.env.VUE_ENV),Mo},Lo=xo&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,Fo="undefined"!=typeof Symbol&&O(Symbol)&&"undefined"!=typeof Reflect&&O(Reflect.ownKeys),Ro=function(){function t(){o=!1;var t=n.slice(0);n.length=0;for(var e=0;e<t.length;e++)t[e]()}var e,n=[],o=!1;if("undefined"!=typeof Promise&&O(Promise)){var r=Promise.resolve(),a=function(t){console.error(t)};e=function(){r.then(t).catch(a),Oo&&setTimeout(b)}}else if(ko||"undefined"==typeof MutationObserver||!O(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())e=function(){setTimeout(t,0)};else{var i=1,s=new MutationObserver(t),l=document.createTextNode(String(i));s.observe(l,{characterData:!0}),e=function(){i=(i+1)%2,l.data=String(i)}}return function(t,r){var a;if(n.push(function(){if(t)try{t.call(r)}catch(t){T(t,r,"nextTick")}else a&&a(r)}),o||(o=!0,e()),!t&&"undefined"!=typeof Promise)return new Promise(function(t,e){a=t})}}();No="undefined"!=typeof Set&&O(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var jo=0,Do=function(){this.id=jo++,this.subs=[]};Do.prototype.addSub=function(t){this.subs.push(t)},Do.prototype.removeSub=function(t){p(this.subs,t)},Do.prototype.depend=function(){Do.target&&Do.target.addDep(this)},Do.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},Do.target=null;var Bo=[],Ho=Array.prototype,Yo=Object.create(Ho);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=Ho[t];w(Yo,t,function(){for(var n=[],o=arguments.length;o--;)n[o]=arguments[o];var r,a=e.apply(this,n),i=this.__ob__;switch(t){case"push":case"unshift":r=n;break;case"splice":r=n.slice(2)}return r&&i.observeArray(r),i.dep.notify(),a})});var Uo=Object.getOwnPropertyNames(Yo),Vo={shouldConvert:!0},Wo=function(t){this.value=t,this.dep=new Do,this.vmCount=0,w(t,"__ob__",this),Array.isArray(t)?((_o?$:P)(t,Yo,Uo),this.observeArray(t)):this.walk(t)};Wo.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)N(t,e[n],t[e[n]])},Wo.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)M(t[e])};var zo=lo.optionMergeStrategies;zo.el=zo.propsData=function(t,e,n,o){return n||po('option "'+o+'" can only be used during instance creation with the `new` keyword.'),Go(t,e)},zo.data=function(t,e,n){return n?j(t,e,n):e&&"function"!=typeof e?(po('The "data" option should be a function that returns a per-instance value in component definitions.',n),t):j.call(this,t,e)},so.forEach(function(t){zo[t]=D}),io.forEach(function(t){zo[t+"s"]=B}),zo.watch=function(t,e){if(t===Eo&&(t=void 0),e===Eo&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var n={};y(n,t);for(var o in e){var r=n[o],a=e[o];r&&!Array.isArray(r)&&(r=[r]),n[o]=r?r.concat(a):Array.isArray(a)?a:[a]}return n},zo.props=zo.methods=zo.inject=zo.computed=function(t,e){if(!t)return e;var n=Object.create(null);return y(n,t),e&&y(n,e),n},zo.provide=j;var qo,Go=function(t,e){return void 0===e?t:e},Ko=/^(String|Number|Boolean|Function|Symbol)$/,Jo=d("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),Zo=function(t,e){po('Property or method "'+e+'" is not defined on the instance but referenced during render. Make sure to declare reactive data properties in the data option.',t)},Qo="undefined"!=typeof Proxy&&Proxy.toString().match(/native code/);if(Qo){var Xo=d("stop,prevent,self,ctrl,shift,alt,meta");lo.keyCodes=new Proxy(lo.keyCodes,{set:function(t,e,n){return Xo(e)?(po("Avoid overwriting built-in modifier in config.keyCodes: ."+e),!1):(t[e]=n,!0)}})}var tr={has:function(t,e){var n=e in t,o=Jo(e)||"_"===e.charAt(0);return n||o||Zo(t,e),n||!o}},er={get:function(t,e){return"string"!=typeof e||e in t||Zo(t,e),t[e]}};qo=function(t){if(Qo){var e=t.$options,n=e.render&&e.render._withStripped?er:tr;t._renderProxy=new Proxy(t,n)}else t._renderProxy=t};var nr,or,rr=xo&&window.performance;rr&&rr.mark&&rr.measure&&rr.clearMarks&&rr.clearMeasures&&(nr=function(t){return rr.mark(t)},or=function(t,e,n){rr.measure(t,e,n),rr.clearMarks(e),rr.clearMarks(n),rr.clearMeasures(t)});var ar=function(t,e,n,o,r,a,i,s){this.tag=t,this.data=e,this.children=n,this.text=o,this.elm=r,this.ns=void 0,this.context=a,this.functionalContext=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ir={child:{}};ir.child.get=function(){return this.componentInstance},Object.defineProperties(ar.prototype,ir);var sr,lr=function(t){void 0===t&&(t="");var e=new ar;return e.text=t,e.isComment=!0,e},cr=h(function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),o="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=o?t.slice(1):t,plain:!(e||n||o),once:n,capture:o,passive:e}}),ur=null,dr=!1,pr=100,fr=[],hr=[],vr={},mr={},yr=!1,gr=!1,br=0,_r=0,xr=function(t,e,n,o){this.vm=t,t._watchers.push(this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++_r,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new No,this.newDepIds=new No,this.expression=e.toString(),"function"==typeof e?this.getter=e:(this.getter=A(e),this.getter||(this.getter=function(){},po('Failed watching path: "'+e+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',t))),this.value=this.lazy?void 0:this.get()};xr.prototype.get=function(){S(this);var t,e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;T(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Rt(t),E(),this.cleanupDeps()}return t},xr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},xr.prototype.cleanupDeps=function(){for(var t=this,e=this.deps.length;e--;){var n=t.deps[e];t.newDepIds.has(n.id)||n.removeSub(t)}var o=this.depIds;this.depIds=this.newDepIds,this.newDepIds=o,this.newDepIds.clear(),o=this.deps,this.deps=this.newDeps,this.newDeps=o,this.newDeps.length=0},xr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():Ft(this)},xr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||a(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){T(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},xr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},xr.prototype.depend=function(){for(var t=this,e=this.deps.length;e--;)t.deps[e].depend()},xr.prototype.teardown=function(){var t=this;if(this.active){this.vm._isBeingDestroyed||p(this.vm._watchers,this);for(var e=this.deps.length;e--;)t.deps[e].removeSub(t);this.active=!1}};var Cr=new No,kr={enumerable:!0,configurable:!0,get:b,set:b},wr={lazy:!0},Ar={init:function(t,e,n,o){if(!t.componentInstance||t.componentInstance._isDestroyed)(t.componentInstance=oe(t,ur,n,o)).$mount(e?t.elm:void 0,e);else if(t.data.keepAlive){var r=t;Ar.prepatch(r,r)}},prepatch:function(t,e){var n=e.componentOptions;Tt(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(n._isMounted=!0,$t(n,"mounted")),t.data.keepAlive&&(e._isMounted?It(n):St(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?Et(e,!0):e.$destroy())}},Tr=Object.keys(Ar),Or=1,Sr=2,Er=0;!function(t){t.prototype._init=function(t){var e=this;e._uid=Er++;var n,o;lo.performance&&nr&&(n="vue-perf-init:"+e._uid,o="vue-perf-end:"+e._uid,nr(n)),e._isVue=!0,t&&t._isComponent?xe(e,t):e.$options=W(Ce(e.constructor),t||{},e),qo(e),e._self=e,wt(e),yt(e),_e(e),$t(e,"beforeCreate"),Qt(e),Bt(e),Zt(e),$t(e,"created"),lo.performance&&nr&&(e._name=ho(e,!1),nr(o),or(e._name+" init",n,o)),e.$options.el&&e.$mount(e.$options.el)}}(Ae),function(t){var e={};e.get=function(){return this._data};var n={};n.get=function(){return this._props},e.set=function(t){po("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){po("$props is readonly.",this)},Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=I,t.prototype.$delete=L,t.prototype.$watch=function(t,e,n){var o=this;if(i(e))return Jt(o,t,e,n);(n=n||{}).user=!0;var r=new xr(o,t,e,n);return n.immediate&&e.call(o,r.value),function(){r.teardown()}}}(Ae),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var o=this,r=this;if(Array.isArray(t))for(var a=0,i=t.length;a<i;a++)o.$on(t[a],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){function n(){o.$off(t,n),e.apply(o,arguments)}var o=this;return n.fn=e,o.$on(t,n),o},t.prototype.$off=function(t,e){var n=this,o=this;if(!arguments.length)return o._events=Object.create(null),o;if(Array.isArray(t)){for(var r=0,a=t.length;r<a;r++)n.$off(t[r],e);return o}var i=o._events[t];if(!i)return o;if(1===arguments.length)return o._events[t]=null,o;if(e)for(var s,l=i.length;l--;)if((s=i[l])===e||s.fn===e){i.splice(l,1);break}return o},t.prototype.$emit=function(t){var e=this,n=t.toLowerCase();n!==t&&e._events[n]&&fo('Event "'+n+'" is emitted in component '+ho(e)+' but the handler is registered for "'+t+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+no(t)+'" instead of "'+t+'".');var o=e._events[t];if(o){o=o.length>1?m(o):o;for(var r=m(arguments,1),a=0,i=o.length;a<i;a++)try{o[a].apply(e,r)}catch(n){T(n,e,'event handler for "'+t+'"')}}return e}}(Ae),function(t){t.prototype._update=function(t,e){var n=this;n._isMounted&&$t(n,"beforeUpdate");var o=n.$el,r=n._vnode,a=ur;ur=n,n._vnode=t,r?n.$el=n.__patch__(r,t):(n.$el=n.__patch__(n.$el,t,e,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),ur=a,o&&(o.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var t=this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){$t(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||p(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),$t(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null)}}}(Ae),function(t){t.prototype.$nextTick=function(t){return Ro(t,this)},t.prototype._render=function(){var t=this,e=t.$options,n=e.render,o=e.staticRenderFns,r=e._parentVnode;if(t._isMounted)for(var a in t.$slots){var i=t.$slots[a];i._rendered&&(t.$slots[a]=et(i,!0))}t.$scopedSlots=r&&r.data.scopedSlots||co,o&&!t._staticTrees&&(t._staticTrees=[]),t.$vnode=r;var s;try{s=n.call(t._renderProxy,t.$createElement)}catch(e){T(e,t,"render function"),s=t.$options.renderError?t.$options.renderError.call(t._renderProxy,t.$createElement,e):t._vnode}return s instanceof ar||(Array.isArray(s)&&po("Multiple root nodes returned from render function. Render function should return a single root node.",t),s=lr()),s.parent=r,s},t.prototype._o=me,t.prototype._n=u,t.prototype._s=c,t.prototype._l=ue,t.prototype._t=de,t.prototype._q=_,t.prototype._i=x,t.prototype._m=ve,t.prototype._f=pe,t.prototype._k=fe,t.prototype._b=he,t.prototype._v=X,t.prototype._e=lr,t.prototype._u=kt,t.prototype._g=be}(Ae);var $r=[String,RegExp,Array],Pr={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:$r,exclude:$r},created:function(){this.cache=Object.create(null)},destroyed:function(){var t=this;for(var e in t.cache)Le(t.cache[e])},watch:{include:function(t){Ie(this.cache,this._vnode,function(e){return Ne(t,e)})},exclude:function(t){Ie(this.cache,this._vnode,function(e){return!Ne(t,e)})}},render:function(){var t=mt(this.$slots.default),e=t&&t.componentOptions;if(e){var n=Me(e);if(n&&(this.include&&!Ne(this.include,n)||this.exclude&&Ne(this.exclude,n)))return t;var o=null==t.key?e.Ctor.cid+(e.tag?"::"+e.tag:""):t.key;this.cache[o]?t.componentInstance=this.cache[o].componentInstance:this.cache[o]=t,t.data.keepAlive=!0}return t}}};!function(t){var e={};e.get=function(){return lo},e.set=function(){po("Do not replace the Vue.config object, set individual fields instead.")},Object.defineProperty(t,"config",e),t.util={warn:po,extend:y,mergeOptions:W,defineReactive:N},t.set=I,t.delete=L,t.nextTick=Ro,t.options=Object.create(null),io.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,y(t.options.components,Pr),Te(t),Oe(t),Se(t),Pe(t)}(Ae),Object.defineProperty(Ae.prototype,"$isServer",{get:Io}),Object.defineProperty(Ae.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Ae.version="2.4.4";var Mr,Nr,Ir=d("style,class"),Lr=d("input,textarea,option,select,progress"),Fr=d("contenteditable,draggable,spellcheck"),Rr=d("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),jr="http://www.w3.org/1999/xlink",Dr=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Br=function(t){return Dr(t)?t.slice(6,t.length):""},Hr=function(t){return null==t||!1===t},Yr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Ur=d("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Vr=d("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Wr=function(t){return Ur(t)||Vr(t)},zr=Object.create(null),qr=d("text,number,password,search,email,tel,url"),Gr=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(Yr[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setAttribute:function(t,e,n){t.setAttribute(e,n)}}),Kr={create:function(t,e){Ve(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Ve(t,!0),Ve(e))},destroy:function(t){Ve(t,!0)}},Jr=new ar("",{},[]),Zr=["create","activate","update","remove","destroy"],Qr={create:Ge,update:Ge,destroy:function(t){Ge(t,Jr)}},Xr=Object.create(null),ta=[Kr,Qr],ea={create:Xe,update:Xe},na={create:en,update:en},oa="__r",ra="__c",aa={create:an,update:an},ia={create:sn,update:sn},sa=h(function(t){var e={},n=/;(?![^(]*\))/g,o=/:(.+)/;return t.split(n).forEach(function(t){if(t){var n=t.split(o);n.length>1&&(e[n[0].trim()]=n[1].trim())}}),e}),la=/^--/,ca=/\s*!important$/,ua=function(t,e,n){if(la.test(e))t.style.setProperty(e,n);else if(ca.test(n))t.style.setProperty(e,n.replace(ca,""),"important");else{var o=pa(e);if(Array.isArray(n))for(var r=0,a=n.length;r<a;r++)t.style[o]=n[r];else t.style[o]=n}},da=["Webkit","Moz","ms"],pa=h(function(t){if(Nr=Nr||document.createElement("div").style,"filter"!==(t=Xn(t))&&t in Nr)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<da.length;n++){var o=da[n]+e;if(o in Nr)return o}}),fa={create:hn,update:hn},ha=h(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),va=xo&&!wo,ma="transition",ya="animation",ga="transition",ba="transitionend",_a="animation",xa="animationend";va&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ga="WebkitTransition",ba="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(_a="WebkitAnimation",xa="webkitAnimationEnd"));var Ca=xo&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout,ka=/\b(transform|all)(,|$)/,wa=function(o){function a(t){return new ar(M.tagName(t).toLowerCase(),{},[],void 0,t)}function i(t,e){function n(){0==--n.listeners&&s(t)}return n.listeners=e,n}function s(t){var n=M.parentNode(t);e(n)&&M.removeChild(n,t)}function l(t,o,r,a,i){if(t.isRootInsert=!i,!c(t,o,r,a)){var s=t.data,l=t.children,u=t.tag;e(u)?(s&&s.pre&&N++,N||t.ns||lo.ignoredElements.length&&lo.ignoredElements.indexOf(u)>-1||!lo.isUnknownElement(u)||po("Unknown custom element: <"+u+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',t.context),t.elm=t.ns?M.createElementNS(t.ns,u):M.createElement(u,t),y(t),h(t,l,o),e(s)&&m(t,o),f(r,t.elm,a),s&&s.pre&&N--):n(t.isComment)?(t.elm=M.createComment(t.text),f(r,t.elm,a)):(t.elm=M.createTextNode(t.text),f(r,t.elm,a))}}function c(t,o,r,a){var i=t.data;if(e(i)){var s=e(t.componentInstance)&&i.keepAlive;if(e(i=i.hook)&&e(i=i.init)&&i(t,!1,r,a),e(t.componentInstance))return u(t,o),n(s)&&p(t,o,r,a),!0}}function u(t,n){e(t.data.pendingInsert)&&(n.push.apply(n,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,v(t)?(m(t,n),y(t)):(Ve(t),n.push(t))}function p(t,n,o,r){for(var a,i=t;i.componentInstance;)if(i=i.componentInstance._vnode,e(a=i.data)&&e(a=a.transition)){for(a=0;a<$.activate.length;++a)$.activate[a](Jr,i);n.push(i);break}f(o,t.elm,r)}function f(t,n,o){e(t)&&(e(o)?o.parentNode===t&&M.insertBefore(t,n,o):M.appendChild(t,n))}function h(t,e,n){if(Array.isArray(e))for(var o=0;o<e.length;++o)l(e[o],n,t.elm,null,!0);else r(t.text)&&M.appendChild(t.elm,M.createTextNode(t.text))}function v(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return e(t.tag)}function m(t,n){for(var o=0;o<$.create.length;++o)$.create[o](Jr,t);e(S=t.data.hook)&&(e(S.create)&&S.create(Jr,t),e(S.insert)&&n.push(t))}function y(t){for(var n,o=t;o;)e(n=o.context)&&e(n=n.$options._scopeId)&&M.setAttribute(t.elm,n,""),o=o.parent;e(n=ur)&&n!==t.context&&e(n=n.$options._scopeId)&&M.setAttribute(t.elm,n,"")}function g(t,e,n,o,r,a){for(;o<=r;++o)l(n[o],a,t,e)}function b(t){var n,o,r=t.data;if(e(r))for(e(n=r.hook)&&e(n=n.destroy)&&n(t),n=0;n<$.destroy.length;++n)$.destroy[n](t);if(e(n=t.children))for(o=0;o<t.children.length;++o)b(t.children[o])}function _(t,n,o,r){for(;o<=r;++o){var a=n[o];e(a)&&(e(a.tag)?(x(a),b(a)):s(a.elm))}}function x(t,n){if(e(n)||e(t.data)){var o,r=$.remove.length+1;for(e(n)?n.listeners+=r:n=i(t.elm,r),e(o=t.componentInstance)&&e(o=o._vnode)&&e(o.data)&&x(o,n),o=0;o<$.remove.length;++o)$.remove[o](t,n);e(o=t.data.hook)&&e(o=o.remove)?o(t,n):n()}else s(t.elm)}function C(n,o,r,a,i){for(var s,c,u,d=0,p=0,f=o.length-1,h=o[0],v=o[f],m=r.length-1,y=r[0],b=r[m],x=!i;d<=f&&p<=m;)t(h)?h=o[++d]:t(v)?v=o[--f]:We(h,y)?(w(h,y,a),h=o[++d],y=r[++p]):We(v,b)?(w(v,b,a),v=o[--f],b=r[--m]):We(h,b)?(w(h,b,a),x&&M.insertBefore(n,h.elm,M.nextSibling(v.elm)),h=o[++d],b=r[--m]):We(v,y)?(w(v,y,a),x&&M.insertBefore(n,v.elm,h.elm),v=o[--f],y=r[++p]):(t(s)&&(s=qe(o,d,f)),t(c=e(y.key)?s[y.key]:k(y,o,d,f))?l(y,a,n,h.elm):((u=o[c])||po("It seems there are duplicate keys that is causing an update error. Make sure each v-for item has a unique key."),We(u,y)?(w(u,y,a),o[c]=void 0,x&&M.insertBefore(n,u.elm,h.elm)):l(y,a,n,h.elm)),y=r[++p]);d>f?g(n,t(r[m+1])?null:r[m+1].elm,r,p,m,a):p>m&&_(n,o,d,f)}function k(t,n,o,r){for(var a=o;a<r;a++){var i=n[a];if(e(i)&&We(t,i))return a}}function w(o,r,a,i){if(o!==r){var s=r.elm=o.elm;if(n(o.isAsyncPlaceholder))e(r.asyncFactory.resolved)?T(o.elm,r,a):r.isAsyncPlaceholder=!0;else if(n(r.isStatic)&&n(o.isStatic)&&r.key===o.key&&(n(r.isCloned)||n(r.isOnce)))r.componentInstance=o.componentInstance;else{var l,c=r.data;e(c)&&e(l=c.hook)&&e(l=l.prepatch)&&l(o,r);var u=o.children,d=r.children;if(e(c)&&v(r)){for(l=0;l<$.update.length;++l)$.update[l](o,r);e(l=c.hook)&&e(l=l.update)&&l(o,r)}t(r.text)?e(u)&&e(d)?u!==d&&C(s,u,d,a,i):e(d)?(e(o.text)&&M.setTextContent(s,""),g(s,null,d,0,d.length-1,a)):e(u)?_(s,u,0,u.length-1):e(o.text)&&M.setTextContent(s,""):o.text!==r.text&&M.setTextContent(s,r.text),e(c)&&e(l=c.hook)&&e(l=l.postpatch)&&l(o,r)}}}function A(t,o,r){if(n(r)&&e(t.parent))t.parent.data.pendingInsert=o;else for(var a=0;a<o.length;++a)o[a].data.hook.insert(o[a])}function T(t,o,r){if(n(o.isComment)&&e(o.asyncFactory))return o.elm=t,o.isAsyncPlaceholder=!0,!0;if(!O(t,o))return!1;o.elm=t;var a=o.tag,i=o.data,s=o.children;if(e(i)&&(e(S=i.hook)&&e(S=S.init)&&S(o,!0),e(S=o.componentInstance)))return u(o,r),!0;if(e(a)){if(e(s))if(t.hasChildNodes())if(e(S=i)&&e(S=S.domProps)&&e(S=S.innerHTML)){if(S!==t.innerHTML)return"undefined"==typeof console||I||(I=!0,console.warn("Parent: ",t),console.warn("server innerHTML: ",S),console.warn("client innerHTML: ",t.innerHTML)),!1}else{for(var l=!0,c=t.firstChild,d=0;d<s.length;d++){if(!c||!T(c,s[d],r)){l=!1;break}c=c.nextSibling}if(!l||c)return"undefined"==typeof console||I||(I=!0,console.warn("Parent: ",t),console.warn("Mismatching childNodes vs. VNodes: ",t.childNodes,s)),!1}else h(o,s,r);if(e(i))for(var p in i)if(!L(p)){m(o,r);break}}else t.data!==o.text&&(t.data=o.text);return!0}function O(t,n){return e(n.tag)?0===n.tag.indexOf("vue-component")||n.tag.toLowerCase()===(t.tagName&&t.tagName.toLowerCase()):t.nodeType===(n.isComment?8:3)}var S,E,$={},P=o.modules,M=o.nodeOps;for(S=0;S<Zr.length;++S)for($[Zr[S]]=[],E=0;E<P.length;++E)e(P[E][Zr[S]])&&$[Zr[S]].push(P[E][Zr[S]]);var N=0,I=!1,L=d("attrs,style,class,staticClass,staticStyle,key");return function(o,r,i,s,c,u){if(!t(r)){var d=!1,p=[];if(t(o))d=!0,l(r,p,c,u);else{var f=e(o.nodeType);if(!f&&We(o,r))w(o,r,p,s);else{if(f){if(1===o.nodeType&&o.hasAttribute(ao)&&(o.removeAttribute(ao),i=!0),n(i)){if(T(o,r,p))return A(r,p,!0),o;po("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}o=a(o)}var h=o.elm,m=M.parentNode(h);if(l(r,p,h._leaveCb?null:m,M.nextSibling(h)),e(r.parent))for(var y=r.parent,g=v(r);y;){for(var x=0;x<$.destroy.length;++x)$.destroy[x](y);if(y.elm=r.elm,g){for(var C=0;C<$.create.length;++C)$.create[C](Jr,y);var k=y.data.hook.insert;if(k.merged)for(var O=1;O<k.fns.length;O++)k.fns[O]()}y=y.parent}e(m)?_(m,[o],0,0):e(o.tag)&&b(o)}}return A(r,p,d),r.elm}e(o)&&b(o)}}({nodeOps:Gr,modules:[ea,na,aa,ia,fa,xo?{create:$n,activate:$n,remove:function(t,e){!0!==t.data.show?Tn(t,e):e()}}:{}].concat(ta)});wo&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&Rn(t,"input")});var Aa={model:{inserted:function(t,e,n){"select"===n.tag?(Pn(t,e,n.context),t._vOptions=[].map.call(t.options,In)):("textarea"===n.tag||qr(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("change",Fn),To||(t.addEventListener("compositionstart",Ln),t.addEventListener("compositionend",Fn)),wo&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Pn(t,e,n.context);var o=t._vOptions,r=t._vOptions=[].map.call(t.options,In);r.some(function(t,e){return!_(t,o[e])})&&(t.multiple?e.value.some(function(t){return Nn(t,r)}):e.value!==e.oldValue&&Nn(e.value,r))&&Rn(t,"change")}}},show:{bind:function(t,e,n){var o=e.value,r=(n=jn(n)).data&&n.data.transition,a=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;o&&r?(n.data.show=!0,An(n,function(){t.style.display=a})):t.style.display=o?a:"none"},update:function(t,e,n){var o=e.value;o!==e.oldValue&&((n=jn(n)).data&&n.data.transition?(n.data.show=!0,o?An(n,function(){t.style.display=t.__vOriginalDisplay}):Tn(n,function(){t.style.display="none"})):t.style.display=o?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,o,r){r||(t.style.display=t.__vOriginalDisplay)}}},Ta={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]},Oa={name:"transition",props:Ta,abstract:!0,render:function(t){var e=this,n=this.$options._renderChildren;if(n&&(n=n.filter(function(t){return t.tag||vt(t)})).length){n.length>1&&po("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var o=this.mode;o&&"in-out"!==o&&"out-in"!==o&&po("invalid <transition> mode: "+o,this.$parent);var a=n[0];if(Yn(this.$vnode))return a;var i=Dn(a);if(!i)return a;if(this._leaving)return Hn(t,a);var s="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?s+"comment":s+i.tag:r(i.key)?0===String(i.key).indexOf(s)?i.key:s+i.key:i.key;var l=(i.data||(i.data={})).transition=Bn(this),c=this._vnode,u=Dn(c);if(i.data.directives&&i.data.directives.some(function(t){return"show"===t.name})&&(i.data.show=!0),u&&u.data&&!Un(i,u)&&!vt(u)){var d=u&&(u.data.transition=y({},l));if("out-in"===o)return this._leaving=!0,at(d,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),Hn(t,a);if("in-out"===o){if(vt(i))return c;var p,f=function(){p()};at(l,"afterEnter",f),at(l,"enterCancelled",f),at(d,"delayLeave",function(t){p=t})}}return a}}},Sa=y({tag:String,moveClass:String},Ta);delete Sa.mode;var Ea={Transition:Oa,TransitionGroup:{props:Sa,render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),o=this.prevChildren=this.children,r=this.$slots.default||[],a=this.children=[],i=Bn(this),s=0;s<r.length;s++){var l=r[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),n[l.key]=l,(l.data||(l.data={})).transition=i;else{var c=l.componentOptions,u=c?c.Ctor.options.name||c.tag||"":l.tag;po("<transition-group> children must be keyed: <"+u+">")}}if(o){for(var d=[],p=[],f=0;f<o.length;f++){var h=o[f];h.data.transition=i,h.data.pos=h.elm.getBoundingClientRect(),n[h.key]?d.push(h):p.push(h)}this.kept=t(e,null,d),this.removed=p}return t(e,null,a)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(Vn),t.forEach(Wn),t.forEach(zn),t.forEach(function(t){if(t.data.moved){var n=t.elm,o=n.style;bn(n,e),o.transform=o.WebkitTransform=o.transitionDuration="",n.addEventListener(ba,n._moveCb=function t(o){o&&!/transform$/.test(o.propertyName)||(n.removeEventListener(ba,t),n._moveCb=null,_n(n,e))})}}))},methods:{hasMove:function(t,e){if(!va)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){mn(n,t)}),vn(n,e),n.style.display="none",this.$el.appendChild(n);var o=Cn(n);return this.$el.removeChild(n),this._hasMove=o.hasTransform}}}};Ae.config.mustUseProp=function(t,e,n){return"value"===n&&Lr(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Ae.config.isReservedTag=Wr,Ae.config.isReservedAttr=Ir,Ae.config.getTagNamespace=function(t){return Vr(t)?"svg":"math"===t?"math":void 0},Ae.config.isUnknownElement=function(t){if(!xo)return!0;if(Wr(t))return!1;if(t=t.toLowerCase(),null!=zr[t])return zr[t];var e=document.createElement(t);return t.indexOf("-")>-1?zr[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:zr[t]=/HTMLUnknownElement/.test(e.toString())},y(Ae.options.directives,Aa),y(Ae.options.components,Ea),Ae.prototype.__patch__=xo?wa:b,Ae.prototype.$mount=function(t,e){return t=t&&xo?Ue(t):void 0,At(this,t,e)},setTimeout(function(){lo.devtools&&(Lo?Lo.emit("init",Ae):So&&console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==lo.productionTip&&xo&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0);var $a={stats:{INT:"Intelligence",REF:"Reflexes",TECH:"Technical Ability",COOL:"Cool",ATTR:"Attractiveness",LUCK:"Luck",MA:"Movement Allowance",BODY:"Body Type",EMP:"Empathy"},skills:[{name:"Personal Grooming",stat:"ATTR",choose:!1},{name:"Wardrobe & Style",stat:"ATTR",choose:!1},{name:"Other ATTR skill",stat:"ATTR",choose:!0},{name:"Endurance",stat:"BODY",choose:!1},{name:"Strength Feat",stat:"BODY",choose:!1},{name:"Swimming",stat:"BODY",choose:!1},{name:"Other BODY skill",stat:"BODY",choose:!0},{name:"Interrogation",stat:"COOL",choose:!1},{name:"Intimidate",stat:"COOL",choose:!1},{name:"Oratory",stat:"COOL",choose:!1},{name:"Resist Torture/Drugs",stat:"COOL",choose:!1},{name:"Streetwise",stat:"COOL",choose:!1},{name:"Other COOL skill",stat:"COOL",choose:!0},{name:"Human Perception",stat:"EMP",choose:!1},{name:"Interview",stat:"EMP",choose:!1},{name:"Leadership",stat:"EMP",choose:!1},{name:"Seduction",stat:"EMP",choose:!1},{name:"Social",stat:"EMP",choose:!1},{name:"Persuasion",stat:"EMP",choose:!1},{name:"Perform",stat:"EMP",choose:!1},{name:"Other EMP skill",stat:"EMP",choose:!0},{name:"Accounting",stat:"INT",choose:!1},{name:"Anthropology",stat:"INT",choose:!1},{name:"Awareness/Notice",stat:"INT",choose:!1},{name:"Biology",stat:"INT",choose:!1},{name:"Botany",stat:"INT",choose:!1},{name:"Chemistry",stat:"INT",choose:!1},{name:"Composition",stat:"INT",choose:!1},{name:"Diagnose Illness",stat:"INT",choose:!1},{name:"Education",stat:"INT",choose:!1},{name:"Expert",stat:"INT",choose:!1},{name:"Gamble",stat:"INT",choose:!1},{name:"Geology",stat:"INT",choose:!1},{name:"Hide/Evade",stat:"INT",choose:!1},{name:"History",stat:"INT",choose:!1},{name:"Know Language",stat:"INT",choose:!0},{name:"Library Search",stat:"INT",choose:!1},{name:"Mathematics",stat:"INT",choose:!1},{name:"Physics",stat:"INT",choose:!1},{name:"Programming",stat:"INT",choose:!1},{name:"Shadow/Track",stat:"INT",choose:!1},{name:"Stock Market",stat:"INT",choose:!1},{name:"System Knowledge",stat:"INT",choose:!1},{name:"Teaching",stat:"INT",choose:!1},{name:"Wilderness Survival",stat:"INT",choose:!1},{name:"Zoology",stat:"INT",choose:!1},{name:"Other INT skill",stat:"INT",choose:!0},{name:"Archery",stat:"REF",choose:!1},{name:"Athletics",stat:"REF",choose:!1},{name:"Brawling",stat:"REF",choose:!1},{name:"Dance",stat:"REF",choose:!1},{name:"Dodge & Escape",stat:"REF",choose:!1},{name:"Driving",stat:"REF",choose:!1},{name:"Fencing",stat:"REF",choose:!1},{name:"Handgun",stat:"REF",choose:!1},{name:"Heavy Weapons",stat:"REF",choose:!1},{name:"Martial Art",stat:"REF",choose:!0},{name:"Melee",stat:"REF",choose:!1},{name:"Motorcycle",stat:"REF",choose:!1},{name:"Operate Heavy Machinery",stat:"REF",choose:!1},{name:"Pilot (Gyro)",stat:"REF",choose:!1},{name:"Pilot (Fixed Wing)",stat:"REF",choose:!1},{name:"Pilot (Dirigible)",stat:"REF",choose:!1},{name:"Pilot (Vect. Trust)",stat:"REF",choose:!1},{name:"Rifle",stat:"REF",choose:!1},{name:"Stealth",stat:"REF",choose:!1},{name:"Submachinegun",stat:"REF",choose:!1},{name:"Other REF skill",stat:"REF",choose:!0},{name:"Aero Tech",stat:"TECH",choose:!1},{name:"AV Tech",stat:"TECH",choose:!1},{name:"Basic Tech",stat:"TECH",choose:!1},{name:"Cryotank Operation",stat:"TECH",choose:!1},{name:"Cyberdeck Deign",stat:"TECH",choose:!1},{name:"CyberTech",stat:"TECH",choose:!1},{name:"Demolitions",stat:"TECH",choose:!1},{name:"Disguise",stat:"TECH",choose:!1},{name:"Electronics",stat:"TECH",choose:!1},{name:"Electronic Security",stat:"TECH",choose:!1},{name:"First Aid",stat:"TECH",choose:!1},{name:"Forgery",stat:"TECH",choose:!1},{name:"Gyro Tech",stat:"TECH",choose:!1},{name:"Paint or Draw",stat:"TECH",choose:!1},{name:"Photo & Film",stat:"TECH",choose:!1},{name:"Pharmaceuticals",stat:"TECH",choose:!1},{name:"Pick Lock",stat:"TECH",choose:!1},{name:"Pick Pocket",stat:"TECH",choose:!1},{name:"Play Instrument",stat:"TECH",choose:!1},{name:"Weaponsmith",stat:"TECH",choose:!1},{name:"Other TECH skill",stat:"TECH",choose:!0}],roles:[{name:"Cop",ability:"Authority",skills:[23,54,13,48,29,49,57,7,11]},{name:"Rocker",ability:"Charismatic Leadership",skills:[23,19,1,27,49,86,11,18,16]},{name:"Solo",ability:"Combat Sense",skills:[23,54,49,56,57,87,64,48,66,65]},{name:"Media",ability:"Credibility",skills:[23,27,29,18,13,17,11,82,14]},{name:"Nomad",ability:"Family",skills:[23,3,57,64,52,70,44,49,48]},{name:"Netrunner",ability:"Interface",skills:[23,70,29,42,73,72,27,77,39]},{name:"Techie",ability:"Jury Rig",skills:[23,70,73,43,29,76,80,68,87,77]},{name:"Medtechie",ability:"Medical Tech",skills:[23,70,28,29,71,36,83,45,13]},{name:"Corp",ability:"Resources",skills:[23,13,29,36,17,18,41,1,0]},{name:"Fixer",ability:"Streetdeal",skills:[23,79,54,49,57,84,85,8,18]}],style:{clothes:["Biker leathers","Blue jeans","Corporate Suits","Jumpsuits","Miniskirts","High Fashion","Cammos","Normal clothes","Nude","Bag Lady chic"],hair:["Mohawk","Long & Ratty","Short & Spiked","Wild & all over","Bald","Striped","Tinted","Neat, short","Short, culry","Long, straight"],affectations:["Tatoos","Mirrorshades","Ritual Scars","Spiked gloves","Nose Rings","Earrings","Long fingernails","Spike heeled boots","Weird Contact Lenses","Fingerless gloves"]},origin:[{name:"Anglo-American",languages:["English"]},{name:"African",languages:["Bantu","Fante","Kongo","Ashanti","Zulu","Swahili"]},{name:"Japanese/Korean",languages:["Japanese","Korean"]},{name:"Central European/Soviet",languages:["Bulgarian","Russian","Polish","Ukrainian","Slovak"]},{name:"Pacific Islander",languages:["Micronesian","Tagalog","Polynesian","Malayan","Sudanese","Indonesian","Hawaiian"]},{name:"Chinese/Southeast Asian",languages:["Burmese","Cantonese","Mandarin","Thai","Tibetan","Vietnamese"]},{name:"Black American",languages:["English","Blackfolk"]},{name:"Hispanic American",languages:["Spanish","English"]},{name:"Central/South American",languages:["Spanish","Portuguese"]},{name:"European",languages:["French","German","English","Spanish","Italian","Greek","Danish","Norwegian","Swedish","Finnish"]}],family:{rank:["Corporate Executive","Corporate Manager","Corporate Technician","Nomad Pack","Pirate Fleet","Gang Family","Crime Lord","Combat Zone Poor","Urban homeless","Arcology family"],parents:["Both parents are living","Your parent(s) died in warfare","Your parent(s) died in an accident","Your parent(s) were murdered","Your parent(s) have amnesia and don't remember you","You never knew your parent(s)","Your parent(s) are in hiding to protect you","You were left with relatives for safekeeping","You grew up on the Street and never had parents","Your parent(s) gave you up for adoption","Your parent(s) sold you for money"],status:["Family status is OK","Family lost everything through betrayal","Family lost everything through bad management","Family exiled/driven from their original home/nation/corporation","Family is imprisoned and you alone escaped","Family vanished. You are only remaining member","Family was murdered/killed and you were only survivor","Family is involved in longterm conspiracy, organization or association","Your family was scattered to the winds due to misfortune","Your family is cursed with a hereditary feud","You are the inheritor of a family debt; you must honor this debt"],childhood:["Spent on the Street with no adult supervision","Spent in a safe Corporate Suburbia","In a Nomad Pack moving from town to town","In a decaying, once upscale neighborhood","In a defended Corporate Zone in the central City","In the heart of the Combat Zone","In a small village or town far from the City","In a large arcology city","In a aquatic Pirate Pack","On a Corporate controlled Farm or Research Facility"]},motivation:{personality:["Shy and secretive","Rebellious, antisocial, violent","Arrogant, proud and aloof","Moody, rash and headstrong","Picky fussy and nervous","Stable and serious","Silly and fluffheaded","Sneaky and deceptive","Intellectual and detached","Friendly and outgoing"],person:["A parent","Brother or sister","Lover","Friend","Yourself","A pet","Teacher or mentor","Public figure","A personal hero","No one"],value:["Money","Honor","Your word","Honesty","Knowledge","Vengeance","Love","Power","Having a good time","Friendship"],people:["Neutral","Neutral","I like almost everyone","I hate almost everyone","People are tools. Use them for your own goals and discard them","Every person is a valuable individual","People are obstacles to be destroyed if they cross me","People are untrustworthy. Don't depend on anyone","Wipe'em all out and give the place to the cockroaches","People are wonderful"],posession:["A weapon","A tool","A piece of clothing","A photograph","A book or diary","A recording","A musical instrument","A piece of jewelry","A toy","A letter"]},rollTree:{sibling:[{rolls:[1,2,3,4,5],text:"Older",next:"siblingMF"},{rolls:[6,7,8,9],text:"Younger",next:"siblingMF"},{rolls:[10],text:"Twin",next:"siblingMF"}],siblingMF:[{rolls:[2,4,6,8,10],text:"brother",next:"siblingFeeling"},{rolls:[1,3,5,7,9],text:"sister",next:"siblingFeeling"}],siblingFeeling:[{rolls:[1,2],text:"who dislikes you"},{rolls:[3,4],text:"who likes you"},{rolls:[5,6],text:"who is neutral towards you"},{rolls:[7,8],text:"who hero worships you"},{rolls:[9,10],text:"who hates you"}],lifePath:[{rolls:[1,2,3],text:"Big problems/wins",next:"big"},{rolls:[4,5,6],text:"Friends & Enemies",next:"contacts"},{rolls:[7,8],text:"Romantic involvement",next:"romance"},{rolls:[9,10],text:"Nothing important"}],big:[{rolls:[1,2,3,4,5],text:"Disaster strikes!",next:"disaster"},{rolls:[6,7,8,9,10],text:"You get lucky!",next:"luck"}],disaster:[{rolls:[1],text:"Financial Loss or Debt",next:"loss"},{rolls:[2],text:"Imprisonment",next:"months"},{rolls:[3],text:"Illness or addiction: Lost 1 pt of REF permanently as a result.",next:"disasterAbout"},{rolls:[4],text:"Betrayal",next:"betrayal"},{rolls:[5],text:"Accident",next:"accident"},{rolls:[6],text:"Lover, friend ot relative killed",next:"killed"},{rolls:[7],text:"False Accusation",next:"accusation"},{rolls:[8],text:"Hunted by the Law",next:"huntedByTheLaw"},{rolls:[9],text:"Hunted by a Corporation",next:"huntedByCorporation"},{rolls:[10],text:"Mental or physical incapacitation",next:"incapacitation"}],loss:[{rolls:[1],text:"100 Eb",next:"disasterAbout"},{rolls:[2],text:"200 Eb",next:"disasterAbout"},{rolls:[3],text:"300 Eb",next:"disasterAbout"},{rolls:[4],text:"400 Eb",next:"disasterAbout"},{rolls:[5],text:"500 Eb",next:"disasterAbout"},{rolls:[6],text:"600 Eb",next:"disasterAbout"},{rolls:[7],text:"700 Eb",next:"disasterAbout"},{rolls:[8],text:"800 Eb",next:"disasterAbout"},{rolls:[9],text:"900 Eb",next:"disasterAbout"},{rolls:[10],text:"1000 Eb",next:"disasterAbout"}],months:[{rolls:[1],text:"1 month",next:"disasterAbout"},{rolls:[2],text:"2 months",next:"disasterAbout"},{rolls:[3],text:"3 months",next:"disasterAbout"},{rolls:[4],text:"4 months",next:"disasterAbout"},{rolls:[5],text:"5 months",next:"disasterAbout"},{rolls:[6],text:"6 months",next:"disasterAbout"},{rolls:[7],text:"7 months",next:"disasterAbout"},{rolls:[8],text:"8 months",next:"disasterAbout"},{rolls:[9],text:"9 months",next:"disasterAbout"},{rolls:[10],text:"10 months",next:"disasterAbout"}],betrayal:[{rolls:[1,2,3],text:"Blackmailed",next:"disasterAbout"},{rolls:[4,5,6,7],text:"A secret was exposed",next:"disasterAbout"},{rolls:[8,9,10],text:"Betrayed",next:"disasterAbout"}],accident:[{rolls:[1,2,3,4],text:"Disfigured, -5 ATTR",next:"disasterAbout"},{rolls:[5,6],text:"Hospitalized",next:"months"},{rolls:[7,8],text:"Lost memories",next:"months"},{rolls:[9,10],text:"Nightmares (8 out of 10 nights) of the accident",next:"disasterAbout"}],killed:[{rolls:[1,2,3,4,5],text:"They died accidentally",next:"disasterAbout"},{rolls:[6,7,8],text:"They were murdered by unknown parties",next:"disasterAbout"},{rolls:[9,10],text:"They were murdered and you know who did it. You just need the proof",next:"disasterAbout"}],accusation:[{rolls:[1,2,3],text:"Theft",next:"disasterAbout"},{rolls:[4,5],text:"Cowardice",next:"disasterAbout"},{rolls:[6,7,8],text:"Murder",next:"disasterAbout"},{rolls:[9],text:"Rape",next:"disasterAbout"},{rolls:[10],text:"Betrayal",next:"disasterAbout"}],huntedByTheLaw:[{rolls:[1,2,3],text:"A couple local cops",next:"disasterAbout"},{rolls:[4,5,6],text:"The entire local force",next:"disasterAbout"},{rolls:[7,8],text:"State police or Militia",next:"disasterAbout"},{rolls:[9,10],text:"FBI or equivalent",next:"disasterAbout"}],huntedByCorporation:[{rolls:[1,2,3],text:"Small local firm",next:"disasterAbout"},{rolls:[4,5,6],text:"Statewide corp",next:"disasterAbout"},{rolls:[7,8],text:"National corp",next:"disasterAbout"},{rolls:[9,10],text:"Multinational corp",next:"disasterAbout"}],incapacitation:[{rolls:[1,2,3],text:"Nervous disorder. -1 REF",next:"disasterAbout"},{rolls:[4,5,6,7],text:"Mental problem -1 CL",next:"disasterAbout"},{rolls:[8,9,10],text:"Psychosis -1 CL, -1 REF",next:"disasterAbout"}],disasterAbout:[{rolls:[1,2],text:"Clear your name"},{rolls:[3,4],text:"Live it down and try to forget it"},{rolls:[5,6],text:"Hunt down those responsible and moke them pay!"},{rolls:[7,8],text:"Get what's rightfully yours"},{rolls:[9,10],text:"Save, if possible, anyone else involved in the situation"}],luck:[{rolls:[1],text:"Powerful Connection in City Government",next:"govtConnection"},{rolls:[2],text:"Financial Windfall",next:"money"},{rolls:[3],text:"Big score or deal",next:"money"},{rolls:[4],text:"Find a Sensei (teacher). Begin at +2 or add +1 to a Martial Arts Skill of your choice."},{rolls:[5],text:"Find a Teacher: Add +1 to any INT based skill, or begin a new INT based skill at +2."},{rolls:[6],text:"Powerful Corporate Exec owes you one favor."},{rolls:[7],text:"Local Nomad Pack befriends you. Equivalent to a Family +2"},{rolls:[8],text:"Make a Friend on the Police Force. Inside information at a level of +2 Streetwise on any police related matters"},{rolls:[9],text:"Local Boostergang likes you. You can call upon them for 1 favor a month, equivalent to a Family Special Ability of +2"},{rolls:[10],text:"Find a Combat Teacher. Add +1 to any weapon skill with the exception of Martial Arts or Brawling, or begin a new combat skill at +2."}],govtConnection:[{rolls:[1,2,3,4],text:"Police Dept."},{rolls:[5,6,7],text:"District Attorney's Office"},{rolls:[8,9,10],text:"Mayor's Office"}],money:[{rolls:[1],text:"100 Eb"},{rolls:[2],text:"200 Eb"},{rolls:[3],text:"300 Eb"},{rolls:[4],text:"400 Eb"},{rolls:[5],text:"500 Eb"},{rolls:[6],text:"600 Eb"},{rolls:[7],text:"700 Eb"},{rolls:[8],text:"800 Eb"},{rolls:[9],text:"900 Eb"},{rolls:[10],text:"1000 Eb"}],contacts:[{rolls:[1,2,3,4,5],text:"Friend",next:"friend"},{rolls:[6,7,8,9,10],text:"Enemy",next:"enemy"}],friend:[{rolls:[1],text:"Like a big brother/sister to you"},{rolls:[2],text:"Like a kid sister/brother to you"},{rolls:[3],text:"A teacher or mentor"},{rolls:[4],text:"A partner or co-worker"},{rolls:[5],text:"An old lover (choose which one)"},{rolls:[6],text:"An old enemy (choose which one)"},{rolls:[7],text:"Like a foster parent to you"},{rolls:[8],text:"A relative"},{rolls:[9],text:"Reconnect with an old childhood friend"},{rolls:[10],text:"Met through a common interest"}],enemy:[{rolls:[1],text:"Ex friend",next:"cause"},{rolls:[2],text:"Ex lover",next:"cause"},{rolls:[3],text:"Relative",next:"cause"},{rolls:[4],text:"Childhood enemy",next:"cause"},{rolls:[5],text:"Person working for you",next:"cause"},{rolls:[6],text:"Person you work for",next:"cause"},{rolls:[7],text:"Partner or co-worker",next:"cause"},{rolls:[8],text:"Booster gang member",next:"cause"},{rolls:[9],text:"Corporate Exec",next:"cause"},{rolls:[10],text:"Government Official ",next:"cause"}],cause:[{rolls:[1],text:"Caused the other to lose face or status",next:"fracked"},{rolls:[2],text:"Caused the loss of a lover, friend or relative",next:"fracked"},{rolls:[3],text:"Caused a major humiliation",next:"fracked"},{rolls:[4],text:"Accused the other of cowardice or some other personal flaw",next:"fracked"},{rolls:[5],text:"Caused a physical disability",next:"disability",nextDie:6},{rolls:[6],text:"Deserted or betrayed the other",next:"fracked"},{rolls:[7],text:"Turned down other's offer of job or romantic involvement",next:"fracked"},{rolls:[8],text:"You just didn't like each other",next:"fracked"},{rolls:[9],text:"Was a romantic rival",next:"fracked"},{rolls:[10],text:"Foiled a plan of the other's",next:"fracked"}],disability:[{rolls:[1,2],text:"Lose eye",next:"fracked"},{rolls:[3,4],text:"Lose arm",next:"fracked"},{rolls:[5,6],text:"Badly scarred",next:"fracked"}],fracked:[{rolls:[1,2,3,4],text:"They hate you",next:"enemyAbout"},{rolls:[5,6,7],text:"You hate them",next:"enemyAbout"},{rolls:[8,9,10],text:"The feeling's mutual",next:"enemyAbout"}],enemyAbout:[{rolls:[1,2],text:"Go into a murderous killing rage and rip his face off!",next:"againstYou"},{rolls:[3,4],text:"Avoid the scum",next:"againstYou"},{rolls:[5,6],text:"Backstab him indirectly",next:"againstYou"},{rolls:[7,8],text:"Ignore the scum",next:"againstYou"},{rolls:[9,10],text:"Rip into him verbally",next:"againstYou"}],againstYou:[{rolls:[1,2,3],text:"Just himself"},{rolls:[4,5],text:"Himself and a few friends"},{rolls:[6,7],text:"An entire Gang"},{rolls:[8],text:"A small Corporation"},{rolls:[9],text:"A large Corporation"},{rolls:[10],text:"An entire Government Agency"}],romance:[{rolls:[1,2,3,4],text:"Happy love affair"},{rolls:[5],text:"Tragic love affair",next:"tragicRomance"},{rolls:[6,7],text:"Love affair with problems",next:"problematicRomance"},{rolls:[8,9,10],text:"Fast Affairs and Hot Dates"}],tragicRomance:[{rolls:[1],text:"Lover died in accident",next:"mutualFeelings"},{rolls:[2],text:"Lover mysteriously vanished",next:"mutualFeelings"},{rolls:[3],text:"It didn't work out",next:"mutualFeelings"},{rolls:[4],text:"A personal goal or vendetta came between you",next:"mutualFeelings"},{rolls:[5],text:"Lover kidnapped",next:"mutualFeelings"},{rolls:[6],text:"Lover went insane",next:"mutualFeelings"},{rolls:[7],text:"Lover committed suicide",next:"mutualFeelings"},{rolls:[8],text:"Lover killed in a fight",next:"mutualFeelings"},{rolls:[9],text:"Rival cut you out of the action",next:"mutualFeelings"},{rolls:[10],text:"Lover imprisoned or exiled",next:"mutualFeelings"}],mutualFeelings:[{rolls:[1],text:"They still love you"},{rolls:[2],text:"You still love them"},{rolls:[3],text:"You still love each other"},{rolls:[4],text:"You hate them"},{rolls:[5],text:"They hate you"},{rolls:[6],text:"You hate each other"},{rolls:[7],text:"You're friends"},{rolls:[8],text:"No feeling's either way; it's over"},{rolls:[9],text:"You like them, they hate you"},{rolls:[10],text:"They like you, you hate them"}],problematicRomance:[{rolls:[1],text:"Your lover's friends/family hate you"},{rolls:[2],text:"Your lover's friends/family would use any means to get rid of you"},{rolls:[3],text:"Your friends/family hate your lover"},{rolls:[4],text:"One of you has a romantic rival"},{rolls:[5],text:"You are separated in some way"},{rolls:[6],text:"You fight constantly"},{rolls:[7],text:"You're professional rivals"},{rolls:[8],text:"One of you is insanely jealous"},{rolls:[9],text:'One of you is "messing around"'},{rolls:[10],text:"You have conflicting backgrounds and families"}]}},Pa={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"field is-horizontal has-addons"},[n("p",{staticClass:"control"},[n("button",{staticClass:"button is-static",style:t.labelStyle,attrs:{type:"button"}},[t._v(t._s(t.label))])]),n("p",{staticClass:"control"},[t.readOnly?t._e():n("button",{staticClass:"button is-primary",staticStyle:{width:"40px"},attrs:{type:"button",disabled:t.value<=t.min},on:{click:t.decrement}},[n("i",{staticClass:"fa fa-minus",attrs:{"aria-hidden":"true"}})])]),n("p",{staticClass:"control"},[n("button",{staticClass:"button is-static",style:t.valueStyle,attrs:{type:"button"}},[t._v(t._s(t.value))])]),n("p",{staticClass:"control"},[t.readOnly?t._e():n("button",{staticClass:"button is-primary",staticStyle:{width:"40px"},attrs:{type:"button",disabled:t.value>=t.max},on:{click:t.increment}},[n("i",{staticClass:"fa fa-plus",attrs:{"aria-hidden":"true"}})])])])},staticRenderFns:[],props:{label:{type:String,required:!0},labelWidth:{type:Number,default:120},value:{type:Number,default:0},min:{type:Number,default:0},max:{type:Number,default:10},step:{type:Number,default:1},readOnly:{type:Boolean,default:!1}},data:function(){return{labelStyle:{width:this.labelWidth+"px"},valueStyle:{width:this.readOnly?"120px":"40px"}}},methods:{increment:function(){this.$emit("input",Math.min(this.value+this.step,this.max))},decrement:function(){this.$emit("input",Math.max(this.value-this.step,this.min))}}},Ma="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},Na=qn(function(t){var e=function(){function t(t,e){if(!r[t]){r[t]={};for(var n=0;n<t.length;n++)r[t][t.charAt(n)]=n}return r[t][e]}var e=String.fromCharCode,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",r={},a={compressToBase64:function(t){if(null==t)return"";var e=a._compress(t,6,function(t){return n.charAt(t)});switch(e.length%4){default:case 0:return e;case 1:return e+"===";case 2:return e+"==";case 3:return e+"="}},decompressFromBase64:function(e){return null==e?"":""==e?null:a._decompress(e.length,32,function(o){return t(n,e.charAt(o))})},compressToUTF16:function(t){return null==t?"":a._compress(t,15,function(t){return e(t+32)})+" "},decompressFromUTF16:function(t){return null==t?"":""==t?null:a._decompress(t.length,16384,function(e){return t.charCodeAt(e)-32})},compressToUint8Array:function(t){for(var e=a.compress(t),n=new Uint8Array(2*e.length),o=0,r=e.length;o<r;o++){var i=e.charCodeAt(o);n[2*o]=i>>>8,n[2*o+1]=i%256}return n},decompressFromUint8Array:function(t){if(null===t||void 0===t)return a.decompress(t);for(var n=new Array(t.length/2),o=0,r=n.length;o<r;o++)n[o]=256*t[2*o]+t[2*o+1];var i=[];return n.forEach(function(t){i.push(e(t))}),a.decompress(i.join(""))},compressToEncodedURIComponent:function(t){return null==t?"":a._compress(t,6,function(t){return o.charAt(t)})},decompressFromEncodedURIComponent:function(e){return null==e?"":""==e?null:(e=e.replace(/ /g,"+"),a._decompress(e.length,32,function(n){return t(o,e.charAt(n))}))},compress:function(t){return a._compress(t,16,function(t){return e(t)})},_compress:function(t,e,n){if(null==t)return"";var o,r,a,i={},s={},l="",c="",u="",d=2,p=3,f=2,h=[],v=0,m=0;for(a=0;a<t.length;a+=1)if(l=t.charAt(a),Object.prototype.hasOwnProperty.call(i,l)||(i[l]=p++,s[l]=!0),c=u+l,Object.prototype.hasOwnProperty.call(i,c))u=c;else{if(Object.prototype.hasOwnProperty.call(s,u)){if(u.charCodeAt(0)<256){for(o=0;o<f;o++)v<<=1,m==e-1?(m=0,h.push(n(v)),v=0):m++;for(r=u.charCodeAt(0),o=0;o<8;o++)v=v<<1|1&r,m==e-1?(m=0,h.push(n(v)),v=0):m++,r>>=1}else{for(r=1,o=0;o<f;o++)v=v<<1|r,m==e-1?(m=0,h.push(n(v)),v=0):m++,r=0;for(r=u.charCodeAt(0),o=0;o<16;o++)v=v<<1|1&r,m==e-1?(m=0,h.push(n(v)),v=0):m++,r>>=1}0==--d&&(d=Math.pow(2,f),f++),delete s[u]}else for(r=i[u],o=0;o<f;o++)v=v<<1|1&r,m==e-1?(m=0,h.push(n(v)),v=0):m++,r>>=1;0==--d&&(d=Math.pow(2,f),f++),i[c]=p++,u=String(l)}if(""!==u){if(Object.prototype.hasOwnProperty.call(s,u)){if(u.charCodeAt(0)<256){for(o=0;o<f;o++)v<<=1,m==e-1?(m=0,h.push(n(v)),v=0):m++;for(r=u.charCodeAt(0),o=0;o<8;o++)v=v<<1|1&r,m==e-1?(m=0,h.push(n(v)),v=0):m++,r>>=1}else{for(r=1,o=0;o<f;o++)v=v<<1|r,m==e-1?(m=0,h.push(n(v)),v=0):m++,r=0;for(r=u.charCodeAt(0),o=0;o<16;o++)v=v<<1|1&r,m==e-1?(m=0,h.push(n(v)),v=0):m++,r>>=1}0==--d&&(d=Math.pow(2,f),f++),delete s[u]}else for(r=i[u],o=0;o<f;o++)v=v<<1|1&r,m==e-1?(m=0,h.push(n(v)),v=0):m++,r>>=1;0==--d&&(d=Math.pow(2,f),f++)}for(r=2,o=0;o<f;o++)v=v<<1|1&r,m==e-1?(m=0,h.push(n(v)),v=0):m++,r>>=1;for(;;){if(v<<=1,m==e-1){h.push(n(v));break}m++}return h.join("")},decompress:function(t){return null==t?"":""==t?null:a._decompress(t.length,32768,function(e){return t.charCodeAt(e)})},_decompress:function(t,n,o){var r,a,i,s,l,c,u,d=[],p=4,f=4,h=3,v="",m=[],y={val:o(0),position:n,index:1};for(r=0;r<3;r+=1)d[r]=r;for(i=0,l=Math.pow(2,2),c=1;c!=l;)s=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=o(y.index++)),i|=(s>0?1:0)*c,c<<=1;switch(i){case 0:for(i=0,l=Math.pow(2,8),c=1;c!=l;)s=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=o(y.index++)),i|=(s>0?1:0)*c,c<<=1;u=e(i);break;case 1:for(i=0,l=Math.pow(2,16),c=1;c!=l;)s=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=o(y.index++)),i|=(s>0?1:0)*c,c<<=1;u=e(i);break;case 2:return""}for(d[3]=u,a=u,m.push(u);;){if(y.index>t)return"";for(i=0,l=Math.pow(2,h),c=1;c!=l;)s=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=o(y.index++)),i|=(s>0?1:0)*c,c<<=1;switch(u=i){case 0:for(i=0,l=Math.pow(2,8),c=1;c!=l;)s=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=o(y.index++)),i|=(s>0?1:0)*c,c<<=1;d[f++]=e(i),u=f-1,p--;break;case 1:for(i=0,l=Math.pow(2,16),c=1;c!=l;)s=y.val&y.position,y.position>>=1,0==y.position&&(y.position=n,y.val=o(y.index++)),i|=(s>0?1:0)*c,c<<=1;d[f++]=e(i),u=f-1,p--;break;case 2:return m.join("")}if(0==p&&(p=Math.pow(2,h),h++),d[u])v=d[u];else{if(u!==f)return null;v=a+a.charAt(0)}m.push(v),d[f++]=a+v.charAt(0),a=v,0==--p&&(p=Math.pow(2,h),h++)}}};return a}();null!=t&&(t.exports=e)}),Ia=qn(function(t){var e=e||function(t){if(!(void 0===t||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var e=function(){return t.URL||t.webkitURL||t},n=t.document.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in n,r=function(t){var e=new MouseEvent("click");t.dispatchEvent(e)},a=/constructor/i.test(t.HTMLElement)||t.safari,i=/CriOS\/[\d]+/.test(navigator.userAgent),s=function(e){(t.setImmediate||t.setTimeout)(function(){throw e},0)},l=function(t){setTimeout(function(){"string"==typeof t?e().revokeObjectURL(t):t.remove()},4e4)},c=function(t,e,n){for(var o=(e=[].concat(e)).length;o--;){var r=t["on"+e[o]];if("function"==typeof r)try{r.call(t,n||t)}catch(t){s(t)}}},u=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t},d=function(s,d,p){p||(s=u(s));var f,h=this,v="application/octet-stream"===s.type,m=function(){c(h,"writestart progress write writeend".split(" "))};if(h.readyState=h.INIT,o)return f=e().createObjectURL(s),void setTimeout(function(){n.href=f,n.download=d,r(n),m(),l(f),h.readyState=h.DONE});!function(){if((i||v&&a)&&t.FileReader){var n=new FileReader;return n.onloadend=function(){var e=i?n.result:n.result.replace(/^data:[^;]*;/,"data:attachment/file;");t.open(e,"_blank")||(t.location.href=e),e=void 0,h.readyState=h.DONE,m()},n.readAsDataURL(s),void(h.readyState=h.INIT)}f||(f=e().createObjectURL(s)),v?t.location.href=f:t.open(f,"_blank")||(t.location.href=f),h.readyState=h.DONE,m(),l(f)}()},p=d.prototype;return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,n){return e=e||t.name||"download",n||(t=u(t)),navigator.msSaveOrOpenBlob(t,e)}:(p.abort=function(){},p.readyState=p.INIT=0,p.WRITING=1,p.DONE=2,p.error=p.onwritestart=p.onprogress=p.onwrite=p.onabort=p.onerror=p.onwriteend=null,function(t,e,n){return new d(t,e||t.name||"download",n)})}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||Ma.content);t.exports&&(t.exports.saveAs=e)}).saveAs,La={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"app"}},[n("section",{staticClass:"section"},[n("div",{staticClass:"container"},[n("div",{staticClass:"box"},[n("nav",{staticClass:"pagination"},[n("a",{staticClass:"pagination-previous",attrs:{disabled:0===t.page},on:{click:function(e){t.page-=1}}},[n("i",{staticClass:"fa fa-chevron-left",attrs:{"aria-hidden":"true"}})]),n("a",{staticClass:"pagination-next",attrs:{disabled:t.page===t.pages.length-1},on:{click:function(e){t.page+=1}}},[n("i",{staticClass:"fa fa-chevron-right",attrs:{"aria-hidden":"true"}})]),n("ul",{staticClass:"pagination-list"},[n("li",[n("div",{staticClass:"file"},[n("label",{staticClass:"file-label"},[n("input",{staticClass:"file-input",attrs:{type:"file",name:"import"},on:{change:t.importCharacter}}),t._v(" "),n("span",{staticClass:"pagination-link"},[t._v("Import")])])])]),t._l(t.pages,function(e,o){return n("li",[n("a",{staticClass:"pagination-link",class:{"is-current":t.page===o},on:{click:function(e){t.page=o}}},[t._v(t._s(e))])])}),n("li",[n("a",{staticClass:"pagination-link",on:{click:function(e){t.exportCharacter()}}},[t._v("Export")])])],2)]),n("hr"),0===t.page?n("div",[n("h4",{staticClass:"title is-4"},[t._v("Character points")]),n("div",{staticClass:"field is-grouped"},[n("p",{staticClass:"control"},[n("spinner",{attrs:{label:"Character points","label-width":200,min:10,max:90,step:5},model:{value:t.char.characterPoints,callback:function(e){t.char.characterPoints=e},expression:"char.characterPoints"}})],1),n("p",{staticClass:"control"},[n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("cp")}}},[t._v("Roll")])])]),n("hr"),n("h4",{staticClass:"title is-4"},[t._v("Statistics")]),n("div",{staticClass:"columns is-multiline"},[t._l(t.options.stats,function(e,o){return n("div",{key:o,staticClass:"column is-narrow"},[n("spinner",{attrs:{label:o,"label-width":200,min:1,max:Math.min(10,t.char.stats[o]+t.cpLeft),step:1},model:{value:t.char.stats[o],callback:function(e){t.$set(t.char.stats,o,e)},expression:"char.stats[i]"}})],1)}),n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:"Run","read-only":"","label-width":200,value:t.run}})],1),n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:"Leap","read-only":"","label-width":200,value:t.leap}})],1),n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:"Lift","read-only":"","label-width":200,value:t.lift}})],1),n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:"Save","read-only":"","label-width":200,value:t.char.stats.BODY}})],1),n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:"BTM","read-only":"","label-width":200,value:t.btm}})],1)],2),n("div",[n("strong",[t._v(t._s(t.cpLeft)+" ")]),t._v(" points remaining")])]):t._e(),1===t.page?n("div",[n("h4",{staticClass:"title is-4"},[t._v("Role")]),n("div",{staticClass:"field has-addons"},t._l(t.options.roles,function(e,o){return n("p",{key:o,staticClass:"control"},[n("button",{staticClass:"button",class:{"is-primary":t.char.role===o},on:{click:function(e){t.setRole(o)}}},[t._v(t._s(e.name))])])})),n("hr"),void 0!==t.char.role?n("div",[n("h4",{staticClass:"title is-4"},[t._v("Career skills")]),n("div",{staticClass:"columns is-multiline"},[n("div",{staticClass:"column is-narrow"},[n("spinner",{attrs:{label:t.options.roles[t.char.role].ability,"label-width":200,min:1,max:Math.min(10,t.char.ability+t.careerSkillPointsLeft)},model:{value:t.char.ability,callback:function(e){t.char.ability=e},expression:"char.ability"}})],1),t._l(t.char.careerSkills,function(e,o){return n("div",{key:e.id,staticClass:"column is-narrow"},[n("spinner",{attrs:{label:t.options.skills[e.id].name,"label-width":200,max:Math.min(10,t.char.careerSkills[o].v+t.careerSkillPointsLeft)},model:{value:t.char.careerSkills[o].v,callback:function(e){t.char.careerSkills[o].v=e},expression:"char.careerSkills[i].v"}})],1)})],2),n("div",[n("strong",[t._v(t._s(t.careerSkillPointsLeft)+" ")]),t._v(" points remaining")]),n("hr"),n("h4",{staticClass:"title is-4"},[t._v("Pickup skills")]),n("div",{staticClass:"field is-horizontal"},[n("div",{staticClass:"field-body"},[n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{staticStyle:{width:"317px"},on:{change:t.addPickupSkill}},[n("option",{attrs:{disabled:"disabled",selected:"selected",value:"-1"}},[t._v("Pick a new skill")]),t._l(t.pickupSkillsAvailable,function(e){return n("option",{domProps:{value:e.id}},[t._v("["+t._s(e.stat)+"] "+t._s(e.name))])})],2)])])])]),n("div",{staticClass:"columns is-multiline"},t._l(t.char.pickupSkills,function(e,o){return n("div",{key:e.id,staticClass:"column is-narrow"},[n("spinner",{attrs:{label:t.options.skills[e.id].name,"label-width":200,max:Math.min(10,t.char.pickupSkills[o].v+t.pickupSkillPointsLeft)},model:{value:t.char.pickupSkills[o].v,callback:function(e){t.char.pickupSkills[o].v=e},expression:"char.pickupSkills[i].v"}})],1)})),n("div",{staticClass:"field is-horizontal"},[n("div",{staticClass:"field-body"},[n("div",{staticClass:"field"},[n("div",{staticClass:"control"},[n("button",{staticClass:"button",attrs:{type:"button"},on:{click:t.removeZeroPickupSkills}},[t._v("Remove 0 Skills")])])])])]),n("div",[n("strong",[t._v(t._s(t.pickupSkillPointsLeft)+"  ")]),t._v(" points remaining")])]):t._e()]):t._e(),2===t.page?n("div",[n("div",{staticClass:"columns"},[n("div",{staticClass:"column is-7"},[n("button",{staticClass:"button is-pulled-right",attrs:{type:"button"},on:{click:function(e){t.roll("style")}}},[t._v("Roll all")]),n("h4",{staticClass:"title is-4"},[t._v("Style")]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Clothes")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.style.clothes,expression:"char.style.clothes"}],attrs:{id:"style.clothes"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.style.clothes=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.style.clothes,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("style.clothes")}}},[t._v("Roll")])])]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Hair")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.style.hair,expression:"char.style.hair"}],attrs:{id:"style.hair"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.style.hair=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.style.hair,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("style.hair")}}},[t._v("Roll")])])]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Affectations")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.style.affectations,expression:"char.style.affectations"}],attrs:{id:"style.affectations"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.style.affectations=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.style.affectations,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("style.affectations")}}},[t._v("Roll")])])])]),n("div",{staticClass:"column is-5"},[n("h4",{staticClass:"title is-4"},[t._v("Origins")]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Origin")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.origin,expression:"char.origin"}],attrs:{id:"origin"},on:{change:[function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.origin=e.target.multiple?n:n[0]},t.originChanged]}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.origin,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e.name))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("origin")}}},[t._v("Roll")])])]),t.char.origin>=0?n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Language")]),n("div",{staticClass:"field is-grouped"},[n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.language,expression:"char.language"}],attrs:{id:"language"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.language=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.origin[t.char.origin].languages,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)])])])]):t._e()])])]):t._e(),3===t.page?n("div",[n("div",{staticClass:"columns"},[n("div",{staticClass:"column is-7"},[n("button",{staticClass:"button is-pulled-right",attrs:{type:"button"},on:{click:function(e){t.roll("family")}}},[t._v("Roll all")]),n("h4",{staticClass:"title is-4"},[t._v("Family")]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Family Rank")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.family.rank,expression:"char.family.rank"}],attrs:{id:"family.rank"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.family.rank=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.family.rank,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("family.rank")}}},[t._v("Roll")])])]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Parents")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.family.parents,expression:"char.family.parents"}],attrs:{id:"family.parents"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.family.parents=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.family.parents,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("family.parents")}}},[t._v("Roll")])])]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Family Status")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.family.status,expression:"char.family.status"}],attrs:{id:"family.status"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.family.status=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.family.status,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("family.status")}}},[t._v("Roll")])])]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Childhood")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.family.childhood,expression:"char.family.childhood"}],attrs:{id:"family.childhood"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.family.childhood=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.family.childhood,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("family.childhood")}}},[t._v("Roll")])])])]),n("div",{staticClass:"column is-5"},[n("button",{staticClass:"button is-pulled-right",attrs:{type:"button"},on:{click:function(e){t.roll("siblings")}}},[t._v("Roll all")]),n("h4",{staticClass:"title is-4"},[t._v("Siblings")]),0===t.char.siblings.length?n("div",[t._v("You are the only child")]):t._e(),t.char.siblings.length>0?n("div",{staticClass:"content"},[n("ul",t._l(t.char.siblings,function(e){return n("li",[t._v(t._s(t.decodeRollTree("sibling",e," ")))])}))]):t._e()])])]):t._e(),4===t.page?n("div",[n("div",{staticClass:"columns"},[n("div",{staticClass:"column is-7"},[n("button",{staticClass:"button is-pulled-right",attrs:{type:"button"},on:{click:function(e){t.roll("motivation")}}},[t._v("Roll all")]),n("h4",{staticClass:"title is-4"},[t._v("Motivation")]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Personality")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.motivation.personality,expression:"char.motivation.personality"}],attrs:{id:"motivation.personality"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.motivation.personality=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.motivation.personality,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("motivation.personality")}}},[t._v("Roll")])])]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Person you value most")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.motivation.person,expression:"char.motivation.person"}],attrs:{id:"motivation.person"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.motivation.person=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.motivation.person,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("motivation.person")}}},[t._v("Roll")])])]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("What do you value most")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.motivation.value,expression:"char.motivation.value"}],attrs:{id:"motivation.value"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.motivation.value=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.motivation.value,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("motivation.value")}}},[t._v("Roll")])])]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("How do you feel about most people?")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.motivation.people,expression:"char.motivation.people"}],attrs:{id:"motivation.people"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.motivation.people=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.motivation.people,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("motivation.people")}}},[t._v("Roll")])])]),n("div",{staticClass:"field"},[n("label",{staticClass:"label"},[t._v("Your most valued posession")]),n("p",{staticClass:"control"},[n("span",{staticClass:"select"},[n("select",{directives:[{name:"model",rawName:"v-model",value:t.char.motivation.posession,expression:"char.motivation.posession"}],attrs:{id:"motivation.posession"},on:{change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.char.motivation.posession=e.target.multiple?n:n[0]}}},[n("option",{attrs:{disabled:"disabled",selected:"selected"},domProps:{value:-1}},[t._v("Choose")]),t._l(t.options.motivation.posession,function(e,o){return n("option",{domProps:{value:o}},[t._v(t._s(e))])})],2)]),n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("motivation.posession")}}},[t._v("Roll")])])])])])]):t._e(),5===t.page?n("div",[n("div",{staticClass:"columns"},[n("div",{staticClass:"column is-12"},[n("h4",{staticClass:"title is-4"},[t._v("Age")]),n("div",{staticClass:"field is-grouped"},[n("p",{staticClass:"control"},[n("spinner",{attrs:{id:"age",label:"Age","label-width":200,min:16,max:50},model:{value:t.char.lifepath.age,callback:function(e){t.char.lifepath.age=e},expression:"char.lifepath.age"}})],1),n("p",{staticClass:"control"},[n("button",{staticClass:"button",attrs:{type:"button"},on:{click:function(e){t.roll("age")}}},[t._v("Roll")])])]),n("hr"),n("button",{staticClass:"button is-pulled-right",attrs:{type:"button"},on:{click:function(e){t.roll("lifepath")}}},[t._v("Roll")]),n("h4",{staticClass:"title is-4"},[t._v("Lifepath")]),0===t.char.lifepath.events.length?n("div",[t._v("No events to show")]):t._e(),t.char.lifepath.events.length>0?n("div",{staticClass:"content"},[n("dl",t._l(t.char.lifepath.events,function(e,o){return n("dt",[n("strong",[t._v(t._s(o+16)+": ")]),t._v(t._s(t.decodeRollTree("lifePath",e," - ")))])}))]):t._e()])])]):t._e()])])])])},staticRenderFns:[],name:"app",components:{spinner:Pa},data:function(){return{options:$a,pages:["Stats","Role and Skills","Style","Family","Motivation","Lifepath"],page:0,char:{role:void 0,characterPoints:60,stats:{INT:4,REF:4,TECH:4,COOL:4,ATTR:4,LUCK:4,MA:4,BODY:4,EMP:4},ability:1,careerSkills:[],pickupSkills:[],style:{clothes:-1,hair:-1,affectations:-1},origin:-1,language:-1,family:{rank:-1,parents:-1,status:-1,childhood:-1},siblings:[],motivation:{personality:-1,person:-1,value:-1,people:-1,posession:-1},lifepath:{age:21,events:[]}}}},computed:{cpSpent:function(){return this.char.stats.INT+this.char.stats.REF+this.char.stats.TECH+this.char.stats.COOL+this.char.stats.ATTR+this.char.stats.LUCK+this.char.stats.MA+this.char.stats.BODY+this.char.stats.EMP},cpLeft:function(){return this.char.characterPoints-this.cpSpent},run:function(){return 3*this.char.stats.MA},leap:function(){return this.run/4},lift:function(){return 40*this.char.stats.BODY},btm:function(){var t=this.char.stats.BODY;return t<=2?0:t<=4?-1:t<=7?-2:t<=9?-3:-4},careerSkillPointsLeft:function(){return 40-this.char.ability-this.char.careerSkills.reduce(function(t,e){return t+e.v},0)},pickupSkillPointsLeft:function(){return this.char.stats.INT+this.char.stats.REF-this.char.pickupSkills.reduce(function(t,e){return t+e.v},0)},pickupSkillsAvailable:function(){return this.options.skills.map(function(t,e){return{id:e,stat:t.stat,name:t.name}},this).filter(function(t,e){return!(this.char.careerSkills.some(function(e){return e.id===t.id},this)||this.char.pickupSkills.some(function(e){return e.id===t.id},this))},this)}},watch:{cpLeft:function(){for(;this.cpLeft<0;)this.char.stats.INT=Math.max(this.char.stats.INT-1,1),this.char.stats.REF=Math.max(this.char.stats.REF-1,1),this.char.stats.TECH=Math.max(this.char.stats.TECH-1,1),this.char.stats.COOL=Math.max(this.char.stats.COOL-1,1),this.char.stats.ATTR=Math.max(this.char.stats.ATTR-1,1),this.char.stats.LUCK=Math.max(this.char.stats.LUCK-1,1),this.char.stats.MA=Math.max(this.char.stats.MA-1,1),this.char.stats.BODY=Math.max(this.char.stats.BODY-1,1),this.char.stats.EMP=Math.max(this.char.stats.EMP-1,1)},pickupSkillPointsLeft:function(){for(;this.pickupSkillPointsLeft<0;)this.char.pickupSkills.forEach(function(t){t.v=Math.max(t.v-1,0)})}},methods:{setRole:function(t){t!==this.char.role&&(console.log("resetting the skills"),this.char.ability=1,this.char.careerSkills=[],this.char.pickupSkills=[],this.options.roles[t].skills.forEach(function(t){this.char.careerSkills.push({id:t,v:0})},this),this.char.role=t)},d:function(t){return Math.floor(Math.random()*t+1)},roll:function(t){switch(t){case"cp":n=0;for(e=0;e<9;e++)n+=this.d(10);this.char.characterPoints=n;break;case"style":n=this.d(10)-1;this.char.style.clothes=n,n=this.d(10)-1,this.char.style.hair=n,n=this.d(10)-1,this.char.style.affectations=n;break;case"style.clothes":n=this.d(10)-1;this.char.style.clothes=n;break;case"style.hair":n=this.d(10)-1;this.char.style.hair=n;break;case"style.affectations":n=this.d(10)-1;this.char.style.affectations=n;break;case"origin":n=this.d(10)-1;this.char.origin=n,this.char.language=-1;break;case"family":n=this.d(10)-1;this.char.family.rank=n,n=this.d(10)-1,this.char.family.parents=n,n=this.d(10)-1,this.char.family.status=n,n=this.d(10)-1,this.char.family.childhood=n;break;case"family.rank":n=this.d(10)-1;this.char.family.rank=n;break;case"family.parents":n=this.d(10)-1;this.char.family.parents=n;break;case"family.status":n=this.d(10)-1;this.char.family.status=n;break;case"family.childhood":n=this.d(10)-1;this.char.family.childhood=n;break;case"siblings":if(this.char.siblings=[],(n=this.d(10))<8)for(var e=0;e<n;e++)this.char.siblings.push(this.traverseRollTree("sibling"));break;case"motivation":n=this.d(10)-1;this.char.motivation.personality=n,n=this.d(10)-1,this.char.motivation.person=n,n=this.d(10)-1,this.char.motivation.value=n,n=this.d(10)-1,this.char.motivation.people=n,n=this.d(10)-1,this.char.motivation.posession=n;break;case"motivation.personality":n=this.d(10)-1;this.char.motivation.personality=n;break;case"motivation.person":n=this.d(10)-1;this.char.motivation.person=n;break;case"motivation.value":n=this.d(10)-1;this.char.motivation.value=n;break;case"motivation.people":n=this.d(10)-1;this.char.motivation.people=n;break;case"motivation.posession":n=this.d(10)-1;this.char.motivation.posession=n;break;case"age":var n=this.d(6)+this.d(6)+16;this.char.lifepath.age=n;break;case"lifepath":this.char.lifepath.events=[];for(var o=16;o<=this.char.lifepath.age;o++){var r=this.traverseRollTree("lifePath");this.char.lifepath.events.push(r)}}},traverseRollTree(t,e=10){const n=this.options.rollTree;for(var o=[],r=t,a=e;r;){var i=this.d(a),s=n[r].findIndex(function(t){return t.rolls.includes(i)});o.push(s);var l=n[r][s];r=l.next,a=l.nextDie||10}return o},decodeRollTree(t,e,n){const o=this.options.rollTree;var r=t;return e.reduce(function(t,e){var a=o[r][e];return r=a.next,t+=a.text+n},"").slice(0,-n.length)},addPickupSkill:function(t){var e=Number(t.target.value);this.char.pickupSkills.push({id:e,v:0}),t.target.value=-1},removeZeroPickupSkills:function(){this.char.pickupSkills=this.char.pickupSkills.filter(function(t){return t.v>0},this)},originChanged:function(){this.char.language=-1},importCharacter(t){var e=t.target.files[0],n=new FileReader;self=this,n.addEventListener("loadend",function(){var t=n.result,e=Na.decompressFromUTF16(t);if(console.log(e),null!==e){var o=JSON.parse(e);self.$set(self,"char",o)}else alert("file cannot be decoded")}),n.readAsText(e)},exportCharacter(){var t=JSON.stringify(this.char);console.log(t);var e=Na.compressToUTF16(t);console.log(e);var n=new Blob([e],{type:"text/plain;charset=utf-16"}),o=prompt("File name:","character.txt");Ia(n,o)}}};new Ae({el:"#app",render:function(t){return t(La)}})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
